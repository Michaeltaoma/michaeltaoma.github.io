<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tao Ma</title>
    <description>And hello to you to:)</description>
    <link>http://localhost:4000</link>
    
      
        <item>
          <title>What is bias?</title>
          <description>&lt;h2 id=&quot;what-is-bias&quot;&gt;What is bias?&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/HetFihsXSys&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;但凡对于神经网络有过一定了解的人，就不会不知道bias。bias为分界线提供了一个灵活的变化。假设现在使用的激活函数是ReLU即整流线型激活函数，当加权和\( \sum_{i = 1}w_{i}*x_{i} + bias \)进入到达神经元时，这个函数的行为如下图所示
&lt;img src=&quot;assets/post_pics/2560px-Ramp_function.svg.png&quot; /&gt;
显然，施加了ReLU激活函数的神经元阈值为0，那么如果我们在训练的时候发现，0并不是一个最好的阈值，1才是一个最好的阈值，那该怎么办呢？当这种情况发生，神经网络会自适应调整bias的值，把bias的值变成-1，&lt;strong&gt;这样通过改变bias的大小的同时调整了函数的阈值，使得nn的适应性更加强。&lt;/strong&gt;
bias偏差值和学习率一样，初始化的时候随机生成，我们训练神经网络，就是通过多次迭代，找出现有训练集下的能够最大化模型预测精准度的参数的值。在计算加权和的时候，为了确保bias能够随着权重在每一次的迭代中被调整到，神经网络都是把bias当作是一个不存在的输入\(x_0(= 1) \)的权重，也就是说，\( \sum_{i=0}w_{i}*x_{i} \)是等价于\(\sum_{i = 1}w_{i}*x_{i} + bias \).&lt;/p&gt;

&lt;h2 id=&quot;bias-in-machine-learning-models&quot;&gt;Bias in Machine Learning Models&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这里的偏见指的真的是偏见，就比如脸部识别算法对于女性的脸庞表现没有那么好, 我们的目标是develop the benefits of machine learning for everyone，所以用数据代表类别is a first step in avoiding bias.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;interactive bias&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;selection bias&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;latent bias&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;u href=&quot;https://developers.googleblog.com/2018/04/text-embedding-models-contain-bias.html&quot;&gt;这里有更加详细的解释&lt;/u&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Human data encodes human biases by default.&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;简单的打个比方，fashion mnist中有许多的照片，但是如果encode data的人坚信只有高跟鞋才算鞋子，那么会在数据集中囊括许多的高跟鞋的照片，从而导致偏见从人类身上转移到了机器身上&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;callbacks&quot;&gt;Callbacks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在tensorflow里面可以定义一个回调机制，他的工作原理是：可以实现在每次迭代一轮之后，自动调用指定的函数，例如on_epoch_end可以帮助我们控制训练终止的时机，其实调用函数并不一定每次都要在一次迭代训练之后，而可以在六个不同的时间点，下面第二篇文章详细介绍了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何实现的？其实自己也实现了一次，就懒得记了，希望csdn用不倒下，这篇博客讲的非常详细&lt;a href=&quot;https://blog.csdn.net/STILLxjy/article/details/98756775&quot;&gt;如何重写on_epoch_end&lt;/a&gt;, 这篇文章是最最最玩具车的介绍&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但这篇文章讲了些许干货&lt;a href=&quot;https://www.cnblogs.com/weiyinfu/p/9874195.html&quot;&gt;干活！！&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cnn-convolutional-neural-network&quot;&gt;CNN: Convolutional Neural Network&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;condense the image down to the important features that distinguish what makes it a shoe, or a handbag, or a shirt&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主要的大意就是在会有一个filter，这个filter上面上面存在一些值，姑且当他们是“权重”，这些权重可以作用于某个pixel值之上，通过和他以及他的neighbour相乘得到一个新的pixel值，如下图所示&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;By passing filters over an image to reduce the amount of information, they then allowed the neural network to effectively extract features that can distinguish one class of image from another.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-16_14-55-36.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这样做的目的是：加重特征(emphasize feature)&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/pixel.png&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;上面没有讲清楚，filtering的意义主要是特征加重，很少有特征减少，而下面的pooling的意义才是特征减少，摒弃掉某些特征&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pooling&lt;/strong&gt;: Compress image, 给定一个区域，选取这个区域中pixel值最大的点，输出这个点，就像这样，注意最后对应的位置也是一样的&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;You also saw how pooling compresses the information to make it more manageable. This is a really nice way to improve our image recognition performance.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-16_15-01-24.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用filter会减少dimension的原因是因为，如果你这个filter是三乘三的话，那么你这张图片的最顶端，是没有neighbour的，那么也就是说他们的输出值是无法被定义的，所以只要没有足够用于计算的neighbour，那这个就是pixel的点就是无法被定义的，所以会被reduce掉&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所谓的conv number指的是总共生成了多少个filter，如果有64个，说明有64个filter生成，且这个卷积层结束后会有64个图片&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何理解卷积神经网络中的channel？：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;channel可以直观的想像成“叠加的二维图片“，每一个通道，是数字图像中存储不同类型信息的灰度图像，一个图像中最多可以有数十个通道，注意，单一的通道实际上只代表着一个灰度图像，所以如果一张图片只有一个通道的话，那么说明这张图片就是一张灰色的图片；平时的照片是彩色的，说明这是三个通道的照片，分别是RGB&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;卷积神经网络中的chaneel又分别有三个：&lt;/p&gt;
        &lt;ol&gt;
          &lt;li&gt;输入的图片的channel，这个由图片自身所决定&lt;/li&gt;
          &lt;li&gt;卷积操作完成后输出的out_channels，这个由卷积核的数量决定，比如卷积核有64个，输出的图片就有64个channel，这时候就记住他是channel就好，不要尝试直观的记忆，且这个会作为下一次卷积时的卷积核的in_channel&lt;/li&gt;
          &lt;li&gt;卷积核中的in_channel，是上一次卷积的out_channel，这个in_channel决定了每个卷积核会作用于多少个pixel上面&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;写代码的时候要注意的点就是卷积和pool只是提取特征，最后还是要丢到全连接层里面去的，如果原来的图片没有specify channel的话，必须要给他specify上&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-real-world-images&quot;&gt;Using Real-World images&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;tensflow的一个帮忙label照片的东西&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One feature of the image generator is that you can point it at a directory and then the sub-directories of that will automatically generate labels for you.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-17_20-32-22.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;course-2-convolutional-neural-networks-in-tensorflow&quot;&gt;Course 2: Convolutional Neural Networks in Tensorflow&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Image augmentation and data augmentation is one of the most widely used tools in deep learning to increase your dataset size and make your neural networks perform better&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个解决的是数据集不够的问题，比如如果猫猫一直在图片的上端，那么如果是猫猫在图片的下端就很难识别出来&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所以可以用tf的库，这个imagegenerator可以令图片的改动不直接发生在drive上，keras的这个东西不会直接修改图片，而是在训练中做preprocessing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;augmentation指的其实就是数据增强，比如我们可以翻转图片啊，旋转图片之类的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;除了要增加训练集的randomness，还要增加测试集的randomness&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所以训练时间变长的原因是因为image preprocessing takes cycle&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;transfer-learning&quot;&gt;Transfer Learning&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Download maybe an open-source model that someone else has already trained on a huge dataset maybe for weeks and use those parameters as a starting point to then train your model just a little bit more on perhaps a smaller dataset that you have for a given task, so it is called &lt;em&gt;transfer learning&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用别人已经训练好的模型，自己再加以调整和使用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主要还是因为自己训练的话，训练集太小了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们在调整别人的模型的时候，可以选择把别人的一些模型适当给锁住。 比如现在的目的是要实现的是图像识别，那么别人训练好的卷积层的特征一般都是universal的，我们可以直接用，在自己训练的时候，把这些训练好的卷积层给锁住，然后只训练dense layer的权值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Droout:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;they remove a random number of neurons in your neural network.&lt;/li&gt;
      &lt;li&gt;Two reason why it works well:
        &lt;ul&gt;
          &lt;li&gt;The first is that neighboring neurons often end up with similar weights, which can lead to overfitting, so dropping some out at random can remove this.&lt;/li&gt;
          &lt;li&gt;The second is that often a neuron can over-weigh the input from a neuron in the previous layer, and can over specialize as a result.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>2020-06-22T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/tensorflow-in-practice</link>
          <guid isPermaLink="true">http://localhost:4000/tensorflow-in-practice</guid>
        </item>
      
    
      
        <item>
          <title>Company Fraud Analytic</title>
          <description>&lt;h3 id=&quot;论文笔记&quot;&gt;论文笔记&lt;/h3&gt;

&lt;h4 id=&quot;assessing-the-risk-of-management-fraud-through-neural-network-technology&quot;&gt;Assessing the Risk of Management Fraud Through Neural Network Technology&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Analytical Procedure（分析程序）：是指注册会计师通过研究不同财务数据之间以及财务数据与非财务数据之间的内在关系，对财务信息作出评价。分析程序是注册会计师在了解被审计单位及其环境时运用的重要程序之一
    &lt;ul&gt;
      &lt;li&gt;论文中的定义：consisting of evaluations of financial information made by a study of plausible relationships among both financial and non-financial data&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Expectation Gap: 审计期望差是指公众对审计的需求与公众对目前审计执业的认识之间存在的差距。
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://wiki.mbalib.com/wiki/%E5%AE%A1%E8%AE%A1%E6%9C%9F%E6%9C%9B%E5%B7%AE&quot;&gt;这里面讲的很详细&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2020-06-15T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/company-fraud-analytic</link>
          <guid isPermaLink="true">http://localhost:4000/company-fraud-analytic</guid>
        </item>
      
    
      
        <item>
          <title>Mlp</title>
          <description>&lt;h3 id=&quot;mlpmulti-layer-perceptron&quot;&gt;MLP(Multi-layer Perceptron)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;什么是凸优化（covex optimization）：
    &lt;ul&gt;
      &lt;li&gt;凸优化指的是损失函数是凸函数的优化（是吗？？）凸函数指的是这个函数的local maximum就是其global maximum，所以凸优化对一开始的条件不是很在乎，反正不管从哪个点开始，凸优化都可以沿着梯度的方向找到全局最优&lt;/li&gt;
      &lt;li&gt;但是随机梯度下降，处理损失函数往往就不是凸函数，therefore the initial parameters is actually quite important to neural network. It has direct relationship to the performance of the gradient based algorithm.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;我乱赌一下cost function不会考，但是大体了解一下对于什么样子的数据，并且还有关于交叉熵的推导，可以这么说，几乎所有的损失函数，都是用最大似然角度推导而来的，所以最大似然是一个原则，而不是一个损失函数：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zdy0_2004/article/details/56843022&quot;&gt;关于损失函数的选择&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/97698386&quot;&gt;关于损失函数的选择&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38241764&quot;&gt;关于交叉熵及其推导过程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hidden Unit:
    &lt;ul&gt;
      &lt;li&gt;线性整流函数在0的时候不可以导，not differentiable，那么为什么他依然可以作为hidden unit的激活函数呢？
        &lt;ul&gt;
          &lt;li&gt;ReLU is differentiable at all the point except 0. the left derivative at z = 0 is 0 and the right derivative is 1. This may seem like g is not eligible for use in gradient based optimization algorithm. But in practice, gradient descent still performs well enough for these models to be used for machine learning tasks. This is in part because neural network training algorithms do not usually arrive at a local minimum of the cost function. Hence it is acceptable for the minima of the cost function to correspond to points with undefined gradient.(一般达不到)&lt;/li&gt;
          &lt;li&gt;在实际的应用中，可以通过别的办法来保护这个算法，另其在0的时候也能返还一个值，不至于造成error&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;https://blog.vlitter.top/post/why-can-we-use-non-differentiable-relu-in-gradient-descent/&quot;&gt;读完这个就稳了&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;relu的拓展
        &lt;ul&gt;
          &lt;li&gt;absolute value rectification&lt;/li&gt;
          &lt;li&gt;leaky relu&lt;/li&gt;
          &lt;li&gt;parametric relu/PRelu&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;softmax函数和sigmoid函数的区别：都可以用作输出函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;什么是universal approximation properties and depth&lt;/li&gt;
  &lt;li&gt;什么是雅可比矩阵和hessian矩阵&lt;/li&gt;
  &lt;li&gt;bp算法在计算机中是怎么实现的：dp！！！&lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2020-06-09T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/mlp</link>
          <guid isPermaLink="true">http://localhost:4000/mlp</guid>
        </item>
      
    
      
        <item>
          <title>Dnn</title>
          <description>&lt;h3 id=&quot;第一章&quot;&gt;第一章&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Representation Learning&lt;/strong&gt;: Use machine to discover not only the mapping from representation to output but also the representation itself.（所以可以看出表示学习是机器学习的一个支线，它不仅学习输入到输出的关系，他还学习如何表示一个输入）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Autoencoder&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;encoder: converts the input data into a different representation&lt;/li&gt;
      &lt;li&gt;decoder: converts the new representation back to the original format&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;所以深度网络中的隐藏层可以被看作是负责特征提取的&lt;/li&gt;
  &lt;li&gt;Two main ways of measuring the depth:
    &lt;ul&gt;
      &lt;li&gt;The first view is based on the number of sequential instructions that must be executed to evaluate the architecture&lt;/li&gt;
      &lt;li&gt;depth of the graph describing how concepts are related to each other&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;先留坑历史学习&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;应用数学与机器学习基础&quot;&gt;应用数学与机器学习基础&lt;/h3&gt;

&lt;h4 id=&quot;线性代数&quot;&gt;线性代数&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;标量scalar&lt;/strong&gt;：一个标量就是一个单独的数，它不同于线性代数中研究的其他 大部分对象(通常是多个数的数组)。我们用斜体表示标量。标量通常被赋予小写的变量名称。当我们介绍标量时，会明确它们是哪种类型的数。比如，在定义实数标量时，我们可能会说 ‘‘令 s ∈ R 表示一条线的斜率’’;在定义自然数标量时，我们可能会说 ‘‘令 n ∈ N 表示元素的数目’’。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;向量vector&lt;/strong&gt;：A vector is an array of numbers。一个向量是一列数。这些数是有序排列的。通过次序中的索 引，我们可以确定每个单独的数。通常我们赋予向量粗体的小写变量名称，比 如 x。向量中的元素可以通过带脚标的斜体表示。向量 x 的第一个元素是 x1，第二个元素是 x2，等等。所以在这里的向量特指的是一个[x1, x2, x3…, xn]这样的一个东西，所谓的“多维向量”其实都是张量。标准的向量都是列向量&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;矩阵matrix&lt;/strong&gt;：矩阵特指一个二维数组，一个元素被两个索引而确定，这里的矩阵特指的是像2*2的矩阵&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;张量&lt;/strong&gt;：超过二维的数组。就是各种各样奇形怪状的矩阵都用张量来表示比如（2*2*2）这就是一个三维的张量，就像是个立方体的一样&lt;/li&gt;
  &lt;li&gt;有时，我们通过将向量元素作为行矩阵写在文本行中，然后使用转置操作将其变为标准的列向量&lt;/li&gt;
  &lt;li&gt;在机器学习中，&lt;strong&gt;允许矩阵和向量相加&lt;/strong&gt;，矩阵和向量相加的操作就像\( C = A_{i, j} + b_{j} \)，这个的意义是向量b和矩阵A的每一行（j）相加&lt;/li&gt;
  &lt;li&gt;这个简写方法使我们无需在加法操作前定义一个将向量 b 复制 到每一行而生成的矩阵。这种隐式地复制向量 b 到很多位置的方式，被称为 广播(broadcasting)。&lt;/li&gt;
  &lt;li&gt;矩阵和向量相乘：\( C_{i, j} = \sum_{k} A_{i, k}B_{k, j} \)
    &lt;ul&gt;
      &lt;li&gt;A(B + C) = AB + AC&lt;/li&gt;
      &lt;li&gt;A(BC) = (AB)C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-31_22-23-09.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单位矩阵(Identity Matrix)：比如说I_n，那他是个n*n的矩阵且在他的对角线上全都是1，其他位置全是0&lt;/li&gt;
  &lt;li&gt;A的矩阵逆：\( A\times A^{-1} = I_{n} \)&lt;/li&gt;
  &lt;li&gt;并且通过证明可得：&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
	&amp; Ax = b \\
	&amp; x = A^{-1}b
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deep-feedforward-networks&quot;&gt;Deep Feedforward Networks&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Deep feedforward networks, feedforward neural networks, Multilayer perceptrons其实都是一个东西。目的都是学的一个方程 \( f* \)比如可以用来学得一个把数据x映射到类别y的分类器。&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;A feedforward network defines a mapping \( y = f(x;\theta) \) and learns the value of the parameters \( \theta \) that result in the best function approximation&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;feedforward并没有feedback connection，有feedback connection的叫做recurrent network.&lt;/li&gt;
  &lt;li&gt;用数学的方式来表示layer：\( f(x) = f^{(3)}(f^{(2)}(f^{(1)}(x))) \)，那么可以看到在这个例子里面，
    &lt;ul&gt;
      &lt;li&gt;（1）就代表的是第一个layer&lt;/li&gt;
      &lt;li&gt;（2）代表的就是第二个layer。这个chain的长度就是模型的深度depth。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;除了output layer，并没有额外的信息来告诉这个模型在每个hidden layer他应该如何表现&lt;/li&gt;
  &lt;li&gt;刚刚说到了&lt;em&gt;depth&lt;/em&gt;深度，而hidden layer的维度则决定了模型的宽度&lt;/li&gt;
  &lt;li&gt;It is best to think of feedforward networks as function approximation machines that are designed to achieve statistical generalization, occasionally drawing some insights from what we know about the brain, rather than as models of brain function&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;linear-models&quot;&gt;Linear Models&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Logistic regression，linear regression&lt;/li&gt;
  &lt;li&gt;使用他们的好处是：
    &lt;ul&gt;
      &lt;li&gt;Can be fit efficiently and reliably. either in closed form or with convex optimization&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缺点就是线性模型只可以model线性函数，也就是说这种方式并不可以找出任何的关系&lt;/li&gt;
  &lt;li&gt;解决的办法是把数据x映射到\( \phi(x) \)，\( \phi(x) \)指的是x的一个新的representation，线性模型是可以作用在这个新的x上面&lt;/li&gt;
  &lt;li&gt;如何找到这个\( \phi () \)映射呢？
    &lt;ul&gt;
      &lt;li&gt;把x映射到无限维，就像之前在自学452的时候说的那样&lt;/li&gt;
      &lt;li&gt;手扒这个映射&lt;/li&gt;
      &lt;li&gt;把这个\( \phi \)定义成一个hidden layer：\( y = f(x;\theta, w) = \phi(x;\theta)^{T} w \)。在这个方法下面，只需要先指明映射的大类，然后就可以让算法自己去学这个具体的映射(这是一个关于隐藏层的一个全新的理解)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;61-example-learning-xor&quot;&gt;6.1 Example: Learning XOR&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;数据集= {[0, 0], [0, 1], [1, 0], [1, 1]}&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;损失函数loss function：Mean Square Error：&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}

  J(\theta) = \frac{1}{4} \sum_{x \in 数据集}(f^*(x) - f(x;\theta))^{2}

  \end{aligned}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;所以在这些表示里面，\( \theta \)代表的是这一层级中的所有参数，那么在这里面的theta就有权重和bias，因为这个计算只是“一层的计算”。而像刚刚\( y = f(x;\theta, w) = \phi(x;\theta)^{T} w \)这个下面，为什么不把theta和w分在一起的原因是因为theta是属于那个映射的参数，而w是属于映射好了之后线性映射的参数，所以是不一样的&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不管怎么说，现在的模型如下：&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
  &amp; f(x;w,b) = x^T w + b
  \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;这篇文章提出的一些看法是之前从来没讲过的，还是觉得把这么重要的一门课拿来给farhana这种划水教授讲真的败坏老子的前程。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面两张图分别代表了现在的problem space和他propose的多层前置网络&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-24_16-33-16.png&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;观察右边的h sapce，他把(0, 1)和(1, 0)这两个点都映射到了同一个点(1, 0)上面，这样就线性可分了&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-24_16-34-48.png&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;他这里关于激活函数的使用就和之前理解的很不一样。之前理解的是，激活函数表现的就像是神经元的携带信息的动作电位，而这里的解释是激活函数&lt;strong&gt;把线性不可分的数值等价的映射到线性可分的位置上面&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;隐藏层的激活函数选用线性函数的意义不大，如果隐藏层依然选用线性函数的话，整体的模型也还是一个线性函数&lt;/strong&gt;&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
  &amp; h = g(W^T x + c)
  \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以上的g代表的就是一个激活函数，在这里他选用的是ReLu（Rectified Linear Unit）线性整流函数（修正线性单元）&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = max(0, x)&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;那么这样整合下来的话，完整的模型就是:&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
  f(x;W, c, w, b) = w^{T} max(0, W^{T} x + c) + b
  \end{aligned}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;书中还演示了一遍walk through，这个walkthrough是根据一个已有的答案来的，这个答案属于global minimum of loss function set里面，也就是说还有别的答案&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;62-gradient-based-learning&quot;&gt;6.2 Gradient-Based Learning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Convex and loss function: Popular loss functions are convex because a local minimum of a convex function is a global minimum. 对于一个convex的loss function来说，我们的目标是找到这个loss function的convex的local minimum，这个local minimum只有一个且是global minimum。所以loss function如果是convex的话，对于之后找极值相当有帮助。&lt;/li&gt;
  &lt;li&gt;所以训练神经网络和线性模型最大的区别就是：
    &lt;ul&gt;
      &lt;li&gt;线性模型使用convex optimization凸优化，而凸优化从任何initial parameters开始，只要找到了一局部最优，因为我们的损失函数是凸函数，那么也就找到了这个函数的全剧最优，所以“一旦将一个实际问题表述为凸优化问题，大体上意味着相应问题已经得到彻底解决，这是非凸的优化问题所不具有的性质。”&lt;/li&gt;
      &lt;li&gt;神经网络模型使用的是随机梯度下降，使用这个的原因是因为神经网络的损失函数往往是非凸函数，非凸函数就不存在局部最优必定等于全局最优，所以神经网络的优化器只可以随机开始于损失函数的一点，然后慢慢一步一步找全剧最优（沿着梯度找）
        &lt;ul&gt;
          &lt;li&gt;梯度：梯度的本意是一个向量（矢量），表示某一函数在该点处的方向导数沿着该方向取得最大值，即函数在该点处沿着该方向（此梯度的方向）变化最快，变化率最大（为该梯度的模）。&lt;/li&gt;
          &lt;li&gt;所以其实对于神经网络的优化器来说，initial condition还挺重要的&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;the training algorithmis almost always based on using the gradient to descend the cost function in oneway or another.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;621-cost-function&quot;&gt;6.2.1 Cost function&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Cost function一般是这样定义的：In most cases, our parametric model deﬁnes a distribution \( p(y | x;\theta) \) and we simply use the principle of maximum likelihood&lt;/li&gt;
  &lt;li&gt;对数似然函数的代价函数的基本过程：想办法定义概率分布函数，取这个概率分布函数的log然后找最佳参数匹配&lt;/li&gt;
  &lt;li&gt;使用最大似然法则提取出来的cost function符合这个原理：
    &lt;ul&gt;
      &lt;li&gt;机器学习可以看作是给定数据x，我们要预测y，假设y服从某一种分布，那么机器学习就是想要学得这个分布的具体的参数，假设已知label y服从某一概率分布，通过最大似然函数找出令P(y | 参数)最大的参数值来确定概率模型的参数，这样子就是用最大似然函数去求代价函数的基本意义&lt;/li&gt;
      &lt;li&gt;Principle of maximum likelihood:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;简单来说就是我们选择模型是基于概率的：我们选择模型的原则是，他比所有别的模型都更好，给定样本的情况下，参数是某参数的概率是最高的，也就是参数基于样本的后验概率是最高的，以下是一个最大似然估计（Maximum Likelihood Estimation）的例子
  假设有个袋子，里面有7个白球和三个红球，设白球的比例为\( \theta \)&lt;/p&gt;

            &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
  f(x_{1}, x_{2} | \theta) = f(x_{1}|\theta) \times f(x_2 | \theta)
  \end{aligned}&lt;/script&gt;

            &lt;p&gt;其中x1和x2表示两次采样，f是模型而theta是模型的参数，因为这两个样本是独立同分布，所以他们一起发生的概率就是相乘在一起，现在模型参数theta是未知的，为了求得这个theta，我们把似然L定义成theta关于采样的后验概率&lt;/p&gt;

            &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
  L(\theta|x_1, x_2) = f(x_1, x_2 | \theta) = \prod_{i = 1}^{2} f(x_i | \theta)
  \end{aligned}&lt;/script&gt;
          &lt;/li&gt;
          &lt;li&gt;所以接下来的目的，就是找到令似然函数最大的theta值&lt;/li&gt;
          &lt;li&gt;一般来说，就是要找到这个最大值，甚至可以直接求导&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;像刚刚的例子他定义的分布就很简单就是一个概率分布，而在机器学习中，如果把似然和概率分布的概念利用起来的话，就可以得到下面的式子&lt;/li&gt;
  &lt;li&gt;其中，\( P_{model}(x;\theta) \)是：maps any configuration x to a real number estimating the true probabolity&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后\( P_{model}(x) \)也等同于p(y|x;theta)
&lt;script type=&quot;math/tex&quot;&gt;\begin{aligned}
\theta_{ML} = argmax_{\theta} \prod_{i = 1}^{m} P_{model}(x^{(i)};\theta)
\end{aligned}&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;意思就是给定参数和模型下面，预测出来的类别是这个y的概率是多少，那么为什么有的时候说&lt;strong&gt;log p&lt;/strong&gt;呢，这是因为，如果两边同时取对数的话，不影响函数的单调性也不影响选出来的theta值，但可以把连乘变成连加，大大减少了之后求导的难度&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
\theta_{ML} = argmax_{\theta} \sum_{i = 1}^{m} LogP_{model}(x^{(i)};\theta)
\end{aligned}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;所以我们训练theta值的时候这么训练的:&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
\theta_{ML} = argmax_{\theta} E_{x \sim \hat{P}_{data}}[LogP_{model}(x^{(i)};\theta)]
\end{aligned}&lt;/script&gt;

&lt;h5 id=&quot;6211-learning-conditional-distributions-with-maximum-likelihood&quot;&gt;6.2.1.1 Learning Conditional Distributions with Maximum Likelihood&lt;/h5&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
J(\theta) = -E_{x, y \sim \hat{P}_{data}} [Log p_{model}(y|x)]
\end{aligned}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;以上就是一个cost function，适用于各种模型，根据不同log p模型的选择，最终出来的cost function也不一样。打个比方如果是linear regression的话，他代入的结果就是一个mean suqare error cost&lt;/li&gt;
  &lt;li&gt;这个的好处是，因为需要用到梯度，我们的代价函数需要large and predictable enough才可以成为一个很好的指路人，求得的梯度才有意义。但是如果一些非常饱和的代价函数（饱和的代价函数指的是在图像上非常平的代价函数）会破坏这种算法，也不能说是破坏吧，总而言之就是会令算法的效率非常低并且可能会陷入局部最优。造成这一问题的原因是有些激活函数在遇到极负的参数会变得饱和：&lt;strong&gt;几个输出单元都涉及到一个exp函数，当它的参数非常负面时，这个函数可能会达到饱和。负对数似然代价函数中的对数函数抵消了某些输出单元的输出.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;这个抵消就很关键：\( Log_{e} e^{X} = X \)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对于实值输出变量，如果模型能够控制输出分布的密度(例如，通过学习高斯输出分布的变异参数)，那么就有可能将极高的密度分配给正确的训练集输出，从而导致交叉熵趋近于负无穷。第7章描述的正则化技术提供了几种修改学习问题的不同方法，这样模型就不能以这种方式获得无限的回报（完全没看懂的一句话）：极高的密度也就是说如果习得的参数是正确的话，那么模型就可以为这个参数匹配极高的概率，从而在接下来的梯度里面对其进行比较小的调整&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;6212-learning-conditional-statistics&quot;&gt;6.2.1.2 Learning Conditional Statistics&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Instead of learning a full probability distribution \( p(y |x;\theta) \), we often want to learn just one conditional statistic of y given x. 比如，我们可能只想知道我们训练出来的y的平均值&lt;/li&gt;
  &lt;li&gt;这个东西就很牛逼，如果我们把神经网络理解成：神经网络可以从许许多多的函数集合中找到对应的函数（这些函数的集合是很泛的）。那么可以把成本函数看成是一个&lt;strong&gt;functional泛函数: A functional is a mapping from functions to real numbers.&lt;/strong&gt;这个就很高级了，学习不再是调参，而是寻找函数，我们可以令损失函数的最低点为一个我们想要的函数。比如我们可以令损失函数的最低点落在一个把x映射到y的expected value的函数上。这种优化问题被称为：&lt;strong&gt;Calculus of variation&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_17-25-58.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据变分法，其实上面6.14的公式也很好看懂，也就是通过求解这个最优问题（以minimize f为目标）来找到一个计算y的均值的式子。而得出来的计算平均值的函数属于：&lt;strong&gt;mean absolute error&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;622-output-units&quot;&gt;6.2.2 Output Units&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;损失函数和表示output unit的选择是深深耦合在一起的。&lt;/li&gt;
  &lt;li&gt;事实上，output unit和hidden unit作为神经网络的unit其实是没什么区别的，只不过output unit处于output layer并且负责output。&lt;/li&gt;
  &lt;li&gt;在这一个小节的学习中，hidden feature表示为：\( h = f(x;\theta) \)，而output layer则为这些特征增加了最后一层的变换&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;6221-linear-units-for-gaussian-output-distribution&quot;&gt;6.2.2.1 Linear Units for Gaussian Output Distribution&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;顾名思义：如果是linear unit的话，他的output layer会预测出\( \hat{y} = W^{T}h + b \)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Linear output layers are often used to produce the mean of a conditional gaussian distribution&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
	p(y|x) = \mathcal{N} (y;\hat{y}, I)
\end{aligned}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这里假设这个后验概率是高斯分布的极其重要，因为对于高斯分布的话：&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
      p(x) = \frac{1}{\sqrt{2\pi} {\sigma}} e^{-\frac{1}{2{\sigma}^{2}} x^{2}}
  \end{aligned}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个性质也非常关键，可以拿来推mean square error，现在定义一个似然函数：&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
  &amp; L(\theta) = \prod_{i = 1}^{n} p(y|x, \theta, \sigma) \\
  &amp; 给两边取对数，方便计算 \\
  &amp; J(\theta) = nln \frac{1}{\sqrt{2\pi}\sigma} - \frac{1}{2{\sigma}^{2}} \sum_{i = 1}{n}(y - f^{*}(x))^2 
  \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;所以本质上，线性拟合找的是结果y的条件高斯分布的mean，然后根据最大似然的理念去得到一个代价函数，这个代价函数等同于最小二乘&lt;/li&gt;
  &lt;li&gt;linear units do not saturate, they pose little diﬃculty for gradient-based optimization algorithms and may be used with a wide variety of optimizationalgorithms从不饱和，何时是个头&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;6222-sigmoid-units-for-bernoulli-output-distribution&quot;&gt;6.2.2.2 Sigmoid Units for Bernoulli Output Distribution&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;二元分类问题的的maximum likihood approach就是要定义一个基于伯努利分布的条件概率&lt;/li&gt;
  &lt;li&gt;sigmoid的意义是：把线性结果转换为一个概率&lt;/li&gt;
  &lt;li&gt;伯努利分布指的是对于随机变量X有, 参数为p(0&amp;lt;p&amp;lt;1)，如果它分别以概率p和1-p取1和0为值。EX= p,DX=p(1-p)。伯努利试验成功的次数服从伯努利分布,参数p是试验成功的概率。伯努利分布是一个离散型机率分布，是N=1时二项分布的特殊情况，为纪念瑞士科学家詹姆斯·伯努利(Jacob Bernoulli 或James Bernoulli)而命名。&lt;/li&gt;
  &lt;li&gt;如果用这一个的话，因为probability需要定义在[0, 1]这个范围内，所以如果是用linear的话，如果approximate出来的东西的梯度会变成0（具体可以看书上的例子），这样子梯度是0的东西就无法对他的参数进行调整&lt;/li&gt;
  &lt;li&gt;综上，我们用sigmoid output unit来代替linear output unit：\( \hat{y} = \sigma (w^{T}h + b) \), 在原有的linear output的基础上多加一个sigmoid函数去把linear output z变成一个概率&lt;/li&gt;
  &lt;li&gt;然后书上propose了一个推理过程（how to deﬁne aprobability distribution overyusing the value z）：
    &lt;ul&gt;
      &lt;li&gt;假设存在一个没有normalized（没有把数据映射到[0, 1]）的概率分布 \( \hat{P}(y) \)&lt;/li&gt;
      &lt;li&gt;再假设这个概率分布取对数之后是和y和z成线性关系：\( log \hat{P}(y) = yz \)&lt;/li&gt;
      &lt;li&gt;分别取e，消除ln：\( \hat{P}(y) = exp(yz) \)&lt;/li&gt;
      &lt;li&gt;重新normalize，把这个概率变成一个恰当的概率分布：\( P(y) = \frac{exp(yz)}{\sum_{y’ = 0}^{1} exp(y’z)} \)&lt;/li&gt;
      &lt;li&gt;观察发现这不就是先linear output再取sigmoid嘛！&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The z variable deﬁning such a distribution over binary variables is called a logit&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_19-28-01.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;最后是一个softplus function，softplus function的定义如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
f(x) = ln(1 + e^{x})
\end{aligned}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;这个的好处是在训练的时候，只有当(1-2y)z非常负-&amp;gt;也就是点那个y = 1然后z非常正，也就是正确答案的时候，此训练才会饱和&lt;/li&gt;
  &lt;li&gt;那如果是一个很错误的预测呢？-&amp;gt; The derivative with respect tozasymptotes tosign(z), so, in the limit of extremelyincorrectz, the softplus function does not shrink the gradient at all. This propertyis useful because it means that gradient-based learning can act to quickly correcta mistaken z.&lt;/li&gt;
  &lt;li&gt;还是那句话，因为有sigmoid的存在，函数有时候太容易饱和了，所以两边取个对数就舒服很多&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;softmax-units-for-multinouli-output-distributions&quot;&gt;Softmax Units for Multinouli Output Distributions&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;以下定义的就是一个softmax的函数，这个函数的意义在于：可以帮助我们表示n个离散变量的概率分布&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;s(x_{i}) = \frac{e^{x_{i}}}{sum_{j = 1}^{n} e^{x_{j}}}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Softmax functions are most often used as the output of a classiﬁer, to representthe probability distribution overndiﬀerent classes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;和上面sigmoid的推导很像：
    &lt;ul&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;令\( \hat{y} = P(y = i&lt;/td&gt;
              &lt;td&gt;x) \)，并且令这个概率是一个严格的概率分布&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;那么现在模型的目的就是求得这个hat y&lt;/li&gt;
      &lt;li&gt;令linear output: \( z = W^{T} h + b \)&lt;/li&gt;
      &lt;li&gt;和之前一样同取对数再normalize，oh~又发现了这特么就是softmax函数的定义：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;softmax(z)_{i} = \frac{exp(z_i)}{\sum_{j} exp(z_{j})}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后再套一层log在softmax外面(log-likelihood原则的代价函数)，得到logsoftmax，这个的意义也是令这个有很多个exp term的东西不那么快饱和&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}
      logsoftmax(z)_{i} = z_i - log \sum_{j} exp(z_j)
  \end{aligned}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;看这样子的代价函数就非常的好，前面第一个term会令求梯度时不会太快饱和，从而让模型可以一直进行自我调整&lt;/li&gt;
  &lt;li&gt;第二的term的意义在于，如果现在预测出来的zj是对的，那么他就应该拥有很大的值，那么那个sum会大概等于zj，那么zi和zj因为很接近（zj是正确的），这个loss就会比较小；反之，这个loss就会返回一个比较大的loss的值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-26_18-41-31.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;总的来说，非正则化的极大似然将驱动模型学习驱动softmax的参数，以预测在训练集中观察到的每个结果的计数的分数&lt;/li&gt;
  &lt;li&gt;总算来了！！从神经科学的角度来解释：softmax激起不同的神经元的竞争，因为概率总值为1，某个神经元的输出的提高, 必定意味着另一个神经元的输出变低&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;6224-other-output-types&quot;&gt;6.2.2.4 Other Output Types&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;总结一下，如果我们的条件概率分布是p的话，利用最大似然原则去-logp就可以知道他的代价函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;我们可以这么去理解神经网络：&lt;u&gt;神经网络输出的并不直接是预测的y值，而是y来自的概率分布的参数w，所以代价函数如上定义&lt;/u&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;that gradient-based optimization of conditional Gaussianmixtures (on the output of neural networks) can be unreliable, in part because onegets divisions (by the variance) which can be numerically unstable (when somevariance gets to be small for a particular example, yielding very large gradients)对混合条件高斯基于梯度的优化可能是不可靠的，因为涉及到除法的式子（当某个方差对于特定的样本变得非常小的时候，会导致非常大的梯度）-&amp;gt; Clip gradient/scale the gradients heuristically&lt;/li&gt;
  &lt;li&gt;差不多懂了，高斯混合输出是一个可以用来表示在总体分布下含有k个子分布的概率模型，高斯混合模型下有k个单高斯模型组合而成的模型，比如要预测一个东西是不是狗，这个狗的数据集的样本有体型，颜色，长相等，他们混在了一起但都属于这个狗的数据，所以对于不同的样本（颜色，体型或者长相），高斯混合模型习得一个高斯分布的参数，最后预测概率的时候把这些分别的子分布拢起来&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;63-hidden-units&quot;&gt;6.3 Hidden Units&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;现在我们转向一个前馈神经网络独有的问题：该如何选择隐藏单元的类型，这些隐藏单元用在模型的隐藏层中。&lt;/li&gt;
  &lt;li&gt;一般使用的隐藏单元是线性整流函数\( f(x) = max(0, x) \)，这个函数的问题是他在x = 0的时候不可微，这不是基本宣告了基于梯度的学习算法无效？不过事实上，&lt;strong&gt;神经网络算法通常无法达到代价函数的局部最小值&lt;/strong&gt;，根本就到不了0，所以也不用x=0&lt;/li&gt;
  &lt;li&gt;并且：即使导数没产生：神经网络训练的软件实现通常返回左导数或右导数的其中一个，而不是报告导数未定义或产生一个错误。当一个函数被要求计算x=0的情况时，输入的x可能是一个&lt;strong&gt;被舍入为0&lt;/strong&gt;的极小的值&lt;/li&gt;
  &lt;li&gt;most hidden units can be described as acceptinga vector of inputsx, computing an aﬃne transformation z=Wx+b, andthen applying an element-wise nonlinear functiong(z)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;631-rectified-linear-units-and-their-generalization整流线性单元及其拓展&quot;&gt;6.3.1 Rectified Linear Units and Their Generalization整流线性单元及其拓展&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;就是上面描述的整流线性单元：\( g(z) = max(0, z) \)&lt;/li&gt;
  &lt;li&gt;好处就是，整流线性单元在其一般的定义域输出为0，这使得只要整流线性单元属于激活状态，他的梯度都能保持较大且一致：在一阶导数上处处为1&lt;/li&gt;
  &lt;li&gt;作用在一个仿射变化上：\( h = g(W^{T}x + b) \), 所以如果一开始就把b定义成0.1的话，可能从训练的一开始整流线性单元就对大多数的输入都呈现激活状态-&amp;gt;允许导数通过&lt;/li&gt;
  &lt;li&gt;Generalization of ReLu（对于普通整流函数的拓展，解决梯度方法对于激活为零的样本无用的问题）&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;( h_{i} = g(z, \alpha)_{i} = max(0, z_i) + \alpha_{i} min(0, z_{i})&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在z&amp;lt;0时，其中alpha是非负斜率&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Absolute value rectification：固定 αi = −1 来得到 g(z) = |z|，它的意义：用于图像中的对象识别 (Jarrett et al., 2009a)，其中寻找在输入照明极性反转下不变的特征是有意义的。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Leaky ReLU：ﬁxes αi to a small value like 0.01&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Parametric ReLU/PReLU：treats αi as a learnable parameter&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;maxout unit&lt;/strong&gt;：把z划分为每组具有k个值的组，每个maxout单元输出每组中的最大元素：&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;g(z)_{i} = max_{j\in G^{(i)}} z_{j}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;学习对输入 x 空间中多个方向响应的分段线性函数。&lt;/li&gt;
  &lt;li&gt;特别地，具有两块的 maxout 层可以学习实现和传统层相同的输入 x 的函数，这些传统层可以使用整流线性激活函数、绝对值整流、渗漏整流线性单元 或参数化整流线性单元，或者可以学习实现与这些都不同的函数&lt;/li&gt;
  &lt;li&gt;maxout也需要嵌套权重&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;catastrophic forgetting&lt;/strong&gt;：neural networks forget how to perform tasks that they were trained on in the past&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;632-logistic-sigmoid-and-hyperbolic&quot;&gt;6.3.2 Logistic Sigmoid and Hyperbolic&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;在神经网络引入之前一般使用sigmoid函数\( g(z) = \sigma (z) \)或者是双曲正切函数（Hyperbolic Tangent）：\( g(z) = tanh(z) = \frac{cosh(z)}{sinh(z)} = 2\sigma(2z) - 1 \)&lt;/li&gt;
  &lt;li&gt;使用这个的问题是：sigmoid作为单元太容易饱和，只有当z非常接近于0时，才会输出敏感的梯度&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;633-其他隐藏单元&quot;&gt;6.3.3 其他隐藏单元&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;很多种类的可微函数都表现的很好。神他妈cos()的误差率小于1%&lt;/li&gt;
  &lt;li&gt;单位函数作为激活函数（纯线性变换）：这是以将线性变换约束为低秩的代价来实现的，但这些低秩关系往往是足够的。线性隐藏单元因此提供了一种减少网络中参数数量的有效方法。&lt;/li&gt;
  &lt;li&gt;其他的隐藏单元：
    &lt;ul&gt;
      &lt;li&gt;Radial Basis Function（RBF）：径向基函数，以x距离模版w的距离作为input，离得越近，越活跃&lt;/li&gt;
      &lt;li&gt;softmax&lt;/li&gt;
      &lt;li&gt;softplus：\( g(a) = log(1 + e^{a}) \)&lt;/li&gt;
      &lt;li&gt;hard tanh硬双曲正切函数：\( g(a) = max(-1, min(1, a)) \)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;64-architecture-design&quot;&gt;6.4 Architecture Design&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Architecture值得是指网络的整体结构：它应该具有多少单元，以及这些单元应该如何连接。&lt;/li&gt;
  &lt;li&gt;就好像之前记的，神经网络被组织成层的单元组。&lt;strong&gt;每一层都是前一层的函数&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;设计主要指的是要计算各层的宽度和整体的深度，有的时候的神经网络不需要太多层，一层也不需要太宽，便可以达到目标，但是这也让他们更难优化&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;641-universal-approximation-properties-and-depth&quot;&gt;6.4.1 Universal Approximation Properties and Depth&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;使用线性模型，许多损失函数会导出凸优化问题-&amp;gt;那不就稳了！！！但问题是很多模型不是线性模型&lt;/li&gt;
  &lt;li&gt;Universal Approximation theorem（万能近似定理）：一个前馈神经网络如果具有线性输出层和至少一层具有任何一种 ‘‘挤压’’ 性质的激活函数（例如loistic sigmoid激活函数）的隐藏层，只要给予网络足够数量的隐藏单元，它可以以任意的精度来近似任何从一个有限维空间到另一个有限维空间的 Borel 可测函数。（留个坑好吧，想知道这东西是怎么证明的）&lt;/li&gt;
  &lt;li&gt;a feedforward network with a linear outputlayer and at least one hidden layer with any “squashing” activation function (suchas the logistic sigmoid activation function) can approximate any Borel measurablefunction from one ﬁnite-dimensional space to another with any desired nonzeroamount of error, provided that the network is given enough hidden units.&lt;/li&gt;
  &lt;li&gt;注意了，被逼近的函数必然是定义在有限闭区间的实值连续函数&lt;/li&gt;
  &lt;li&gt;这个定理代表：只要一个大的MLP，一定可以表示这个函数，但却无法保证训练算法能够学到这个函数&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;no free lunch theorem&lt;/strong&gt; shows that there is no universally superior machine learning algorithm. There is no universal procedure for examining a training set ofspeciﬁc examples and choosing a function that will generalize to points not in thetraining set&lt;/li&gt;
  &lt;li&gt;上面这个定理证明了只要单层神经网络足够的宽，就可以逼近任何闭区间的实值连续函数。但是这个宽度非常大（n的指数级），所以使用更&lt;em&gt;深&lt;/em&gt;但&lt;em&gt;窄&lt;/em&gt;的模型可以减少所需的单元数量，并且可以减少泛化误差&lt;/li&gt;
  &lt;li&gt;指出一些用深度整流网络表示的函数可能需要浅层网络（一个隐藏层）指数级的隐藏单元才能表示。&lt;/li&gt;
  &lt;li&gt;Choosing a deep model encodes a very general belief that the function wewant to learn should involve composition of several simpler functions.其实在选择深层模型的时候，我们就假定了我们想要学得的函数是基于一些简单函数的组合&lt;/li&gt;
  &lt;li&gt;根据经验，更深的模型似乎确实在广泛的任务中泛化得更好。很可惜的是却没有证明出来&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;652-other-architectural-consideration&quot;&gt;6.5.2 Other Architectural Consideration&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;虽然这里介绍的神经网络把层都以简单链式结构来描述，但并不往往是这样的。比如卷积，比如RNN，实际上，层与层之间也不用紧密相连，比如存在skip connection（These skip connections make it easier for the gradient to ﬂow fromoutput layers to layers nearer the input.）&lt;/li&gt;
  &lt;li&gt;还有一个考量的是层和层之间要连接的话会怎么连接，之前看到过的是矩阵W的线性变化：每个输入单元连接到各个输出单元，但也存在每个输入单元连接到输出单元的子集，&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;65-back-propagation-and-other-differentiation-algorithm&quot;&gt;6.5 Back-Propagation and Other Differentiation Algorithm&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;前向传播指的是从输入一层传向另一层，直到输出一个结果y。反向传播指的则是从输出层得到结果产生标量代价函数的结果，再把这个结果传回来，向后流动以便计算各层参数的调整梯度&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;关于反向传播的几个经常被误解的点：&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;首先，反向传播仅限于计算梯度，而根据梯度调整则是：随机梯度下降&lt;/li&gt;
      &lt;li&gt;反向传播不仅仅适用于MLP，它适用于计算任何函数的导数&lt;/li&gt;
      &lt;li&gt;梯度的表示：\( \nabla_{x}f(x, y) \)：这个代表的是函数f关于x的梯度，我们最常需要的是代价函数关于参数的梯度: \( \nabla_{\theta}J(\theta) \)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;651-computational-graphs&quot;&gt;6.5.1 Computational Graphs&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Inside the graph:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Node&lt;/strong&gt;: indicate a variable(maybe a scalar, vector, matrix, tensor, or even a variable of another type)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;“Operation”&lt;/strong&gt;: 就是一个或多个变量的简单函数，一个operation仅返还一个值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更具体的：If a variable y is computed by applying an operation to a variable x, thenwe draw a directed edge from x to y.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_12-19-35.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;652-chain-rule-of-calculus&quot;&gt;6.5.2 Chain Rule of Calculus&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;这个我真的很不想记笔记了，但是还是要记。。&lt;/li&gt;
  &lt;li&gt;如果\( y = g(x) \)和\( z = f(g(x)) = f(y) \)，那么：&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{dz}{dx} = \frac{dz}{dy} \times \frac{dy}{dx}&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_12-31-59.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;上面讲到的Jacobin矩阵（雅可比矩阵）：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_12-40-39.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;根据这本书自己的解释：张量值得就是超过二维的数组，一般地，一个数组中的元素分布在若干维坐标的规则网络中，我们称之为张量。张量A中坐标为(i, j, k)的元素记作\( A_{i, j, k} \)，在tensorflow中，张量tensor指的是N维数组&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.360doc.com/content/20/0113/21/32196507_886034162.shtml&quot;&gt;这篇博客解释的很清楚张量，矩阵和向量的区别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;所以比如一个\( 3 \times 1908 \times 1080 \)的矩阵便是一个张量，几何上面可以想像成一个立方体。反向传播算法完全可以应用于任意维度的张量，&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;653-recursively-applying-the-chain-rule-to-obtain-backprop&quot;&gt;6.5.3 Recursively Applying the Chain Rule to Obtain Backprop&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;设计这个算法的时候可以聪明点，因为要对应许多的i点来求梯度，但这些式子很多都是重复的，为了提高效率，下面用到了dp算法去提高效率&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_13-46-14.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_13-47-48.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;执行反向传播所需的计算量与G中的边的数量成比例&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;654-back-propagation-computation-in-fully-connected-mlp&quot;&gt;6.5.4 Back-Propagation Computation in Fully connected MLP&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;前向传播和代价函数的计算就不写了，这个东西没什么含量，下面包含的是反向传播以及计算图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_13-56-44.png&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;symbol-to-symbol-derivatives&quot;&gt;Symbol-to-Symbol Derivatives&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;Some approaches to bp take a computational graph and a set of numerical values describing the gradient at those input values. 这就是&lt;strong&gt;Symbol to number differentiation&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;说实话我是真的没有明白这个概念的意义，反正就是可以利用很多种方法来表示梯度的计算&lt;/li&gt;
  &lt;li&gt;还有是符号到符号的计算方法，主要有点是导数只是另外一张计算图&lt;/li&gt;
  &lt;li&gt;有两种不同的编码方式：
    &lt;ul&gt;
      &lt;li&gt;符号到数字：使用者只知道大概的网络结构，不知道具体的梯度是怎么计算的&lt;/li&gt;
      &lt;li&gt;符号到符号：具体的梯度计算也被符号表示了出来&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_20-22-04.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;656-general-back-propagation&quot;&gt;6.5.6 General Back-Propagation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在实际的计算图中为了最大化一般化，我们将节点对应的变量描述成一个张量（张量可以用任意维度，并且包含标量，向量和矩阵）&lt;/li&gt;
  &lt;li&gt;然后他这里定义了几个子程序，虽然我觉得这个定义应该都是因人而异的？
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;get_operation(V)&lt;/code&gt;: 返回计算V的操作&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;get_consumers(V, G)&lt;/code&gt;: 返回一组变量，计算G中V的字节点&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;get_inputs&lt;/code&gt;(V, G): 返回一组变量，计算G中V的父节点&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每个操作与bprop操作相关联，bprob操作可以计算雅各布向量积&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;op.bprop(inputs, X, G) = \sum_{i} (\nabla_{x} op.f(inputs)_{i})G_{i}&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;上面这个：这里，inputs 是提供给操作的一组输入，op.f 是操作实现的数学函数，X 是输入，我们想要计算关于它的梯度，G 是操作对于输出的梯度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;这个操作应该总是假装他的输入彼此不同：。例如，如果 mul 操作传递两个 x 来计算 x^(2)，op.bprop 方法应该仍然返回 x 作为对于两个输入的导数。反向传播算法后面会将这些变量加起来获得 2x，这是 x 上总的正确的导数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_21-08-06.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在计算复杂度的时候，我们把这个算法里面的每一个operation看作是最小的单位，也就是o(1)，其他的复杂度都是根据这个为基础的，其实这个有点作弊，因为这个不是根据底层硬件的执行的单独操作，但其实这个operation又是高度可变的-&amp;gt;比如两个多维矩阵相乘&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;657-example-back-propagation-for-mlp-training&quot;&gt;6.5.7 Example: Back-Propagation for MLP Training&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_21-23-05.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;观察上图，对于反向传播：有两种不同的路径从 J 后退到权重：一条通过交叉熵代价，另一条通过权重衰减代价。
    &lt;ul&gt;
      &lt;li&gt;权重衰减代价相对简单，它总是对 W(i) 上的梯度贡献 2λW(i)。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-27_21-28-24.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;而上面则介绍了反向传播从Jmle这一边应该如何传播到具体的节点&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如果只是对于mlp来说，计算的主要成本来源于矩阵乘法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;658-complications&quot;&gt;6.5.8 Complications&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;在这里定义的反向传播算法比实际使用的实现要简单&lt;/li&gt;
  &lt;li&gt;比如在现实生活中，往往需要处理返还多个张量的情况&lt;/li&gt;
  &lt;li&gt;也没有考虑反向传播的内存消耗，最普通的办法是分别计算张量中的每一个，然后在第二步对这些张量求和。但他有过高的存储瓶颈，可以通过保持一个缓冲期，并在计算时将每个值加到该缓冲器来避免该瓶颈&lt;/li&gt;
  &lt;li&gt;各种其他技术的特性使现实世界的微分更加复杂。这些技术性并不是不可逾越的，本章已经描述了计算微分所需的关键知识工具，但重要的是要知道还有许多的精妙之处存在。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;659-diﬀerentiation-outside-the-deep-learning-communit&quot;&gt;6.5.9 Diﬀerentiation outside the Deep Learning Communit&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Automatic Differentation(计算机领域的一种：自动微分)：领域关心如何以算法方式计算导数，在这里面描述的bp只不过是一种自动微分的方法（reverse mode accumulation）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;惊讶！&lt;strong&gt;Finding the optimal sequence of operations to compute the gradient is NP-complete&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;这个问题还是个现存的很困难的问题，因为对于一些明显的表达式，人类数学家可以马上通过经验察觉出他的简单的微分形式，但bp算法无法使用这种方式来简化梯度，而是会通过原始的计算显式的传播梯度&lt;/li&gt;
  &lt;li&gt;The overall computation isthereforeO(# edges). （for bp）&lt;/li&gt;
  &lt;li&gt;诸如 Theano 和 TensorFlow 的实现使用基于匹配已知简化模式的试探法，以便重复地尝试去简化图。（用到了heuristic）&lt;/li&gt;
  &lt;li&gt;当图的输出数目大于输入的数目时，有时更偏向于使用另外一种形式的自动微分，称为 前向模式累加（forward mode accumulation）。前向模式计算已经被提出用于循环神经网络梯度的实时计算&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;6510-higher-order-derivatives&quot;&gt;6.5.10 Higher-Order Derivatives&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;一些软件框架支持使用高阶导数.&lt;/li&gt;
  &lt;li&gt;In mathematics, the &lt;strong&gt;Hessian matrix&lt;/strong&gt; or Hessian is a square matrix of second-order partial derivatives of a scalar-valued function, or scalar field.&lt;/li&gt;
  &lt;li&gt;一般我们对hessian矩阵的性质比较感兴趣，但有时候hessian矩阵的大小很容易达到数十亿&lt;/li&gt;
  &lt;li&gt;虽然计算 Hessian 通常是不可取的，但是可以使用 Hessian 向量积。可以对所有的 i = 1, . . . , n 简单地计算 He(i)，其中 e(i) 是 e(i)i = 1 并其他元素都为 0的one-hot向量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;66-historical-notes&quot;&gt;6.6 Historical Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;前馈网络可以被视为一种高效的非线性函数近似器，它以使用梯度下降来最小化函数近似误差为基础。&lt;/li&gt;
  &lt;li&gt;神经网络这个行业已经整整快三十年没有什么显然的进步了&lt;/li&gt;
  &lt;li&gt;之前整流线性函数并没有流行的原因由于有些迷信的观念，认为必须避免具有不可导点的激活函数&lt;/li&gt;
  &lt;li&gt;从生物学考虑整流线性单元的导出。半整流非线性旨在描述生物神经元的这些性质：(1) 对于某些输入，生物神经元是完全不活跃的。(2) 对于某些输入，生物神经元的输出和它的输入成比例。(3) 大多数时间，生物神经元是在它们不活跃的状态下进行操作（即它们应该具有 稀疏激活（sparse activation））。&lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2020-05-24T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/dnn</link>
          <guid isPermaLink="true">http://localhost:4000/dnn</guid>
        </item>
      
    
      
        <item>
          <title>Java On Call 7</title>
          <description>&lt;ol&gt;
  &lt;li&gt;Java基础知识&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;常用API&lt;/li&gt;
  &lt;li&gt;集合I/O&lt;/li&gt;
  &lt;li&gt;多线程、网络编程、反射、设计模式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是准备java面试的第二天，以上的分类的思维导图，来自-&amp;gt;&lt;a href=&quot;https://www.cnblogs.com/java1024/p/8757952.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;这里是整理好的面试题，至少都过一遍:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86686492&quot;&gt;2019年最新java面试题及答案整理上&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86699263&quot;&gt;2019年最新java面试题及答案整理下&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes-of-this-video&quot;&gt;Notes of this video&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/g2b-NbR48Jo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;spring-mvc&quot;&gt;Spring MVC&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring MVC是个基于MVC架构的用来简化web应用程序开发的应用开发框架
    &lt;ul&gt;
      &lt;li&gt;Easy to work with&lt;/li&gt;
      &lt;li&gt;Easy to learn&lt;/li&gt;
      &lt;li&gt;Flexible&lt;/li&gt;
      &lt;li&gt;Seperation of Concern&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于普通的MVC，可能你有很多的controller，然后当一个用户请求被传输过来的时候，有一个web.xml文件来为不同的用户请求分配不同的controller，这样就很繁琐。用Spring MVC的话，所有的用户请求都会先传输到一个FrontController叫做DispatcherServlet，然后这个FrontController负责为不同的客户请求分配不同的controller。当然，DispatcherServlet会有个配置文件，根据配置文件去找到对应的controller。所谓的“找到controller”指的是对应的controller会把对应的model和view的名字返还给FrontController，然后FrontController去call对应的view，再用FrontController把这个view和数据返还给client。&lt;strong&gt;所以一切都是由DispatcherServlet来完成的，内部的细节各个部分都不知道全局&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;普通的MVC是通过web.xml，找到对应的controller，然后对应的controller把数据从数据库拉出来，然后把数据传输到view里面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/1510582750520510.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MVC(Model-view-controller)是软件工程中的一种软件架构模式，把软件系统分为三个基本部分（对应其名字）：模型，视图，控制器
    &lt;ul&gt;
      &lt;li&gt;模型：程序员编写程序应有的功能（实现算法等）、数据库专家进行数据管理和数据库设计&lt;/li&gt;
      &lt;li&gt;视图：界面设计人员进行图形界面设计&lt;/li&gt;
      &lt;li&gt;控制器：负责转发请求，对请求进行处理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;.jsp&lt;/code&gt;: Java Server Pages (JSP) is a server-side programming technology that enables the creation of dynamic, platform-independent method for building Web-based applications.
    &lt;ul&gt;
      &lt;li&gt;当我新建一个Maven web框架的时候，里面的.jsp文件就是以html格式来编写的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spring MVC&lt;/strong&gt;把一个请求找到一个controller&lt;/li&gt;
  &lt;li&gt;如果要用Spring MVC的话，需要在原来的web.xml中定义一个&lt;servlet&gt;&lt;/servlet&gt;，这里面用了springframework的web.servlet.DispatcherServlet，当然啦需要在Maven的dependency中加入这个包。并且要有另外一个xml文件作为这个DispatcherServlet的配置文件，这里面声明了对应的一个客户请求会怎么map到对应的controller（就是一个class）&lt;/li&gt;
  &lt;li&gt;比如可以在jsp文件中定义一个form，当submit之后他就会找到web.xml中的DispatcherServlet，再由这个servlet去找到对应的class&lt;/li&gt;
  &lt;li&gt;在这个对应的class，你得用@Controller去注释这个类，并且在类中要注明什么样的请求会找到这个controller，那么这些就是告诉你怎么把html文件/请求map到一个class文件中&lt;/li&gt;
  &lt;li&gt;这个class文件可以通过requests接收到用户输入的东西&lt;/li&gt;
  &lt;li&gt;然后通过ModelAndView对象去把在class后端文件中处理的数据传输到page里面&lt;/li&gt;
  &lt;li&gt;在page中可以用request来把这个东西给取得，或者是使用expression language：&lt;code&gt;Result is: ${result}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后可以令这个class文件return一个string，这个string里面声明了一个page的地址，那么Dispatcher就会接收到这个，就会把page给调处出来&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;但是其实controller是属于controller layer的，可以看到他负责和Dispatcher和page调动，而真正的一些后端的内容，应该声明另一个类来完成。这个后端类会被controller调用，去完成一些计算，或者是逻辑的工作。&lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>2020-05-18T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/java-on-call-7</link>
          <guid isPermaLink="true">http://localhost:4000/java-on-call-7</guid>
        </item>
      
    
      
        <item>
          <title>西瓜</title>
          <description>&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/TeFuirnever/article/details/96178919&quot;&gt;成品笔记&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;第一章绪论&quot;&gt;第一章：绪论&lt;/h2&gt;
&lt;h3 id=&quot;11-引言--12-基本术语&quot;&gt;1.1 引言 &amp;amp; 1.2 基本术语&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;机器学习致力于通过计算的手段，利用经验来改善系统自身的性能。机器学习所研究的主要内容，是关于在数据中产生模型。在面对新的情况时（情况不存在“经验”中），模型可以作出相应的判断。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;模型&lt;/strong&gt;：本书用这个词泛指从数据中学得的结果&lt;/li&gt;
  &lt;li&gt;数据集指的是存在许多数据的集合，例如有很多个西瓜的数据，每一个西瓜的数据，被称为示例/样本，而每个西瓜数据中的类目，例如色泽，根蒂等，被称为属性或者特征，属性上面具体的取值被称为属性值，属性张成的空间被称为属性空间/样本空间，例如西瓜数据中有三个属性，那么每个属性作为一个坐标轴，就有一个关于西瓜的三维空间，每个西瓜都可以在这个空间中对应一个坐标向量，因此示例也被称为特征向量&lt;/li&gt;
  &lt;li&gt;\( x_{ij}\)指的是\( x_i\)在第j个属性上面的取值&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;模型对应了关于数据的某种潜在的规律，因此也被称为假设，而这种实际真实存在的潜在规律则被称为真相&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;拥有了标记信息的示例，称为样例&lt;/li&gt;
  &lt;li&gt;监督学习
    &lt;ul&gt;
      &lt;li&gt;分类Classification：预测的是离散值，比如好瓜，坏瓜&lt;/li&gt;
      &lt;li&gt;回归Regression：若预测的是连续值，比如西瓜成熟度0.95，那么此时的输出空间就是全体实数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;无监督学习
    &lt;ul&gt;
      &lt;li&gt;聚类Clustering：没有标记的情况下，将训练集中的西瓜分成若干个簇。这些簇对应着某些概念划分&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;泛化generalization的能力是模型适应位置样本的能力。所以虽然训练集只是样本空间的一个很小的采样，依然希望它能够反应样本空间的特性。&lt;/li&gt;
  &lt;li&gt;独立同分布（iid，independently identically distribution） 在概率统计理论中，指随机过程中，任何时刻的取值都为随机变量，如果这些随机变量服从同一分布，并且互相独立，那么这些随机变量是独立同分布。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-假设空间&quot;&gt;1.3 假设空间&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;归纳induction：从特殊（具体的数据）到泛化（抽象的规律），从具体的实施归结出一般性规律&lt;/li&gt;
  &lt;li&gt;演绎deduction：从泛化（抽象的规律）到特殊（具体的数据），从基础原理推演出具体状况&lt;/li&gt;
  &lt;li&gt;归纳学习（Inductive Learning）：从样例中学习，狭义的归纳学习要求从训练数据中学得概念，因此已成为概念学习。但是&lt;em&gt;要学到泛化性能好且予以明确的概念实在太困难了&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;假设空间：我们可以把学习过程看作一个在所有假设（Hypothesis）组成的空间中进行搜索的过程，搜索目标是找到于训练集中的瓜的判断正确的假设。假设的表示一旦确定&lt;/li&gt;
  &lt;li&gt;指的是存在的所有可能的假设，一个假设的例子是：“（色泽 = ？）^ （根蒂 = ？） ^ （敲声 = ？）”，这个问号指的只是这是个还没确定的值。一个具体的假设的例子是：“（色泽 = * ） （根蒂 = *） ^ （敲声 = 沉闷）”，这个假设将会被解释成：只要敲声是沉闷的，那么不管色泽和根蒂是什么都可以&lt;/li&gt;
  &lt;li&gt;所谓的版本空间指的是“正确的假设的集合”，也就是说这里面的假设是可以把训练集里面的样本都正确分类。在找版本空间的时候，是把所有假设空间中，不符合训练集的假设（把类别分成负类）的假设给去除，然后保留符合训练集的假设（把类别分成正类），这么下来，剩下来的假设空间集合就属于版本空间：与训练集一致的假设集合&lt;/li&gt;
  &lt;li&gt;布尔概念学习：这整个例子就是352的concept learning，具体可以看那个的笔记
    &lt;ul&gt;
      &lt;li&gt;只要训练集中有正例，那么\( \Phi \)就不出现，这个表示这组样本空间中不存在正例&lt;/li&gt;
      &lt;li&gt;假设空间值得是所有“假设”组成的空间，每个假设都可以看作出对属性的一种取值组合，目标是从假设空间中找到一个能够泛化所有样本的假设&lt;/li&gt;
      &lt;li&gt;版本空间version space是只有训练集中的样本的集合，版本空间是假设空间的子集&lt;/li&gt;
      &lt;li&gt;这个的目标总归都是从假设空间/版本空间中找到最特殊的却能表示整体样本空间的假设&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;14-归纳偏好-inductive-bias&quot;&gt;1.4 归纳偏好 Inductive Bias&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;通过学习得到的模型对应了假设空间中的一个假设&lt;/li&gt;
  &lt;li&gt;机器学习算法在学习过程中对某种类型的假设的偏好，成为归纳偏好。“尽可能一般”的情况我们无法在这三者里用训练样本驱除身下的两个，但是我们的算法必须给出一个选择，这时候的对某种类型假设的偏好就叫做归纳偏好。例如在西瓜例子上面，我们更偏好于根蒂，那么在训练好的假设空间中，比如留下了三个假设，那么我们的模型会选择能够最大化根蒂作用的模型&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;任何一个有效的机器学习算法必有其归纳偏好，否则它将被假设空间中看似在训练集上等效的假设所迷惑，而无法产生确定的学习结果。归纳偏好可以看作学习算法自身在一个很庞大的假设空间中对假设进行选择的启发式或“价值观”&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;奥卡姆剃刀也是一种归纳偏好，比较常用比较基本的原则，那就是若有多个假设与观察一致，那么选用最简单的那个，但其实这个东西也不好整，因为对于不同的情形，也有不同的标准来判断简单这个标准&lt;/li&gt;
  &lt;li&gt;关于“训练集外误差的推导”：
    &lt;ul&gt;
      &lt;li&gt;对f的定义为任何能将样本映射到{0, 1}的函数+均匀分布&lt;/li&gt;
      &lt;li&gt;概率空间整体为1，所以\( \sum_{h}P(h)=1 \)&lt;/li&gt;
      &lt;li&gt;这个式子推导可以参见&lt;a href=&quot;https://ti.arc.nasa.gov/m/profile/dhw/papers/78.pdf&quot; target=&quot;_blank&quot;&gt;NFL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;这个定理被称为no free lunch theorem，它证明了：无论学习算法多聪明/多笨拙，评估他们的期望性能的算式都是一样&lt;/li&gt;
      &lt;li&gt;这个定理是不是说明了：既然学习算法的期望性能都跟随机生成差不多，那么是不是代表没啥好学的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/2019071619262619.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;因为是二元分类问题，所以每个样本能被分为{0, 1}两类，而f同时又是均匀分布的，所以全体的f会把全体样本的全体可能性都走一遍，这就用到了排列组合中的排列。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以二为底是因为这是二元分类问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接上面的问题，其实不是这样的，因为nfl假设了f的均匀分布，也就是说假设的均匀分布，但很多时候不是这样的，比如姓李的和姓马的都是好人，这个没问题，但是全国范围之内，姓马的和姓李的一样多吗，这是不存在的，他们不是均匀分布的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;所以这个nfl定理最重要的是他的寓意，也就是说脱离具体的问题，空泛的谈论“什么学习算法更好”毫无意义。&lt;/li&gt;
  &lt;li&gt;若考虑所有潜在的问题，那么所有学习算法都一样的好。我们必须要结合具体的问题，去谈论算法的相对优劣。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;15-发展历程和16应用现状&quot;&gt;1.5 发展历程和1.6应用现状&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;人工智能的发展历程：
    &lt;ul&gt;
      &lt;li&gt;推理期：人们认为只要能赋予机器逻辑推理能力，机器就具有智能&lt;/li&gt;
      &lt;li&gt;知识期：要使机器具有智能，必须设法使机器拥有知识&lt;/li&gt;
      &lt;li&gt;学习期：要让机器自己学习知识&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;机器学习的研究（归纳学习）：
    &lt;ul&gt;
      &lt;li&gt;符号主义学习：决策树、归纳逻辑程序设计（Inductive Logic Programming如prolog）
        &lt;ul&gt;
          &lt;li&gt;缺点是假设空间太大、复杂度极高&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;连接主义学习：神经网络，产生“黑箱模型”
        &lt;ul&gt;
          &lt;li&gt;缺点是缺乏理论基础，参数的设置也缺乏理论基础，都得手工调参&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;统计学习主义：支持向量机，核方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其中，连接主义因为缺乏理论基础所以没落了一阵，得益于数据的变多，计算能力的加强，二十一世纪初又卷土重来（深度学习），简化机器学习技术&lt;/li&gt;
  &lt;li&gt;统计学主要通过机器学习对数据挖掘发挥影响，而机器学习领域和数据库领域则是数据挖掘两大支撑（数据库提供管理技术，机器学习提供分析技术）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;课后习题&quot;&gt;课后习题&lt;/h3&gt;
&lt;p&gt;1.1 表1.1中若只包含编号为1和4的两个样例，试着给出相应的版本空间
&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-20_15-46-25.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;因为只剩下了1和4两个样例，这两个样例中的条目都不一样，所以可以从最具体的（青绿，蜷缩，浊响）开始，慢慢抽象起来（带*）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.2 使用最多包含k个合取式的折合范式来表达西瓜分类问题的假设空间，估算共有多少种可能的假设。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;刚刚使用的是单个合取式，单个合取式的数目是根据每个特征的取值多少来评估的，色泽取值2+1，根蒂取值3+1，敲声取值3+1，其中加上的1指的是*号，总共有\( 3*4*4 = 48 \)种可能。总共有48个单个合取式的假设，那么如果使用折合范式（包含k个合取式）那么就是组合问题（从48个单个合取式中能够取出多少种折合范式），可以看成是这个单个合取式的假设集合的全部子集数量：\( 2^{k} \)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.3 若数据包含噪声，则假设空间中有可能不存在与所有训练样本都一致的假设。在此情形下，试设计一种归纳偏好用于假设选择&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;根据这个题目，因为已知噪声存在，“则假设空间中有可能不存在与所有训练样本都一直的假设”，因为噪声的存在，所以整个情况就变得比较复杂。一般来说，应该使用误差函数评估出来的误差最低的假设，不过因为噪声客观存在，误差最低的假设还有可能会产生过拟合的情况&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;第二章-模型评估与选择&quot;&gt;第二章 模型评估与选择&lt;/h2&gt;
&lt;h3 id=&quot;21-经验误差与过拟合&quot;&gt;2.1 经验误差与过拟合&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;几个比较常见的terminology
    &lt;ul&gt;
      &lt;li&gt;在m个样本中有a个样本分类错误&lt;/li&gt;
      &lt;li&gt;错误率error rate: \( E=\frac{a}{m} \)&lt;/li&gt;
      &lt;li&gt;精度accuracy: \( 1 - \frac{a}{m} \)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;误差error：把学习器的实际预测输出与样本的真实输出之间的差异成为误差（error），其中
    &lt;ul&gt;
      &lt;li&gt;学习器在训练集上的误差称为训练误差（training error）/经验误差（empirical error）&lt;/li&gt;
      &lt;li&gt;学习器在新样本上的误差成为泛化误差（generalization error）&lt;/li&gt;
      &lt;li&gt;学习器在测试集上的误差成为测试误差&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;过拟合（overfitting）：当训练误差非常小的时候，并不代表这个模型就一定好，因为最终需要得到的模型是一个拥有好的泛化表现的模型。为了达到这个目的，应该从训练样本中尽可能学出适用于所有潜在样本的“普遍规律”。如果训练集能够完整表示整个样本空间那固然好，不过很多时候训练集无法做到这一点。那么这种情况下，如果一个学习器把训练集的数据学的太好了，有可能会把一些只存在于训练集上的样本的一些比较特殊的特征都给学进去了，比如10000个西瓜里面只有100个西瓜是白色的，但是正好这一百个白色的西瓜都在训练集中，如果算法认为“白色”因为在训练集中占有不小的比例，而把白色认为是西瓜的普遍特征，那么这个模型就&lt;strong&gt;过拟合了：把训练样本自身的特点当作了所有潜在样本都会具有的一般性质&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;欠拟合（underfitting）：指对训练样本的一般性质没学好，注意这里指的也是一般性质&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;过拟合与NP&lt;/strong&gt;：过拟合无法避免，因为：机器学习面临的问题通常是NP甚至是NPC，机器学习的算法必然是在多项式时间内P运行完成的，若可彻底避免过拟合，则通过经验误差最小化就能获取最优解，这就意味着\( P=NP \)。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/p-np.jpg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以只要相信\( P != NP \)，那么过拟合就无法避免&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;问题来了：不经过测试，无法获得泛化误差，或者说可能永远也无法知道完整的泛化误差是多少，然后训练误差又由于过拟合的存在并不绝对适合作为评估模型的标准，那么我们怎么评估模型呢？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-评估方法&quot;&gt;2.2 评估方法&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用测试集testing set：使用一个测试集来算出对测试集的测试误差，把测试误差当作泛化误差的近似。为了达到测试效果，测试集最好选择与训练集互斥的样本，测试样本最好不再训练集中出现，不过不管怎样，测试集也需要是独立同分布于同一个分布。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从一个m个样例的数据集\( D={ (x_1, y_1), (x_2, y_2),…, (x_m, y_m) } \)的数据集中把训练集S和测试集T给分出来：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;221-留出法&quot;&gt;2.2.1 留出法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;- 简单的将数据集D划分为两个互斥的集合，其中一个集合作为训练集S，另一个作为测试集T，用训练集训练模型，用测试集来近似估计泛化误差&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;同时也要注意的是保持&lt;strong&gt;数据分布的一致性&lt;/strong&gt;，例如在分类任务中至少要保持样本的类别比例相似。这个也被称为&lt;strong&gt;分层采样（stratified sampling）&lt;/strong&gt;。例如D中含有1000个样本（500个是正例，500个是负例），那么他分出来的训练集（700个样本）中也得有350个正例；测试集（300个样本）中也得有150个正例，他们的样本中的类别所占的比例应该保持一致&lt;/li&gt;
  &lt;li&gt;但是只用留出法并不足够，不同的划分（比如可以把前十个正例放在训练集，也可以把前十个正例放在测试集中），这样不同的划分也会带来结果上的差别，所以一般要使用若干次随机划分、重复进行实验评估后取平均值作为留出法的评估结果。&lt;/li&gt;
  &lt;li&gt;留出法的弊端：
    &lt;ul&gt;
      &lt;li&gt;因为希望评估的是用D训练出的模型的性能，但是留出法需要划分训练/测试集，也就是说是不可能把整个数据集都当作训练集的了，那么选择多少数量的训练集/测试集就成了个问题：
        &lt;ul&gt;
          &lt;li&gt;当训练集较大，测试集较小：测试集较小，所以评估结果的方差较大，不够稳定&lt;/li&gt;
          &lt;li&gt;当训练集较小，测试集较大：训练集较小，训练集与原数据集D会有更大的差别，那么他的评估结果的偏差较大&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;222-交叉验证法k-fold-cross-validation&quot;&gt;2.2.2 交叉验证法(K-fold cross validation)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;把数据集D划分为k个大小相似（注意是相似）的互斥子集，即 \( D=D_{1} \cup D_{2} \cup … \cup D_{k}, D_{i} \cap D_{j} = null(i \neq j)\ \)&lt;/li&gt;
  &lt;li&gt;并且每个子集D_i都采用分层采样，保持数据的一致性&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如何评估？&lt;/strong&gt;每次都进行k词训练和测试，分别每一次都有k-1个子集的并集作为训练集，剩下的那一个作为测试集，返还的时候返还的是k组饰演的均值&lt;/li&gt;
  &lt;li&gt;所以他的表现很大程度上取决于k，交叉验证法常常被称为“k折交叉验证”，如果是10折交叉验证，说明这个验证法取的k是十，有十个子集&lt;/li&gt;
  &lt;li&gt;和留出法一样，为了避免只用单一划分而造成的误差，交叉验证发也会在划分k子集的时候采用多种划分方式，&lt;strong&gt;k折交叉验证通常要使用随机不同的划分重复p次，最终的结果也是这p次k折交叉验证的均值&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;留一法&lt;/strong&gt;（leave one out）：设数据集中有m个样本，留一法是令k=m，每次只留下一个样本作为训练集，这个的弊端当然是整体的效率会非常的低，不管好处是留一法中训练出来的模型与期望评估的用D训练出的模型很相似-&amp;gt;结果比较准确&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;223-自助法-bootstrapping&quot;&gt;2.2.3 自助法 bootstrapping&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;以自助采样法为基础：给定包含m个样本的数据集D，对D进行采样产生数据集D’：每次随机从D中挑选一个样本，将其拷贝放入D’，但是把这个样本放回初始数据集D中，这样的画在下一次挑选/采样的时候也有可能采到这个样本，和这个过程重复m次，就得到了m个样本的数据集D’&lt;/li&gt;
  &lt;li&gt;样本可能在D‘中重复出现，也有可能在D‘中永远也不出现，永远也不出现的概率是：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$$&lt;/p&gt;

&lt;p&gt;\begin{aligned}&lt;/p&gt;

&lt;p&gt;\lim_{m\to\infty} (1-\frac{1}{m})^m = \frac{1}{e} \approx 0.368&lt;/p&gt;

&lt;p&gt;\end{aligned}&lt;/p&gt;

&lt;p&gt;$$&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可见这个概率还是挺高的。。。也就是说有大概37%的样本未出现在采样数据集D‘中&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;那么就可以把D‘用作训练集，D-D’用作测试集&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;这么做的好处是：现在实际训练集和数据集的样本数量一样，并且还有大概37%的不再训练集中出现的测试集，这样的测试结果被称为&lt;strong&gt;包外估计&lt;/strong&gt;，可以从初始数据集中产生多个不同的训练集，坏处是因为是随机采样，他无法保证数据的一致性&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;224-调参与最终模型&quot;&gt;2.2.4 调参与最终模型&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Parameter Tuning就是调参&lt;/li&gt;
  &lt;li&gt;因为很多参数的范围都是整体实数，所以调参实际上要花费大量的时间，科学的调参需要在参数的列表中一个个去尝试比对参数的结果&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;整个训练和测试的流程给结果的流程是划分数据集训练集和测试集--训练数据集---评估数据集---调参---重新训练或确定参数---给整个数据集d上面把参数确定好的模型重新训练---提交用户&quot;&gt;整个训练和测试的流程：给结果的流程是划分数据集（训练集和测试集）-&amp;gt; 训练数据集 -&amp;gt; 评估数据集 -&amp;gt; 调参 -&amp;gt; 重新训练或确定参数 -&amp;gt; 给整个数据集D上面把参数确定好的模型重新训练 -&amp;gt; 提交用户&lt;/h5&gt;

&lt;h4 id=&quot;23-性能度量performance-measure&quot;&gt;2.3 性能度量（Performance measure）&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;给定\( D={ (x_1, y_1), (x_2, y_2),…, (x_m, y_m) } \)的数据集，要评估这个学习器的性能，就要把学习期预测结果\( f(x) \)与真是标记\( y\)做比较，一般用的是下面的mean squared error，均方误差&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{aligned}

E(f;D) = \frac{1}{m} \sum_{i=1}^{m}(f(x_i)-y_{i})^2

\end{aligned}&lt;/script&gt;
</description>
          <pubDate>2020-05-17T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/%E8%A5%BF%E7%93%9C</link>
          <guid isPermaLink="true">http://localhost:4000/%E8%A5%BF%E7%93%9C</guid>
        </item>
      
    
      
        <item>
          <title>Java On Call 6</title>
          <description>&lt;ol&gt;
  &lt;li&gt;Java基础知识&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;常用API&lt;/li&gt;
  &lt;li&gt;集合I/O&lt;/li&gt;
  &lt;li&gt;多线程、网络编程、反射、设计模式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是准备java面试的第二天，以上的分类的思维导图，来自-&amp;gt;&lt;a href=&quot;https://www.cnblogs.com/java1024/p/8757952.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;这里是整理好的面试题，至少都过一遍:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86686492&quot;&gt;2019年最新java面试题及答案整理上&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86699263&quot;&gt;2019年最新java面试题及答案整理下&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes-of-this-video&quot;&gt;Notes of this video&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/If1Lw4pLLEo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dependenct Injection&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Object depends on other objects.(Dependency)&lt;/li&gt;
      &lt;li&gt;Coupling（耦合性）：我们追求的是对象间的低耦合性，但是只要我们在一个对象中说new的时候，这个耦合性就会变高了，那为什么高耦合性会不好呢？
        &lt;ul&gt;
          &lt;li&gt;Coupling的标准定义是：Degree of direct knowledge that one element has of each other.&lt;/li&gt;
          &lt;li&gt;Tight Coupling:  In general, Tight coupling means the two classes often change together. In other words, if A knows more than it should about the way in which B was implemented, then A and B are tightly coupled.&lt;/li&gt;
          &lt;li&gt;为什么高耦合性的程序设计不好？In general, Tight Coupling is bad in but most of the time, because it reduces flexibility and re-usability of code, it makes changes much more difficult, it impedes test ability etc.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;所以我们不用自己在对象中实例化他的依赖对象，而是通过一个外部的服务，外部的服务帮助注入这个依赖的对象， 这就是依赖注入。&lt;/li&gt;
      &lt;li&gt;因为在对象中我们写代码的时候不需要实例化对象，所以要让容器知道你要注入什么对象，就需要配置，配置在java Spring框架中有的是用XML来配置的。或者是用Spring Boot，用关键字来声明配置&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;dependingObj&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dependingObjParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//..&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//..&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Laptop&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dependingObj&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;以上使用了component这个关键字后，这个dependingObj就是一个我们需要注入的对象&lt;/li&gt;
      &lt;li&gt;使用了autowired之后，框架就会帮助注入你的对象&lt;/li&gt;
      &lt;li&gt;依赖注入的原因：除了希望设计出松耦合的程序，还有个原因就是在做测试的时候，如果没有依赖注入的话，我们在测试一个对象的时候，同时需要测试他依赖的对象；但是更合理的难道不是依赖的对象测试成功之后，就不需要在测试别的对象的时候重复测试了嘛？有个例子是如果一个对象依赖于一个跟数据库相关的对象，那么难道当我们在测试这个对象的时候，要不停的manipulate这个数据库嘛？如果用松耦合的程序的话就可以用mock class去避免重复测试&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Maven and 如何用Spring来做依赖注入&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Maven是一个项目构建和管理工具，为开发人员提供了一个项目构建（build）的生命周期框架。&lt;/li&gt;
      &lt;li&gt;就是当我们在写一个项目的时候，需要用到很多的库，假设你全都把库手动下载到电脑上，是可以的，但是，如果需要更新的时候就裂了。所以Maven这个工具就是，通过声明在Maven中的project中的&lt;code&gt;pom.xml&lt;/code&gt;中的需要哪个库，Maven会帮你把这些库给拉进来，像这样声明&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//mvnrepository.com/artifact/org.springframework/spring-web --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artifactId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;Maven有一个本地仓，也有一个网络上的仓库，当Maven看到了你需要的dependency之后，Maven会首先搜索本地仓，看看本地仓有没有这个库，如果有的话就直接使用；如果没有的话就会去网络的仓库下载到本地仓中。&lt;/li&gt;
      &lt;li&gt;Maven里面的Archetype可以被看作是一类项目的基本框架&lt;/li&gt;
      &lt;li&gt;GroupID是package name，ArtifactID是项目的名字&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;getBean();&lt;/code&gt;是定义在BeanFactory/ApplicationContext接口的方法，这两个接口都是springFramework中，区别是ApplicationContext中有BeanFactory更多的东西，这两个都是IoC容器且BeanFactory是最基础的IoC&lt;/li&gt;
      &lt;li&gt;注入的流程是首先你得有一个xml文件，这个文件里面定义了你的bean，这个bean声明了要注入的是什么类，像下面这样&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vehicle&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;taoma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TestMaven2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;然后在你的对象里面，比如你的对象是依赖于上面这个对象的，那么你就得在声明这个对象的时候使用以下的语句&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;spring.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    	 
  &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vehicle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;而不再是使用new了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;依赖注入在java中有三种实现方式，其中一种就是像上面说的用xml去配置，还有种办法是用&lt;strong&gt;Annotation based configurations&lt;/strong&gt;，这种方式就是@Component这样的&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.taoma.TestMaven2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am TaoMa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;那么此时相应的在xml文件中就应该加上这一行并且把刚刚定义的bean给删除来告诉框架现在使用这种方法来声明&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;context:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;com.taoma.TestMaven2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;context:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Spring变量注入&lt;/strong&gt;: 像下面这例子，如果Car是一个你要注入的对象，这个对象的声明中含有变量，但是因为是用容器注入，整体的设计思路是松耦合，那么声明一个变量相当于“这个对象是基于这个变量和存在了”，这又把耦合度给提高了，所以容器不会怎么搞这个变量。需要在xml文件中注入这个变量&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.taoma.TestMaven2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nc&quot;&gt;Private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;I am TaoMa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注入这个变量，并且可以定义这个值，这就是这个bean的参数（property），使用这个property且定义他的参数就像是用setter一样&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vehicle&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;taoma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TestMaven2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;
		&amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; value=&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tao&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;当然我们也可以在需要有变量的地方定义一个constructor，然后在xml中就不使用property而是使用以下的语句，这样子的方式叫做Constructor Injection&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vehicle&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;taoma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TestMaven2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;
		&amp;lt;constructor-arg value=&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tao&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;我们编写spring框架的代码的时候，一直遵循着这样的原则：所有在Spring中注入的bean都建议定义成私有的域变量。并且要配套写上get和set方法。以下的例子就是用这种原则编写的代码，其中Car和Office是我们要注入Boss的对象&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Office&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
  
    &lt;span class=&quot;c1&quot;&gt;// 省略 get/setter   &lt;/span&gt;
  
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;car:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;office:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   

&lt;span class=&quot;c1&quot;&gt;//-------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;  
    &lt;span class=&quot;nl&quot;&gt;xmlns:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xsi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;  
    &lt;span class=&quot;nl&quot;&gt;xsi:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemaLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans    
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boss&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Boss&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; ref=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; ref=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; /&amp;gt;   
    &amp;lt;/bean&amp;gt;   
    &amp;lt;bean id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Office&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;officeNo&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; value=&quot;&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&amp;gt;   
    &amp;lt;/bean&amp;gt;   
    &amp;lt;bean id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; scope=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; value=&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;红旗&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CA72&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; value=&quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Autowired Annotation&lt;/strong&gt;：也就是最开始举的例子，使用@Autowired去修饰依赖对象。Autowire注释可以对类成员变量、方法及构造函数进行标注，完成自动装备的工作。Autowire之后，他的代码会变化成以下这样&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
  
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Office&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
  
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;  
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;car:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;office:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   

&lt;span class=&quot;c1&quot;&gt;//-------------------------------------------------&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;  
    &lt;span class=&quot;nl&quot;&gt;xmlns:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xsi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;  
    &lt;span class=&quot;nl&quot;&gt;xsi:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schemaLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans    
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;boss&quot;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Boss&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;lt;/bean&amp;gt;   
    &amp;lt;bean id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;office&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Office&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;officeNo&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; value=&quot;&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;002&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&amp;gt;   
    &amp;lt;/bean&amp;gt;   
    &amp;lt;bean id=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;baobaotao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; scope=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; value=&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;红旗&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CA72&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&amp;gt;   
        &amp;lt;property name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; value=&quot;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;把getter和setter可以去掉，并且加上注释。这样，当 Spring 容器启动时，AutowiredAnnotationBeanPostProcessor 将扫描 Spring 容器中所有 Bean，当发现 Bean 中拥有 @Autowired 注释时就找到和其匹配（默认按类型匹配）的 Bean，并注入到对应的地方中去。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Annotation Configuration&lt;/strong&gt;：就是说之前是从xml文件里面找Bean，不过现在可以定义一个class文件，这个类里面有取的对象的方法，像下面这个一样&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.taoma.TestMaven2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.Bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.annotation.configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Samsung&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPhone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Samsung&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//-----------------------------&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AppCongig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    	 
&lt;span class=&quot;nc&quot;&gt;Samsung&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Samsung&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Samsung&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以这样定义就方便很多了，在配置类写bean，用@Configuration来声明配置类，用@Bean来声明bean的方法，像上面那样&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;然后其实只要被Component修饰了的东西，且在配置类中用@ComponentScan注释，那么这个配置类就相当于自动生成了所有被Component修饰的类的bean，就连上面的&lt;code&gt;getPhone()&lt;/code&gt;这种东西都不用写&lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>2020-05-17T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/java-on-call-6</link>
          <guid isPermaLink="true">http://localhost:4000/java-on-call-6</guid>
        </item>
      
    
      
        <item>
          <title>Java On Call 5</title>
          <description>&lt;ol&gt;
  &lt;li&gt;Java基础知识&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;常用API&lt;/li&gt;
  &lt;li&gt;集合I/O&lt;/li&gt;
  &lt;li&gt;多线程、网络编程、反射、设计模式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是准备java面试的第二天，以上的分类的思维导图，来自-&amp;gt;&lt;a href=&quot;https://www.cnblogs.com/java1024/p/8757952.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;这里是整理好的面试题，至少都过一遍:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86686492&quot;&gt;2019年最新java面试题及答案整理上&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86699263&quot;&gt;2019年最新java面试题及答案整理下&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;spring框架&quot;&gt;Spring框架&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Spring是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许你选择使用哪一个组件，同时为J2EE应用程序开发提供集成的框架&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/wa-spring1/index.html&quot;&gt;Spring框架&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/spring_framework.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;以上是spring框架的七个模块，这七个模块分别都可以单独使用，但同时又都可以结合起来使用
    &lt;ul&gt;
      &lt;li&gt;Spring Core：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。&lt;/li&gt;
      &lt;li&gt;Spring上下文：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。&lt;/li&gt;
      &lt;li&gt;Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。&lt;/li&gt;
      &lt;li&gt;Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。&lt;/li&gt;
      &lt;li&gt;Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。&lt;/li&gt;
      &lt;li&gt;Spring Web：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。&lt;/li&gt;
      &lt;li&gt;Spring MVC：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;说实话第一遍看什么都没看懂&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;javabean&quot;&gt;JavaBean&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;看了很久也没看出JavaBean到底是什么，直到看到一个回答：&lt;/p&gt;

    &lt;p&gt;JavaBean只是一个标准，这个标准下规定了：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - 所有属性私有，所有属性要用getter/setter去设置/取值
  - 公共的无参数构造函数: &amp;lt;code&amp;gt;class()&amp;lt;/code&amp;gt;
  - 实现&amp;lt;code&amp;gt;Serializable&amp;lt;/code&amp;gt;   如果一个类遵循标准的话，那他就是JavaBean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于JavaBean和Spring：Java于1996年通统一的规范可以设置对象的值（JavaBean），这样子可以保证程序有个恒久的方法，并且向后兼容性。但是在实际的企业开发中，需要实现事务，安全，分布式：JavaBean就不好用了，于是sun就在JavaBean上面堆功能，就把JavaBean变成了EJB。EJB功能强大了，但是也更繁杂了，玉树出现了DI（依赖注入）和AOP（面向切面）技术，通过简单的JavaBean也可以完成EJB的事情，这里的JavaBean简化为POJO，再然后Spring就诞生了&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;diioc&quot;&gt;DI、IOC&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;IOC = Inversion of Control&lt;/li&gt;
  &lt;li&gt;比如传统的，如果一个对象是依赖于另一个对象的，那么我们是直接在对象内部实例化对象，手动的。而IOC是有一个专门的容器去创建这些对象，也就是有IOC容器来控制对象的创建；&lt;strong&gt;IOC容器控制了对象，主要控制了外部资源获取&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入注释对象，有容器帮我们查找及注入注释对象，对象只是被动的接受依赖对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传统的程序设计&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/v2-468af44ef31c1e4b6a27985afb8cb8c9_1440w.jpg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加入了IOC的程序设计&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/v2-b3d253afdaf44b0179f93701eb5efc8e_1440w.jpg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DI和IoC的关系：IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在典型的IOC场景中，容器创建了所有对象，并设置必要的属性将它们连接在一起，决定什么时候调用方法。下表列出了IOC的一个实现模式：
    &lt;ul&gt;
      &lt;li&gt;类型一：服务需要实现专门的接口，通过接口，由对象提供这些服务，可以从对象查询依赖性(例如需要附加服务)&lt;/li&gt;
      &lt;li&gt;类型二：通过JavaBean的属性分配依赖性&lt;/li&gt;
      &lt;li&gt;类型三：依赖性以构造函数的形式提供，不以JavaBean属性的形式公开&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;aopaspected-oriented-programming&quot;&gt;AOP(Aspected-Oriented Programming)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;AOP(面向方面的编程）：&lt;a href=&quot;https://www.jianshu.com/p/007bd6e1ba1b&quot;&gt;AOP精彩解释&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;AOP(Aspect-Oriented Programming)：是面向对象的补充和完善。面向对象里面有封装，多态和继承来建立一种对象层次结构。但是当我们需要为分散的对象引入公共行为时，OOP显得非常无力。也即是说，封装，多态和继承可以完美的定义对象从上到下的关系，但不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为&lt;strong&gt;横切（cross-cutting）代码&lt;/strong&gt;，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AOP技术，利用一种被称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为&lt;strong&gt;切面（Aspect）&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;切面（Aspect）：将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。&lt;/li&gt;
  &lt;li&gt;如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。&lt;/li&gt;
  &lt;li&gt;利用AOP技术，软件系统被分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的特点是：他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。&lt;/li&gt;
  &lt;li&gt;实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用拦截方法的方式，对该方法进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“切面”，从而使得编译器可以在编译期间织入有关“切面”的代码。&lt;/li&gt;
  &lt;li&gt;除了刚刚讲到的切面，还有很多相关的术语，包括：&lt;/li&gt;
  &lt;li&gt;连接点（Join Point）：连接点是在应用程序执行过程中能够插入切面的一个点。这个点可以是类的某个方法调用前，调用后，方法抛出异常后等。切面代码可以利用这些点插入到应用的正常交流中，并添加行为&lt;/li&gt;
  &lt;li&gt;通知（Advice）：在特定的连接点，AOP框架执行的动作&lt;/li&gt;
  &lt;li&gt;切点（Pointcut）：指定一个通知将被引发的一系列连接点的集合。AOP 通过切点定位到特定的连接点。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。每个类都拥有多个连接点，例如 ArithmethicCalculator类的所有方法实际上都是连接点。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;引入（Introduction）：添加方法或字段到被通知的类。 Spring允许引入新的接口到任何被通知的对象。例如，你可以使用一个引入使任何对象实现 IsModified接口，来简化缓存。Spring中要使用Introduction, 可有通过DelegatingIntroductionInterceptor来实现通知，通过DefaultIntroductionAdvisor来配置Advice和代理类要实现的接口&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;目标对象（Target Object）：包含连接点的对象。也被称作被通知或被代理对象。&lt;/li&gt;
  &lt;li&gt;织入（Weaving）：织入描述的是把切面应用到目标对象来创建新的代理对象的过程。 Spring AOP 的切面是在运行时被织入，原理是使用了动态代理技术。Spring支持两种方式生成代理对象：JDK动态代理和CGLib，默认的策略是如果目标类是接口，则使用JDK动态代理技术，否则使用Cglib来生成代理。&lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2020-05-12T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/java-on-call-5</link>
          <guid isPermaLink="true">http://localhost:4000/java-on-call-5</guid>
        </item>
      
    
      
        <item>
          <title>Java On Call 4</title>
          <description>&lt;ol&gt;
  &lt;li&gt;Java基础知识&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;常用API&lt;/li&gt;
  &lt;li&gt;集合I/O&lt;/li&gt;
  &lt;li&gt;多线程、网络编程、反射、设计模式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是准备java面试的第二天，以上的分类的思维导图，来自-&amp;gt;&lt;a href=&quot;https://www.cnblogs.com/java1024/p/8757952.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;这里是整理好的面试题，至少都过一遍:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86686492&quot;&gt;2019年最新java面试题及答案整理上&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86699263&quot;&gt;2019年最新java面试题及答案整理下&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;io&quot;&gt;IO&lt;/h3&gt;

&lt;h4 id=&quot;异常expection&quot;&gt;异常(Expection)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;异常是当程序中出现错误的时候，会引起Interrupt的一些错误。Interrupt中断分为两种，一种是软件中断（Software Interrupt）一种是硬件中断。软件中断中就包含exception和system call（系统调用）。&lt;/li&gt;
  &lt;li&gt;在java中，所有的异常类都继承于java.lang.Exception，而Exception类继承于Throwable类，如图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/httpatomoreillycomsourceoreillyimages1707613.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Throwable还有另外一个子类叫做Error，Error用来表示运行时环境发生的错误，如果程序陷入了error，那么一般很难恢复了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;捕获异常&lt;code&gt;try/catch&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//可能会出现异常e1的代码&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExpectionName&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//如果真的出现了异常e1&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//对错误进行处理的代码&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//不管怎么样必须会执行的代码&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//通常用来进行资源的释放&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;一段可能出现问题的代码可以跟多个catch捕获块，每个catch捕获块都界定了自己要捕获的异常，捕捉到哪个异常哪个捕获块就会执行，但是不管怎样finally里面的东西肯定是会执行的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;抛出异常&lt;code&gt;throws/throw&lt;/code&gt;：如果一个方法并没有捕获到一个检查性异常，那么该方法必须使用throws关键字声明。throws关键字放在方法签名的尾部，也可以使用throw关键字抛出一个异常，无论他是刚实例化的还是刚捕获的，其实抛出异常主要针对的是自定义异常，自己可以先写一个异常类，然后自定义类里面自己抛出自定义异常类，可以看看&lt;a href=&quot;https://michaeltaoma.github.io/java-on-call-2&quot;&gt;java on call 2&lt;/a&gt;里面的halloween类&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;className&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RemoteException&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// Method implementation&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RemoteException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//Remainder of class definition&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;final, finally, finalize的区别是什么&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;final是一个修饰符，他把一个变量变成了一个常量，为什么说是变成了一个常量呢？因为加了final的变量就不能被修改了，同理加了final的方法也不可以被子类重写，加了final的类不可以被子类继承&lt;/li&gt;
      &lt;li&gt;finally是异常处理代码块里面的，finally块下的代码是肯定会被执行的，除非jvm在执行到finally的时候就结束了&lt;/li&gt;
      &lt;li&gt;finalize是Object类中的一个方法finalize()，可以进行垃圾回收&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;file&quot;&gt;File&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;java文件类以抽象的方式代表文件名和目录路径名。该类主要用于文件和目录的创建，文件的查找和文件的删除等。File对象代表磁盘中实际存在的文件和目录，通过以下构造方法创建一个File对象。&lt;a href=&quot;https://www.runoob.com/java/java-file.html&quot;&gt;Basic File&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;所以file对象是为一个路径而创建的，这个file对象可以为这个路径创建文件啊，创建新路径啊，删除文件/文件夹&lt;/li&gt;
  &lt;li&gt;递归：方法内部调用本方法&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zhaoyanjun6/article/details/54581478&quot;&gt;Java IO流学习总结二：File&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;io流java-io流学习总结&quot;&gt;IO流（&lt;a href=&quot;https://blog.csdn.net/zhaoyanjun6/article/details/54292148&quot;&gt;Java IO流学习总结&lt;/a&gt;）&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTA1MTgyMzQyMjI3.jpeg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么是流？官方定义是流是一组有顺序，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备之间的传输成为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作&lt;/li&gt;
  &lt;li&gt;根据上面那张图，IO流可以按照处理数据类型分为字符流和字节流；也可以按照数据流向分为输入流和输出流；还可以按照流是否直接连接实际数据源，例如文件、网络、字节数组等，将流又可以划分为实体流（节点流）和装饰流（处理流）两大类；又根据具不具备缓冲功能分成了字节输入/输出流和字节缓冲输入/输出流&lt;/li&gt;
  &lt;li&gt;字符流VS字节流
    &lt;ul&gt;
      &lt;li&gt;因为数据编码的不同，而有了字符流来对字符进行高效操作的流对象。但是字符流的本质其实就是基于字节流读取&lt;/li&gt;
      &lt;li&gt;读写单位不同：字节流以一个字节为单位，字符流以字符为单位，根据码表映射字符，一次可能读取多个字节&lt;/li&gt;
      &lt;li&gt;处理对象不同：字节流能处理所有类型的数据，而字符流只可以处理字符类型的数据。字节流反倒是可以全部数据是因为不管是什么东西，他的最小单位都是一个字节，所以字节流可以处理设备商所有数据&lt;/li&gt;
      &lt;li&gt;字节流一次读入/出是八位&lt;/li&gt;
      &lt;li&gt;字符流一次读如/出是十六位&lt;/li&gt;
      &lt;li&gt;如果是处理纯文本的话，就优先考虑字符流&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;输入流VS输出流：很简单，输入流只能进行读操作，输出流只能进行写操作，程序中需要根据带传输数据的不同特性而使用不同的流&lt;/li&gt;
  &lt;li&gt;实体流VS装饰流：
    &lt;ul&gt;
      &lt;li&gt;实体流指的是直接连接数据源的流类&lt;/li&gt;
      &lt;li&gt;装饰流指的是不直接连接数据源，而是以其他流对象为基础建立的流类。该类流实现了将实体流中的数据进行转换，增强流对象的读写能力&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;输入字节流（InputStream）也被称为reader
    &lt;ul&gt;
      &lt;li&gt;输入字节流是所有输入字节流的父类，他是一个抽象类&lt;/li&gt;
      &lt;li&gt;介质流：&lt;code&gt;ByteArrayInputStream, StringBufferInputStream, FileInputStream&lt;/code&gt;，这三种基本介质流分别从byte数组，StringBuffer和本地文件读取数据&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;PipedInputStream&lt;/code&gt;是从与其他线程共用的管道中读取数据&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ObjectInputStream, FilterInputStream&lt;/code&gt;的子类都是装饰流&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;输出字节流（OutputStream）也被称为writer
    &lt;ul&gt;
      &lt;li&gt;输出字节流是所有输出字节流类别的流的父类，是一个抽象类&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ByteArrayOutputStream, FileOutputStream&lt;/code&gt;是两种基本的介质流，分别向byte数组和本地文件写入数据&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;PipedInputStream&lt;/code&gt;是从与其他线程共用的管道中写入数据&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ObjectInputStream, FilterInputStream&lt;/code&gt;的子类都是装饰流&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;节点流：直接与数据源相连，读入或读出。直接使用节点流读写不方便，为了更快的读写程序，才有了处理流
    &lt;ul&gt;
      &lt;li&gt;像刚刚提到的，除了装饰流外，都是节点流&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTA1MTk0NDEyMjcx.jpeg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;处理流：处理流和节点流往往一起使用，在节点流的基础上再套接一层，套接在节点流之上的就是处理流。不直接连接数据源，而是以其他流对象为基础建立的流类。该类流实现了将实体流中的数据进行转换，增强流对象的读写能力。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMTA1MTk0NTIyMzkw.jpeg&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;转换流：InputStreamReader 、OutputStreamWriter 要InputStream或OutputStream作为参数，实现从字节流到字符流的转换。&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//通过构造函数初始化，使用的是本系统默认的编码表GBK。&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//通过该构造函数初始化，可以指定编码表。&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//通过该构造函数初始化，使用的是本系统默认的编码表GBK。&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;OutputStreamwriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;charSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//通过该构造函数初始化，可以指定编码表。&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//————————————————&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//版权声明：本文为CSDN博主「赵彦军」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//原文链接：https://blog.csdn.net/zhaoyanjun6/article/details/54292148&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;其实字符流和字节流的操作都很像，以下是两个字节流FileInputStream和字节流的FileOutputStream的操作&lt;/li&gt;
  &lt;li&gt;FileInputStream读取文件内容&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.FileNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;no&quot;&gt;A1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	
		&lt;span class=&quot;c1&quot;&gt;//电脑d盘中的abc.txt 文档&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D:/abc.txt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reslut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reslut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


	&lt;span class=&quot;cm&quot;&gt;/**
	 * 读取指定文件的内容
	 * @param filePath ： 文件的路径
	 * @return  返回的结果
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;FileInputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// 根据path路径实例化一个输入流的对象&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fis&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//2. 返回这个输入流中可以被读的剩下的bytes字节的估计值；&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;fis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;available&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//3. 根据输入流中的字节数创建byte数组；&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//4.把数据读取到数组中；&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 

			&lt;span class=&quot;c1&quot;&gt;//5.根据获取到的Byte数组新建一个字符串，然后输出；&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;	

		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;fis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;FileOutputStream将内容写入文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.FileNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;no&quot;&gt;A2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;//电脑d盘中的abc.txt 文档&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;D:/abc.txt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;//要写入的内容&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;今天是2017/1/9,天气很好&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**
	 * 根据文件路径创建输出流
	 * @param filePath ： 文件的路径
	 * @param content : 需要写入的内容
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//1、根据文件路径创建输出流&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

			&lt;span class=&quot;c1&quot;&gt;//2、把string转换为byte数组；&lt;/span&gt;
			&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;//3、把byte数组输出；&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;fos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;可否这么理解：流指的是数据传输，所以java io流提供了一种办法，让人可以直接向文件里面传输数据；而Java File类则是更高层级的操作，它提供的方法可以以抽象的方式代表文件名和目录文件名，主要用于文件和目录的创建、文件的查找和文件的删除等。&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;flush()与close()的区别
    &lt;ul&gt;
      &lt;li&gt;要理解这个问题，首先要知道，当Java在发送数据的时候，存在一个缓冲区。Java会先把数据放到缓冲区，当缓冲区满了，再把数据从缓冲区发到目标地。flush的意思就是强制把缓冲区的数据发到目标地，哪怕他没有满&lt;/li&gt;
      &lt;li&gt;flush(): Flushes the stream.&lt;/li&gt;
      &lt;li&gt;close(): Closes the stream, flushing it first.&lt;/li&gt;
      &lt;li&gt;所以不管是flush()还是close()，都成功把缓冲区的数据给清干净了，并且确保了即使是在数据量很小的情况下，数据都能到达目标地&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FileWriter(String fileName, boolean append)&lt;/code&gt; : Creates a FileWriter object using specified fileName with a boolean indicating whether or not to append the data written.&lt;/li&gt;
  &lt;li&gt;BufferedReader/BufferedWriter（具有缓冲功能的输入输出）
    &lt;ul&gt;
      &lt;li&gt;又到了CPU Cycle的问题！如果是普通的输入输出，他是逐个逐个字节进行输入或输出，这样虽然也可以完成工作，但是在效率上存有很大的问题。因为比如这组数据有8个字节，那么他从磁盘取完一个字节，又要取一个字节就很浪费时间。在磁盘写入的过程中，内存只能干瞪眼，当磁盘写完一个字节后，内存再把下一个字节交给磁盘。太频繁的调动磁盘了！但是如果是具有缓冲功能的输入输出的话，那么并不是每一个字节都要调动一次磁盘，而是等请求充满了缓冲区之后才调动磁盘，这样就会速度快很多。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;InputStreamWriter是字节流通向字符流的桥梁&lt;/li&gt;
  &lt;li&gt;OutputStreamWriter是字符流通向字节流的桥梁&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;打印流&quot;&gt;打印流&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在整个IO包中，打印流是输出信息做方便的类，主要包含字节打印流(PrintStream)和字符打印流(PrintWriter)。打印流提供了非常方便的打印功能，可以打印任何的数据类型，例如：小数、整数、字符串等等。&lt;/li&gt;
  &lt;li&gt;之前在打印信息的时候需要使用OutputStream去打印，但是这样的话数据输出就会很麻烦，因为需要先把String转成&lt;code&gt;byte[]&lt;/code&gt;，打印流可以方便的进行输出。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;System.out.println()&lt;/code&gt;：就是其中的方法。此方法可以打印任意的数据类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;properties类&quot;&gt;Properties类&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Properties继承于Hashtable类。&lt;strong&gt;表示一个持久的属性集。属性列表中每个键及其对应的值都是一个字符串&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Properties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。&lt;/li&gt;
  &lt;li&gt;我们在很多需要避免硬编码的应用场景下需要使用properties文件来加载程序需要的配置信息，比如JDBC、MyBatis框架等。Properties类则是properties文件和程序的中间桥梁，不论是从properties文件读取信息还是写入信息到properties文件都要经由Properties类。&lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2020-05-11T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/java-on-call-4</link>
          <guid isPermaLink="true">http://localhost:4000/java-on-call-4</guid>
        </item>
      
    
      
        <item>
          <title>Economics Note</title>
          <description>&lt;h2 id=&quot;chapter-1-analyzing-economic-problems&quot;&gt;Chapter 1: Analyzing Economic Problems&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Contrast the two main branches of economics—microeconomics and macroeconomics.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Describe the three main analytical tools of microeconomics—constrained optimization, equilibrium analysis, and comparative statics—and recognize examples of each of these tools.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Explain the difference between positive and normative analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Economics is the science that deals with the allocation of limited resources to satisfy unlimited human wants&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;That is why economics is often described as the science of constrained choice.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resource&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Labor(劳动力)&lt;/li&gt;
      &lt;li&gt;Managerial talent（人才管理）&lt;/li&gt;
      &lt;li&gt;Capital（资本）
        &lt;ul&gt;
          &lt;li&gt;在经济学，资本， 是一种生产要素，为用于生产的耐久财，即资金、厂房、设备、材料等物质资源，用来生产其他商品或产生收入的累积物力与财务资源.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Raw Material
        &lt;ul&gt;
          &lt;li&gt;A raw material, also known as a feedstock, unprocessed material, or primary commodity, is a basic material that is used to produce goods, finished products, energy, or intermediate materials that are feedstock for future finished products.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;资本和原材料是一样的吗？原材料是资本的一部分吗？
    &lt;ul&gt;
      &lt;li&gt;资本和原材料不一样，最大的区别在于&lt;strong&gt;原材料会变成商品的一部分，而资本不会&lt;/strong&gt;，所以对于资本有更加精准的定义：具有以下特性的商品，即为资本：
        &lt;ul&gt;
          &lt;li&gt;在制造其他商品时会使用到（因此是生产要素中的一项）&lt;/li&gt;
          &lt;li&gt;不会变为其他商品中的一部分（和原料或半成品不同），在制造过程中也不会将此商品耗尽（不过资本会有折旧．也是企业支出的一部分）。&lt;/li&gt;
          &lt;li&gt;需要经过生产制造流程才能得到（和生产要素中的“土地”不同，后者是指自然存在的资产，例如矿产）。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;比如打印机本来属于资本，因为在制造其他商品时会用到，但是如果他同时是商品的一部分，那他就不是资本了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Microeconomics: studies the economic behavior of individual economic decision makers, such as a consumer, a worker, a firm, or a manager. It also analyzes the behavior of individual households, industries, markets, labor unions, or trade associations. 微观经济学要解决的三个问题
    &lt;ul&gt;
      &lt;li&gt;What goods and services will be produced and in what quantities?&lt;/li&gt;
      &lt;li&gt;Who will produce the goods and services, and how?&lt;/li&gt;
      &lt;li&gt;Who will receive the goods and services?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Macroeconomics: analyzes how an entire national economy performs. 所以宏观经济学的范围是卡死了，就是在国家的层面上讨论&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;three-key-analytical-tools&quot;&gt;Three Key Analytical Tools&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;经济学模型往往会选择性的抽象化或者忽视一些生活中的细节，经济学模型只关心真正在作用的事物。&lt;/li&gt;
  &lt;li&gt;就和数学模型一样，经济学模型需要确定模型的输入和模型的输出
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Exogenous variable&lt;/strong&gt;: the variable whose value is talem as given in a model. The value of an exogenous variable is determined by some process outside the model being examined. 感觉这个值跟函数的输入也不完全一样，因为作为一个函数他的输入对输出是有直接影响的，也就是说一个y之所以是y因为有这个函数模型加上这个x造成的，但这个exogenous variable可能只是众多变量的一种，并没有对结果造成影响，他的特点只有：determined outside。不过是不是只要放入了模型的，就暗示了会有影响呢？外生变量只对系统产生影响而不受系统影响&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Endogenous variable&lt;/strong&gt;: variable whose value is determined within the model being studied.也就是这个值在这个模型中决定的，可以看作是输出&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;constrained-optimization&quot;&gt;Constrained Optimization&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;什么时候用：当决策者面对多种限制，并且需要作出决策时，这样的问题被称为Constrained Optimization Problems&lt;/li&gt;
  &lt;li&gt;Constrained optimization problem可以被分为两部分
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Objective function&lt;/em&gt;：The relationship that the decision maker seeks to “optimize”
        &lt;ul&gt;
          &lt;li&gt;例子就是如果现在的问题是一个消费者想要通过购物去最大化自己的满足感。那么这里的objective function就是消费者在购买某一种商品之后他有多少满足感&lt;/li&gt;
          &lt;li&gt;假设现在需要通过L和W去最大化Area（定位为LW）那么他的标识是 \(\mathop{max}\limits_{(L,W)}(LW)\ subject\ to\ {Set\ of\ constraint} \)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;LW就是Objective Function&lt;/li&gt;
      &lt;li&gt;Set of constrains&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;所以其实Objective function就一个简单的目标值足矣&lt;/li&gt;
  &lt;li&gt;然后textbook举了个例子来阐述constrained optimization是怎样把人们从不明显的错误中给纠正过来，个人认为是废话。不过课本根据这个问题提出了经济学上的一个重要观点：&lt;strong&gt;&lt;em&gt;The solution to any constrained optimization problem depends on the marginal impact of the decision variables on the value of the objective function.&lt;/em&gt;&lt;/strong&gt;这句话的意思就是变量对于价值的边际影响决定了cop的答案，边际影响指得是每提高一个unit的变量，价值的改变是多少。&lt;/li&gt;
  &lt;li&gt;然后根据例子，处理这种多变量的constrain optimization problem的时候，我们往往考虑增加边际影响更大的变量，边际影响指明了方向&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The term marginal in microeconomics tells us how a dependent variable changes as a result of adding one unit of an independent variable&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Marginal Cost&lt;/strong&gt;: Marginal cost measures the incremental impact of the last unit of the independent variable (output) on the dependent variable (total cost). 这个和刚刚的边际影响是相反的，这个考虑的是当价值提高一个unit，那么成本（变量）会提高多少，一般就是价格&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;equilibrium-analysis&quot;&gt;Equilibrium Analysis&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;什么叫做Equilibrium，Equilibrium平衡指的是in a system is a state or condition that will continue indefinitely as long as exogenous factors remain unchanged—that is, as long as no outside factor upsets the equilibrium.&lt;/li&gt;
  &lt;li&gt;在一个竞争市场里面，平衡点出现在当市场clears的时候，即是需求曲线和供给曲线相交的时候&lt;/li&gt;
  &lt;li&gt;提出了一个很高级的说法：了解为什么系统处于平衡，帮助我们了解为什么系统不处于平衡&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;comparative-statics&quot;&gt;Comparative Statics&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;used to examine how a change in an exogenous variable will affect the level of an endogenous variable in an economic model. 对于经济模型来说，这个模型分析方法是用来分析外生变量的变化会如何影响内生变量&lt;/li&gt;
  &lt;li&gt;它主要是这么运作的：A “before and after” analysis 通过对比前后两种经济模型来得出结论
    &lt;ul&gt;
      &lt;li&gt;Initial：根据外生变量的初始值，得出内生变量的值&lt;/li&gt;
      &lt;li&gt;After；根据变化之后的外生变量的值，得出内生变量的值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;所以如果是comparative statics应用在constrained optimization problem的话，他要考虑的是，当外生变量的值变化时，从外生变量中生成的最优的内生变量会如何变化，也就是改变状态会如何影响选择&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;positive-and-normative-analysis&quot;&gt;Positive and Normative Analysis&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Positive Analysis: &lt;em&gt;attempts to explain how an economic system works or to predict how it will change over time.&lt;/em&gt;他问的问题是针对现象的：当怎么怎么样，会怎么怎么样？他的关注点是后面的会发生什么&lt;/li&gt;
  &lt;li&gt;Normative Analysis: &lt;em&gt;typically focus on issues of social welfare, examining what will enhance or detract from the common good. In so doing, they often involve value judgments.&lt;/em&gt;他问的问题则是针对行为的：我们该做什么。所以认为positive analysis是normative analysis的子问题，也就是说positive analysis可以归约到normative analysis.
    &lt;ul&gt;
      &lt;li&gt;Normative economics focuses on the value of economic fairness, or what the economy “should be” or “ought to be.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;While positive economics is based on fact and cannot be approved or disapproved, normative economics is based on value judgments.&lt;/li&gt;
  &lt;li&gt;看到了一个反对最低工资上调的说法：上调最低工资其实是把收入转移给了没有技术的员工。如果想要把收入转移给某类人，还有一种做法是从一般税收收入中支付转移的费用。这样做有两个好处:一是将负担分摊到所有纳税人身上，二是让政客们为自己的行为负责。但是通过提高最低工资的办法，只会让这个担子全压在雇主身上，如果最低工资上调，雇主只可以多付工资，每年的成本上涨，这上涨的成本无异于前种办法的征税，唯一的区别是政策设计者可以告诉你他没有提高税收&lt;/li&gt;
  &lt;li&gt;Positive analysis attempts to explain how an economic system works and to predict how the endogenous variables will change as exogenous variables change. Normative analysis considers prescriptive questions such as “What should be done?” Normative studies introduce value judgments into the analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-2-demand-and-supply-analysis&quot;&gt;Chapter 2: Demand and Supply Analysis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Describe the &lt;strong&gt;three main building blocks of supply and demand analysis&lt;/strong&gt;––demand curves, supply curves, and the concept of market equilibrium.&lt;/li&gt;
  &lt;li&gt;Analyze how changes in exogenous variables shift the demand and supply curves and thus change the equilibrium price and quantity.&lt;/li&gt;
  &lt;li&gt;Explain the concept of &lt;strong&gt;price elasticity.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Calculate the price elasticity of demand for specific demand curves.&lt;/li&gt;
  &lt;li&gt;Explain how price elasticity of demand is related to total revenue.&lt;/li&gt;
  &lt;li&gt;Discuss the factors that determine the price elasticity of demand.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contrast the market-level price elasticity of demand with the brand-level price elasticity of demand.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Explain and contrast &lt;strong&gt;other elasticities&lt;/strong&gt;: the income elasticity of demand, the cross-price elasticity of demand, and the price elasticity of supply.&lt;/li&gt;
  &lt;li&gt;Indicate why the short-run price elasticities of demand and supply may differ from the long-run price elasticities of demand and supply.&lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;“back-of-the-envelope”&lt;/strong&gt; techniques to determine key properties of demand and supply curves with only fragmentary data on prices, quantities, or elasticities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-demand-supply-and-market-equilibrium&quot;&gt;2.1 Demand, Supply, and Market Equilibrium&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;目标分析市场：
    &lt;ul&gt;
      &lt;li&gt;Perfectly Competitive Market&lt;/li&gt;
      &lt;li&gt;完全竞争市场comprise large numbers of buyers and sellers。&lt;/li&gt;
      &lt;li&gt;存在许多的买家/卖家，所以单个的买家/卖家无法决定价格，他们只能接受市场决定的整体的价格(&lt;em&gt;price-taking&lt;/em&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一个市场可以被以下三个维度划分：
    &lt;ul&gt;
      &lt;li&gt;Commodity: 在贩卖/购买的是什么货物&lt;/li&gt;
      &lt;li&gt;Geography: 市场的地点在哪里&lt;/li&gt;
      &lt;li&gt;Time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Market Demand Curve&lt;/strong&gt;: 就是市场需求曲线，A curve that shows us the quantity of goods that con- sumers are willing to buy at different prices.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Derived Demand&lt;/strong&gt;: Demand for a good that is derived from the produc- tion and sale of other goods. Derived demand is demand for a factor of production or intermediate good that occurs as a result of the demand for another intermediate or final good. 也就是说derived demand这个需求是基于别的最终产品的需求上的，比如我想要的是玉米汁，但是玉米是玉米汁的原材料，所以我对玉米的需求是基于我对玉米汁的需求&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Direct Demand&lt;/strong&gt;: Demand for a good that comes from the desire of buyers to directly consume the good itself. 就是我对于玉米的需求来源于我本身想要消费玉米，而像在上面举的例子里面的direct demand就是我对于玉米汁的需求&lt;/li&gt;
  &lt;li&gt;When we draw the demand curve, we assume that all other factors that affect the quantity demanded are fixed. Demand curve只探讨价格和需求的关系&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Law of demand&lt;/strong&gt;: The inverse relationship between price and quantity demanded, holding all other factors that influence demand fixed也就是价格越高，需求就越小，但是有些杠精就会跑出来说了，哎呀奢侈品就不一样，价格越高越多人喜欢，需求就更大，不过其实这样想的话，因为我们多考虑了一个变量“优越感”，优越感越高需求越大，而价格越高优越感越干，因为需求曲线只在乎价格上的影响，所以如果我们控制优越感不变，价格越高，需求还是越少的&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Market Supply Curve&lt;/strong&gt;：A curve that shows us the total quantity of goods that their suppliers are willing to sell at different prices. 就是简单的市场供给曲线。Supply里面包括当年生产的也包括之前的库存&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Law of supply&lt;/strong&gt;：The positive relationship between price and quantity supplied, when all other factors that influence supply are held fixed. 意即价格越高，供给者会供给的产品越多&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Factors of production&lt;/strong&gt;：Resources such as labor and raw materials that are used to produce a good.&lt;/li&gt;
  &lt;li&gt;很多东西，包括上面的生产要素，都可以影响供给的量，比如别的产品的价格也会影响供给的量。和供给曲线一样，supply curve也只探讨价格和供给的关系&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Market Equilibrium&lt;/strong&gt;：The point where the quantity demanded equals the quantity supplied, so the market clears&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Excess Supply&lt;/strong&gt;：当价格偏高，生产者愿意供给比需求者需求更多的商品 A situation in which the quantity supplied at a given price exceeds the quantity demanded. 在这种情况下，价格会变低，趋于平衡&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Excess Demand&lt;/strong&gt;：当价格偏低，消费者需求比生产者愿意供给的更多的商品 A situation in which the quantity demanded at a given price exceeds the quantity supplied 在这种情况下，价格会变高，趋于平衡&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;价格属于外生变量还是内生变量&lt;/strong&gt;：值得注意的一个问题是，价格和数量都属于内生变量，因为价格“无法被单一的经济决定者所决定”，他是一个必须要通过供给曲线和需求曲线来决定的值，他是由模型产生的值，所以价格属于内生变量，并且这个模型基本上只在乎处于平衡状态下的数量和价格&lt;/li&gt;
  &lt;li&gt;题型：根据书上的边做边学，这方面的题型有：
    &lt;ul&gt;
      &lt;li&gt;给你需求数量关于价格的表达式/供给数量关于价格的表达式，再给你个函数取值，求数量/价格的值（弱智问题）&lt;/li&gt;
      &lt;li&gt;和上面一样，给你提供两个表达式，然后求他们的市场平均状态（价格+供给），这个就令两个表达式相等求得价格再带回去就好了
        &lt;h4 id=&quot;shifts-in-supply-and-demand&quot;&gt;Shifts in Supply and Demand&lt;/h4&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shift in either supply or demand&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;首先这个东西要知道，只有exogenous variable的变化会shift曲线，单是价格的变化体现在曲线的上面&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;To do a comparative statics analysis&lt;/em&gt;:
        &lt;ol&gt;
          &lt;li&gt;Determine how a particular exogenous variable affects demand/supply curve
            &lt;ul&gt;
              &lt;li&gt;比如如果人们的工资上涨了了，那么demand curve就会右移&lt;/li&gt;
            &lt;/ul&gt;

            &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-18_10-07-01.png&quot; /&gt;&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;又比如工人的wage rate变高了（这个rate貌似对应的是产品quantity而言），那么供给者生产成本变高了，所以供给曲线会向左移（供给的变少了）&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;然后根据这个观察图的变化，得出了以下几个废话结论
        &lt;ul&gt;
          &lt;li&gt;Increase in demand + unchanged supply curve = higher equilibrium price and larger equilibrium quantity&lt;/li&gt;
          &lt;li&gt;Decrease in supply + unchanged demand curve = higher equilibrium price and smaller equilibrium quantity&lt;/li&gt;
          &lt;li&gt;Decrease in demand + unchanged supply curve = lower equilibrium price and smaller equilibrium quantity&lt;/li&gt;
          &lt;li&gt;Increase in supply + unchanged demand curve = lower equilibrium price and larger equilibrium quantity&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;题型：根据书上的“边做边学”：
        &lt;ul&gt;
          &lt;li&gt;给你一个表达式，这个表达式往往不是只关于价格，而是像下面这个一样&lt;/li&gt;
          &lt;li&gt;\( Q^{d} = 500-50P+10I \)&lt;/li&gt;
          &lt;li&gt;都知道I是一个另外的因素，他就会告诉你一个I的取值，然后叫你求市场平衡状态&lt;/li&gt;
          &lt;li&gt;或者是告诉你一个I的大致走向（上升还是下降），叫你探讨这个新的I会如何影响市场的平衡状态，这个东西基本上大致都能直接看出来&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shift in both supply and demand&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;有些时候，不单单只是需求曲线/供给曲线单一会被影响，而是两条线都会一起移动，但是因为两条线都是一起移动，所以具体的移动之后对价格/数量造成的影响依然是要具体问题具体分析，要看因素对需求/供给造成的影响的具体大小才可以分析&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-18_11-06-35.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Price Index感觉是个不会考的内容，不过还挺有意思：
    &lt;ul&gt;
      &lt;li&gt;怎么看Price index：Values of the index are calcu- lated as a computer’s price that month as a percentage of the price of a comparable computer at the end of 1988. For example, suppose that the computer priced in December 1988 was $5,000. The index’s value at the end of 1990 was about 90, so a comparable computer would have cost about $4,500 (90 percent of $5,000) that month.&lt;/li&gt;
      &lt;li&gt;这样子的逻辑是依照Bureau of Labor Statistics（BLS）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-own-price-elasticiyty-of-demand-价格弹性&quot;&gt;2.2 Own-Price Elasticiyty of Demand 价格弹性&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The price elasticity of demand measures the sensitivity of the quantity demanded to price&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;需求的价格弹性：需求的数量随商品价格的变动而变化的弹性。&lt;/li&gt;
  &lt;li&gt;Notation：\( \epsilon_{Q, P} \)表示的是percentage change in quantity demanded Q brought by a 1 percent change in price P.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \epsilon_{Q, P} = \frac{percentage\ change\ in\ quantity}{percentage\ change\ in\ price}\\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; (Q的变化量相对于当下Q的比例)percentage\ change\ in\ quantity=\frac{\Delta Q}{Q}  100%\\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; (P的变化量相对于当下的P的比例)percentage\ change\ in\ price=\frac{\Delta P}{P}  100%\\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \epsilon_{Q,P} =\frac{\Delta Q}{\Delta P}\frac{P}{Q}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;具体的例子：For example, suppose that when the price of a good is $10 (P=10), the quantity demanded is 50 units (Q=50), and that when the price increases to $12 ( \( \Delta P=+2 \) ), the quantity demanded decreases to 45 units ( \( \Delta Q=-5 \) ). 那么直接强行带入公式就好了&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \epsilon_{Q,P} =\frac{\Delta Q}{\Delta P}\frac{P}{Q} = \frac{-5}{2}\frac{10}{50} = -0.5
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;并且根据Law of demand，这个需求价格弹性必须是负的。&lt;/li&gt;
  &lt;li&gt;根据算出来的需求价格弹性的不一样，可以为需求价格弹性分类：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-18_11-49-26.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在看图的时候，如果横轴代表quantity，纵轴代表price，那么如果一条曲线的需求价格弹性越小（越elastic），那么他会显得更加水平（价格稍有变化会对数量带来很大的影响）；而数值比较大的（越不elastic）的曲线，则会显得更加垂直，价格的变化，对曲线不会带来太大的影响&lt;/li&gt;
  &lt;li&gt;当一条曲线完全水平的时候，就是perfectly elastic -&amp;gt; 只要价格变化，将不会有任何quantity，或者可以理解成，在价格P之下，任何数量的产品都可以被出售；当一条曲线完全垂直的时候，就是perfectly inelastic -&amp;gt; 不管价格如何变动，数量都恒定&lt;/li&gt;
  &lt;li&gt;题型：给定Q，P还有Q和P的变化量，计算需求价格弹性 -&amp;gt;直接套公式&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;elastic-along-specific-demand-curves&quot;&gt;Elastic along specific demand curves&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Linear Demand Curve&lt;/strong&gt;: 需求曲线是一条直线，表示为\( Q=a-bP \)，其中a代表了其他所有影响的因素，b则代表了需求数量会如何按照价格来变化&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Inverse demand curve&lt;/strong&gt;：有一条需求曲线，inverse demand curve就是基于这条需求曲线的一个price as a function of quantity。就是\( P=\frac{a}{b}- \frac{1}{b}Q \)
    &lt;ul&gt;
      &lt;li&gt;其中，&lt;strong&gt;choke price&lt;/strong&gt;指的是\( \frac{a}{b} \)这个值，它的意义是当需求数量变为0时，他的价格为这个&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;计算弹性公式在下面，最关键的就是要记住计算这个其实就是斜率（需求价格曲线）乘上比例&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Modified price elastic of demand&lt;/strong&gt;: 根据以上的种种公式，可以推出一个恒定的价格需求弹性的公式：
    &lt;ul&gt;
      &lt;li&gt;所以其实这个东西的意义就是，\( \frac{P}{Q} \)这个函数的变化率，几何意义的话可以想成是一个曲面，再对这个曲面求导是要得到他的割面，而这个割面就代表了需求价格弹性&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;所以在计算的时候，拿到任何一个P关于Q的函数，或者是Q关于P的函数，都要先找到Q关于P的函数（如果直接给了当然更好），然后求出\( \frac{DQ}{DP} \)，再简单的带入表达式\( \frac{DQ}{DP}\frac{P}{Q} \)即可，有时候可以运用多种法则还可以化简&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \epsilon_{Q,P} =\frac{\Delta Q}{\Delta P}\frac{P}{Q} = -b\frac{P}{Q}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;又根据以上这个公式，得出了下面这张图，下面这张图的意义是，在线上不同的点的弹性各不一样，具体请看下图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-18_14-07-23.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以上的两个region：Elastic region和Inelastic region分别代表了需求价格弹性在不同的区间中取的需求价格弹性，注意了，这个midpoint指的是价格midpoint&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;斜率和弹性的区别以及为什么不用斜率&lt;/strong&gt;：斜率衡量的是绝对变化（unit of percentage），而需求价格弹性衡量的是百分比变化（1 percentage change in price）。那么为什么不用斜率呢？斜率衡量的单位是一个商品的一个unit，但是不同的商品的单位不一样，所以如果对比商品之间，连单位都无法控制一样的话，就没什么意义&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Constant Elasticity Demand Curve&lt;/strong&gt;：需求曲线是一个幂函数：\( Q=aP^{-b} \)，这样的需求曲线，他的需求价格弹性恒定是\( -b \).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;题型&lt;/strong&gt;：告诉你一条直线需求曲线/幂函数需求曲线，然后给你P和Q的取值，让你算具体的需求弹性，也很简单，看上面的公式就好&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;total revenue&lt;/strong&gt;: Selling price times the quantity of product sold.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;解读弹性&lt;/strong&gt;：Consider the estimated elasticity of 0.107 for cigarettes in Table 2.1, which indicates that a 10 percent increase in the price of cigarettes would result in a 1.07 percent drop in the quantity of cigarettes demanded.&lt;/li&gt;
  &lt;li&gt;影响需求弹性的因素：
    &lt;ul&gt;
      &lt;li&gt;Demand tends to be more price elastic when there are good substitutes for a product&lt;/li&gt;
      &lt;li&gt;Demand tends to be more price elastic when a consumer’s expenditure on the product is large (either in absolute terms or as a fraction of total expenditures)&lt;/li&gt;
      &lt;li&gt;Demand tends to be less price elastic when the product is seen by consumers as being a necessity.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Market-level VS Brand-level&lt;/strong&gt;：这个也很好理解，就是在市场层面的需求价格弹性绝对不等于在单一品牌层面的需求价格弹性。假设只有一个品牌的香烟涨价了，那么很有可能对于这个品牌的需求大大降低，但香烟整体的需求是不弹性的，这个品牌的消费者大可以去买别的品牌的香烟，Even if demand is inelastic at the market level, it can be highly elastic at the individual brand level. 而且根据观察可以得出的是，如果一个品牌的替代者越多，那么他的需求价格弹性的绝对值就越高。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-other-elasticities&quot;&gt;2.3 Other Elasticities&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Income Elasticity of Demand&lt;/strong&gt;: 顾名思义：the ratio of the percentage change of quantity demanded to the percentage change of income, holding price and all other determi- nants of demand constant.当工资变化percentage，需求会如何变化&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}

&amp; \epsilon_{Q, I}=\frac{\Delta Q}{\Delta I}\frac{I}{Q}

\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这个东西一般是正的，这个也好理解：当工资上升，人们也更乐意买更多的东西。但这个也不绝对，例如有研究表明，在亚洲的某些国家，对于米饭需求工资弹性是负的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cross-Price Elasticity of Demand&lt;/strong&gt;：The cross-price elasticity of demand for good i with respect to the price of good j is the ratio of the percentage change of the quantity of good i demanded to the per- centage change of the price of good j。这个探讨的实际上是两种商品之间的关系-&amp;gt; 当商品j的价格上升的时候，对于商品i的需求的变化&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}

&amp; \epsilon_{Q_i, P_j} = \frac{\Delta Q_{i}}{\Delta P_j}\frac{P_j}{Q_i}

\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;如果这个弹性是正数，说明当一个产品的价格上升，另一个产品的需求上升，那么说明这两个产品属于互相替代的关系：demand substitutes：Two goods related in such a way that if the price of one increases, demand for the other increases.&lt;/li&gt;
  &lt;li&gt;如果这个弹性是负数的话，就说明这两个东西是互补品：demand complements：Two goods related in such a way that if the price of one increases, demand for the other decreases.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Long-run demand curve&lt;/strong&gt;：The demand curve that pertains to the period of time in which consumers can fully adjust their pur- chase decisions to changes in price.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Short-run demand curve&lt;/strong&gt;：the demand curve that pertains to the period of time in which consumers cannot fully adjust their purchasing decisions to changes in price.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Durable Good&lt;/strong&gt;：Goods, such as automobiles or airplanes, that provide valuable services over many years.&lt;/li&gt;
  &lt;li&gt;总而言之，短期需求曲线探讨的是消费者无法完全作出消费决定，而在长期的需求曲线中，消费者有时间做出完整的消费决定，对于短期和长期的需求价格曲线，他们的弹性的比较是可以讨论的：
    &lt;ul&gt;
      &lt;li&gt;长期需求曲线弹性大于短期需求曲线弹性：这种情况一般发生在诸如石油、天然气等产品，这些产品中，对他们的需求往往基于对其他固定资产的需求（汽车），所以在短期内很难改变，但在长期内可以改变，所以长期需求曲线弹性大于短期需求曲线弹性&lt;/li&gt;
      &lt;li&gt;长期供给曲线弹性大于短期供给曲线弹性：这种情况发生在短期内，生产者因为种种原因无法生产他想要的那么多的产品，但在长期可以，所以长期他对价格的敏感度就高于短期&lt;/li&gt;
      &lt;li&gt;长期需求曲线弹性低于短期需求曲线弹性：一般使用在durable good上面。比如如果飞机的价格上升了，那么在长期需求中，这对于航空公司来说是必需品，所以必须得换；但是对于短期来说，航空公司可能决定这个飞机多开几年，所以短期内的需求可能会下降的比长期的需求要多&lt;/li&gt;
      &lt;li&gt;长期供给曲线弹性高于短期需求曲线弹性：一般出现在可以再次使用/二手市场出售的商品中，在短期内，这个商品价格上升，would elicit an increased supply from two sources: additional new aluminum and recycled aluminum made from scrap. However, in the long run, the stock of scrap aluminum will diminish, and the increase in quantity supplied induced by the increased price will mainly come from the produc- tion of new aluminum.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“经济法律和推理仅仅是材料的一部分，在解决实际问题和制定可能成为生活指南的规则时，良心和常识必须加以利用。”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是，《经济学人》也不得不考虑道德力量。确实有人试图就“经济人”的行为建立一种抽象的科学，经济人不受道德的影响，谨慎而积极地追求金钱利益，但机械地和自私地。但是它们没有成功，甚至没有完全执行;因为他们从来没有真正把经济人看作完全自私的人。最可靠的人莫过于有经济头脑的人，他为了养家糊口而无私地吃苦耐劳、牺牲牺牲;他的正常动机一直被默认为包括家庭感情在内。但是，如果把这些动机也包括在内，为什么不把所有其他的利他动机也包括在内呢?到目前为止，任何阶级、任何时间、任何地点的所有其他利他动机的行为都是一致的，因此可以归结为普遍规律。”&lt;/p&gt;

&lt;h2 id=&quot;chapter-3-consumer-preferences-and-the-concept-of-utility&quot;&gt;Chapter 3: Consumer Preferences and the Concept of Utility&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在这个章节里面，主要探讨的是消费者的喜好，忽视掉商品的价格，我们不谈钱，只谈感情，这一章和下一章结合在一起会探讨一个问题：在经济条件允许的情况下，消费者会怎么选择商品&lt;/li&gt;
  &lt;li&gt;Represent consumer preferences in terms of market baskets of goods and services&lt;/li&gt;
  &lt;li&gt;Apply three basic &lt;strong&gt;assumption&lt;/strong&gt; about consumer preferences: Preferences are complete, preferences are transitive, and more is bettwe&lt;/li&gt;
  &lt;li&gt;Distinguish between &lt;strong&gt;ordinal and cardinal ranking of preferences&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Apply utility functions as a tool for representing preferences and analyze the concept of &lt;strong&gt;marginal unitility&lt;/strong&gt; and the principle of diminishing marginal utility&lt;/li&gt;
  &lt;li&gt;Apply utility functions in the analysis of preferences with a &lt;strong&gt;single good and with multiple goods.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Construct indifference curves as a way of representing util- ity functions in simplified form.&lt;/li&gt;
  &lt;li&gt;Analyze the concept of the &lt;strong&gt;marginal rate of substitution of one good for another.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Describe and compare some &lt;strong&gt;special utility functions.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;31-representation-of-preferences&quot;&gt;3.1 Representation of preferences&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Market basket(bundle)&lt;/strong&gt;: A collecition of goods and services that an individual might consume.注意这个colletion里面清楚表明了商品/服务的数量的，是个非常具体，一点都不抽象的类目&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-21_20-15-57.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consumer Preferences&lt;/strong&gt;：指的是给定两个basket，假定basktes都不需要任何cost的情况下，消费者会如何rank这两个basket&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Assumptions about consumer preferences&lt;/strong&gt;（首先必然是消费者是理智的）
    &lt;ul&gt;
      &lt;li&gt;Preferences are complete：消费者必须“有能力”去找到自己最喜欢的那个，&lt;strong&gt;注意&lt;/strong&gt;：equally喜欢也是允许的&lt;/li&gt;
      &lt;li&gt;Preferences are transitive: 就是说如消费者偏好A多过B，偏好B多过D，那么他必定偏好A多过D&lt;/li&gt;
      &lt;li&gt;More is better：两个basket，如果能控制剩余的商品数量一样，那么消费者必然偏好剩下的商品更多的那个basket，根据这个原则在上面那张图里面，消费者在全局必然最偏好A&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;以上的assumption在现实生活中往往不那么显然的存在，这是因为现实生活中变化太多了&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ordinal Ranking&lt;/strong&gt;: give us information about the order in which a consumer ranks baskets。只包含简单的次序，也就是说只能看出来消费者更加喜欢哪个，却很难看出来消费者有多喜欢。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cardinal Ranking&lt;/strong&gt;: give us information about the intensity of a consumer’s preferences。Cardinal ranking还给了喜欢的强度，我们不仅知道消费者在A和B之间更喜欢B，我们甚至还知道消费者喜欢B多过A多多少&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-utility-functions&quot;&gt;3.2 Utility Functions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Utility Function&lt;/strong&gt;: A utility function measures the level of satisfaction that a consumer receives from any basket of goods. We can represent the utility function with algebra or a graph.
    &lt;ul&gt;
      &lt;li&gt;\( U(y)=\sqrt(y) \)就是一个简单的utility function的例子，他衡量的是某人购买了y件产品，他的utility值是多少&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Marginal Utility&lt;/strong&gt;：又到了导数的概念，marginal utility指的是rate of change in U respect to change in y。就是how the level of satisfaction will change in response to a change in the level of consumption&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; MU = \frac{dU}{dy}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;因为这个不需要化简单位，所以在图像上，marginal utility就是在utility function函数上某一点的切线斜率
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;然后根据这个导数又得出了一个经济学的理论：The additional satisfaction that ppl receives from consuming more of a good depends on how much of the good she already consumed&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-21_20-51-52.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在经济学中所有的边际关系都是像这样用导数来衡量的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Principle of diminishing marginal utility&lt;/strong&gt;：After some point, as consumption of a good increases, the marginal utility of that good will begin to fall. 这个也很符合人类的行为，因为当我们越多的消费一个东西的时候，每多消费这样的东西带来的效益就没有之前那么高了&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;preferences-with-multiple-goods-marginal-utility-indifference-curves-and-the-marginal-rate-of-substitution&quot;&gt;Preferences with multiple goods: Marginal Utility, Indifference Curves and the marginal rate of substitution&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;单个产品的utility function作用并没有很大，我们在生活中往往需要衡量多个商品对自己的utility，假设for any basket(x, y)，utility function是\( U = \sqrt{(xy)} \)，那么他的utility function的图如下&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-24_21-50-08.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;多个产品的边际效用的计算&lt;/strong&gt;：计算多个产品边际效用很简单：控制住n-1个产品的consumption为常量就好了：The marginal utility of any one good is the rate at which total utility changes as the level of consumption of that good rises, holding constant the levels of consumption of all other goods.&lt;/li&gt;
  &lt;li&gt;\( \sqrt{xy} = \sqrt{x} \times \sqrt{y} \)&lt;/li&gt;
  &lt;li&gt;在计算的时候，给定一个basket，只可以分别计算他们各商品的MU&lt;/li&gt;
  &lt;li&gt;如果\( U = \sqrt{xy} \), 那么\( MU_{x} = \frac{\sqrt{y}}{2\sqrt{x}} \)，\( MU_{y} = \frac{\sqrt{x}}{2\sqrt{y}} \)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意，这个理论基础比较虚，要根据实际的效用函数来看他的mu的性质&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Indifference Curve&lt;/strong&gt;: A curve connecting a set of consumption baskets that yield the same level of satisfaction to the consumer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-24_22-35-16.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所以对于布兰登来说，他indifferent in A，B和C，因为他们都有同样的效用值&lt;/li&gt;
  &lt;li&gt;上面那个也被称为indifference map&lt;/li&gt;
  &lt;li&gt;indifference curve的四个性质：
    &lt;ul&gt;
      &lt;li&gt;When the consumer likes both goods (i.e., when MUx and MUy are both positive), all the indifference curves will have a negative slope
        &lt;ul&gt;
          &lt;li&gt;这个证明也很简单，Points to the northeast or southwest of A cannot be on the same indifference curve as A because they will be preferred to A or less preferred than A, respectively. Thus, points on the same indifference curve as A must lie either to the northwest or southeast of A.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Indifference curves cannot intersect&lt;/li&gt;
      &lt;li&gt;Every consumption basket lies on one and only one indifference curve&lt;/li&gt;
      &lt;li&gt;Indifference curves are not “thick.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Marginal rate of substitution&lt;/strong&gt;：The rate at which the consumer will give up one good to get more of another, holding the level of utility constant. 比较关键的概念是他hold the level of utility constant -&amp;gt; 在utility值保持不变的情况下，消费者愿意放弃多少某商品从而获得更多的商品，虽然说我们这一章讲的preference都是不计成本的，但问题是utility值现在变成了一个限制
    &lt;ul&gt;
      &lt;li&gt;a consumer’s &lt;strong&gt;marginal rate of substitution&lt;/strong&gt; of &lt;strong&gt;hamburgers for lemonade&lt;/strong&gt; is the &lt;strong&gt;rate at which the consumer would be willing to give up glasses of lemonade to get more hamburgers, with the same overall satisfaction.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;表现在indifference map上面就是，一条indifference curve的斜率&lt;/li&gt;
      &lt;li&gt;假设现在两个商品分别是x和y，那么\( \frac{dy}{dx} \)代表了&lt;strong&gt;The rate of change of y relative to the change of x = Marginal rate of substitution of x for y&lt;/strong&gt; -&amp;gt; 为了得到x，需要放弃多少y，可以这么理解：change of y relative to x，说明y的变化随着x而变化，说明我们是自己控制x，“为了得到x”就对应了这个性质&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Indifference Map for consumer is given exogenously and remains fixed&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;非常重要的公式，这个公式的推导是根据在indifference curve上的x和y的任何增量都不会影响u的值：
    &lt;ul&gt;
      &lt;li&gt;\( \Delta U = MU_{x}(\Delta x) + MU_{y}(\Delta y) \)&lt;/li&gt;
      &lt;li&gt;\( 0 = MU_{x}(\Delta x) + MU_{y}(\Delta y) \)&lt;/li&gt;
      &lt;li&gt;\( -MU_{x}(\Delta x) = MU_{y}(\Delta y) \)&lt;/li&gt;
      &lt;li&gt;根据以上推理出来最终的MRS的公式是：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
  &amp; MRS_{x, y} = \frac{dy}{dx} = -\frac{dy}{dx} = \frac{MU_{x}}{MU_{y}}
  \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;negative of the slope of the indifference curve on a graph with x on the horizontal axis and y on the vertical axis&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Diminishing Marginal rate of substitution&lt;/strong&gt;: A feature of consumer pref- erences for which the marginal rate of substitution of one good for another good diminishes as the consumption of the first good increases along an indifference curve.一开始的时候，因为消费者消费x的数量不多，所以消费者很乐意去拿许多的y去换一个x，但是他占有x的数量越来越多，占有y的数量越来越少，消费者会不那么乐意用那么多的y去换一个x了。根据indifference也可以看出这个性质&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Draw indifference graph&lt;/strong&gt;: 给定一个utility function，给定一个utility值，要如何画indifference graph-&amp;gt;只需要找出适当的x，y组合令utility值等于要求的utility值，这样就可以找出一个点，然后继续找下一个点，多找几个点就可以把线给描出来了&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果问你可不可以和纵轴/横轴相交，用原函数式+x或y等于0去反推&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;做这种题目要时刻记住：只要MUx和MUy都是positive，那么他们的indifference curve就一定是negative slope&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;33-special-preferences&quot;&gt;3.3 Special Preferences&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Perfect Substitutes&lt;/strong&gt;：&lt;strong&gt;Two goods are perfect substitutes when the marginal rate of substitution of one for the other is a constant&lt;/strong&gt;。也就是说，不管他已经获得了多少某种产品，消费者都会愿意用一定数量的产品去交换一定数量的另外一种产品。这类商品之间的MRS是个常量
    &lt;ul&gt;
      &lt;li&gt;More generally, indifference curves for perfect substitutes are straight lines, and the marginal rate of substitution is constant, though not necessarily equal to 1&lt;/li&gt;
      &lt;li&gt;比如一个人愿意用2个P换取1个W，那么他的Utility function就是：U = P + 2W&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Perfect Complements&lt;/strong&gt;：(in consumption) Two goods that the consumer always wants to consume in fixed proportion to each other. 比如一双袜子：左边袜子和右边袜子&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_11-42-23.png&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;以上这个例子就是perfect complement的例子：\( U(R, L) = 10min(R, L) \)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Cobb-Douglas utility function&lt;/strong&gt;: 形如\( U=\sqrt(xy) \)或者是\( U = xy \)这样子的utility function都被称为cobb-douglas utility function, 更general的表示是\( U=Ax^{\alpha}y^{\beta} \), 其中\(A, \alpha, \beta \)都属于positive constant
    &lt;ul&gt;
      &lt;li&gt;这类的utility function都有其三个性质：
        &lt;ul&gt;
          &lt;li&gt;The marginal utilities are positive for both goods.&lt;/li&gt;
          &lt;li&gt;Since the marginal utilities are both positive, the indifference curves will be downward sloping.&lt;/li&gt;
          &lt;li&gt;The Cobb–Douglas utility function also exhibits a diminishing marginal rate of substitution.(也就是说他的函数会慢慢变平，趋于饱和)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quasilinear utility function&lt;/strong&gt;：A utility function that is linear in at least one of the goods consumed, but may be a nonlinear function of the other good(s).&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_11-55-19.png&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;The distinguishing characteristic of a quasilinear utility function is that, as &lt;strong&gt;we move due north on the indifference map, the marginal rate of substitution of x for y remains the same. That is, at any value of x, the slopes of all of the indifference curves will be the same, so the indifference curves are parallel to each other.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;At any value of x, the slope of all of the indifference curves(and hence the MRS_{x, y})will be the same&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-consumer-choice&quot;&gt;4 Consumer Choice&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Theory of Consumer Choice, explaining how consumers allocate their limited incomes among available goods and services.&lt;/li&gt;
  &lt;li&gt;Write the equation of the budget constraint and graph the budget line.&lt;/li&gt;
  &lt;li&gt;Illustrate graphically how a change in income or a change in a price affects the budget line.&lt;/li&gt;
  &lt;li&gt;Describe the conditions for optimal consumer choice.&lt;/li&gt;
  &lt;li&gt;Illustrate graphically the tangency condition for optimal consumer choice.&lt;/li&gt;
  &lt;li&gt;Solve for an optimal consumption basket, given information about income, prices, and marginal utilities.&lt;/li&gt;
  &lt;li&gt;Explain why the optimal consumption basket solves both a utility maximization problem and an expendi- ture minimization problem.&lt;/li&gt;
  &lt;li&gt;Explain why the optimal consumption basket could occur at a corner point.&lt;/li&gt;
  &lt;li&gt;Illustrate the budget line and optimal consumer choice graphically when one of the goods a consumer can choose is a composite good.&lt;/li&gt;
  &lt;li&gt;Describe the concept of revealed preference.&lt;/li&gt;
  &lt;li&gt;Employ the concept of revealed preference to determine whether observed choices are consistent with utility maximization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;41-the-budget-constraint&quot;&gt;4.1 The Budget constraint&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The budget cnsrtaint&lt;/strong&gt; defines the set of baskets that a consumer can purchase with a limited amount of income.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;假设I是income，那么：The budget line indicates all of the combinations of food (x) and clothing ( y) that Eric can purchase if he spends all of his available income on the two goods. It can be expressed as&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{x} x + P_{y} y = I&lt;/script&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_19-54-09.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显而易见的是，只要在budget line，x轴，和y轴包围的空间里面，他随便选，但在这个空间之外，就是不行的了，而budget constraint的式子是\( P_{x}x + P_{y} y \leq I \)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;budget line的斜率&lt;/strong&gt;: Thus, the slope of the budget line tells us &lt;strong&gt;how many units of the good on the vertical axis a consumer must give up to obtain an additional unit of the good on the horizontal axis.&lt;/strong&gt; 和MRS有点像，不过又不尽一样，因为MRS控制的是utility相等，而这个控制的是开销相等&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果收入变多了，那么budget line向上平行移动&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_20-02-54.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果一个商品的价格改变了的话，这个budget line会“旋转”，像下面这样：&lt;/p&gt;

    &lt;p&gt;&amp;lt;img src+”assets/post_pics/Snipaste_2020-05-25_20-05-36.png”&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Thus, an increase in the price of one good moves the intercept on that good’s axis toward the origin. Conversely, a decrease in the price of one good would move the intercept on that good’s axis away from the origin.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;假设工资和商品的价格同时涨到了本来的2倍，那么这对于budget line没有任何影响&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;42-optimal-choice&quot;&gt;4.2 Optimal Choice&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Optimal Choice&lt;/strong&gt;: Consumer choice of a basket of goods that (1) maximizes satisfaction (utility) while (2) allowing him to live within his budget constraint. 分为两个部分来讨论最佳选择：在不超过自己工资承受范围的情况下的同时最大化效用值&lt;/li&gt;
  &lt;li&gt;optimal choice绝对在budget line上&lt;/li&gt;
  &lt;li&gt;整理一下，这个optimal choice的问题是：&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \mathop{max}_{(x, y)} U(x, y) \\
&amp; subject\ to:\ P_{x}x + P_{y}y \leq I
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;大致分了一下endogenous/exogenous
    &lt;ul&gt;
      &lt;li&gt;Endogeneous Variable: x, y&lt;/li&gt;
      &lt;li&gt;Exogeneous Variable: Prices, Income&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_20-39-14.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Diminishing MRS的图上表示是：because the indifference curves are bowed in toward the origin (in economic terms, because there is diminishing marginal rate of substitution of x for y)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;同时，有个算式是：\( \frac{MU_{x}}{MU_{y}} = \frac{P_{x}}{P_{y}}  \) &lt;strong&gt;The optimum occurs at a point where the budget line is tangent to the indifference curve.&lt;/strong&gt;：学到后面就会发现optimal点出现在切点仅仅是对于Cobb而言&lt;/li&gt;
  &lt;li&gt;\( \frac{MU_x}{P_x} = \frac{MU_y}{P_y} \) &lt;strong&gt;Put another way, at an interior optimum, the extra utility per dollar spent on good x is equal to the extra utility per dollar spent on good y.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interior Optimum&lt;/strong&gt;: An optimal basket at which a consumer will be purchasing positive amounts of all commodities.消费者不会不买任何产品
    &lt;ul&gt;
      &lt;li&gt;an interior optimal basket, the consumer chooses commodi- ties so that the ratio of the marginal utilities (i.e., the marginal rate of substitution) equals the ratio of the prices of the goods.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果MUx和MUy都是正数，那么optimal choice会在budget line上面&lt;/li&gt;
  &lt;li&gt;如果存在diminishing marginal rate of substitution，那么interior optimal consumption会出现在indifferent curve和budget line相切的地方&lt;/li&gt;
  &lt;li&gt;在看待这个优化问题的时候，当然存在别的角度：What basket should the consumer choose to minimize his expenditure (Px x  Py y) and also achieve a given level of utility U2?&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \mathop{min}_{(x, y)} expenditure = P_{x}x + P_{y}y \\
&amp; subject\ to:\ U(x, y) = U_{2}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;这样的问题被称为：&lt;strong&gt;expenditure minimization problem&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_21-22-46.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The consumer can increase utility if he continues to spend $800 monthly, or he can spend less money to stay at the same level of utility he is currently realizing at B.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Corner Points&lt;/strong&gt;: A solution to the consumer’s optimal choice problem at which some good is not being consumed at all, in which case the optimal basket lies on an axis.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-25_21-31-52.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;上图就阐明了一种这样子的关系，当没有一条indifferent curve和bl相切。并且这三条indifferent curve的都比BL要更加的斜，经过证明，这代表了：\( \frac{MU_x}{P_x} \lt \frac{MU_y}{P_y} \)，也就是说明tells us the marginal utility per dollar spent is higher for food than for clothing, so the consumer would like to purchase more food and less clothing. 所以消费者必定会选择R（把food选到最大）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果要找有拐点的optimal value：先通过计算斜率等大致说出indifference curve和bl的一些性质（凸起还是凹下啊），陈述拐点的可能存在，然后根据MUx/MUy = Px/Py试图找切点，找到悖论证明切点不存在，说明最优解在拐点，直接算拐点的时候的utility值&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kink：这个知识记在了Module笔记上&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;chapter-4-appendix-1-the-mathematics-of-consumer-choice&quot;&gt;Chapter 4: Appendix 1: The Mathematics of Consumer Choice&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;是拉格朗日乘数是一种寻找多元函数在其变量受到一个或多个条件的约束时的极值的方法&lt;/li&gt;
  &lt;li&gt;这种方法将一个有n 个变量与k 个约束条件的最优化问题转换为一个有n + k个变量的方程组的极值问题，其变量不受任何约束。这种方法引入了一种新的标量未知数，即拉格朗日乘数：约束方程的梯度（gradient）的线性组合里每个向量的系数。&lt;/li&gt;
  &lt;li&gt;先看看这个拉格朗日乘数一般是如何定义的：&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
	&amp; \text{Assume current funtcion is z = f(x, y) and } \phi(x, y)=0 \\
	&amp; \text{goal is to maximize z while preserving } \phi(x, y) = 0 \\
	&amp; \text{Lagranian Function will be defined as } F(x, y, \lambda) = f(x, y) + \lambda \phi(x, y)\\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;定义好了之后，如何根据拉格朗日函数的方法求值呢？必须要通过三元方程解出\( x, y, \lambda \)的值（同时满足下列三个等式）&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
	&amp; F'_{x} = f'_{x}(x, y) + \lambda {\phi}'_{x}(x, y) = 0 \\
	&amp; F'_{y} = f'_{y}(x, y) + \lambda {\phi}'_{y}(x, y) = 0 \\
	&amp; F'_{\lambda} = {\phi}(x, y) = 0 \\
	&amp; \text{也就是对这三个值分别求导等于0，必须找到这样一个combination就可以了}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;现在回到我们的optimal choice的题目&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \mathop{max}_{(x, y)} U(x, y) \\
&amp; subject\ to:\ P_{x}x + P_{y}y \leq I
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;显然拉格朗日函数就被定义为\( F(x, y, \lambda) = U(x, y) + \lambda (I - P_{x}x - P_{y}y) \), 且和刚刚一样，都要满足刚刚那几个条件就好了，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-29_22-51-38.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The partial derivative dU(x, y)/dx is the mathematical expression for the marginal utility of x (MUx). It measures how much utility increases as x increases, holding y constant. Similarly, the partial derivative dU(x, y) /y is the mathematical expression for the marginal utility of y (MUy). It measures how much utility increases as y increases, holding x constant. 这里解释了上面那张图片的几个项是什么意思&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后。。。你妈的推回来了以下的等式证明了在cobb效用函数中确实应该使用切线定理：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
&amp; \frac{MU_x}{MU_y} = \frac{P_x}{P_y} \\
&amp; P_{x}x + P_{y}y = I \\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;So the mathematical solution to the consumer choice problem tells us that an optimal interior basket will satisfy the tangency condition and be on the budget line. This verifies the conditions for an op- timum we developed in the text, using a graphical approach.神你妈的verify&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chapter-5-the-theory-of-demand&quot;&gt;Chapter 5: The theory of Demand&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;理解demand的具体信息非常重要：其中包括一条是：如果政府对需求价格弹性不高的（对价格不敏感）的产品征税的话，政府可以得到更高的税收，同时，研究表明，香烟对于消费者工资的变化也相当的不敏感，在recession期间，对香烟征税，且因为香烟对工资的降低不敏感，政府可以得到非常客观的税收&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这一章的主旨是：Studying the impact of chages in prices and income levels on an individual’s consumption decision, we can: &lt;strong&gt;gain insight into why some goods, such as cigarettes, have demands that are relatively insensitive to changes in prices and income, while other goods, such as automobiles, might have demands that are relatively more sensitive to changes in prices, or income, or both.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Explain how a consumer’s demand for a good depends on the prices of all goods and on income&lt;/li&gt;
  &lt;li&gt;Examine how a change in the price of a good affects a consumer through a substitution effect and an income effect&lt;/li&gt;
  &lt;li&gt;Explain how a change in the price of a good affects three measures of con- sumers’ well-being: consumer surplus, compensating variation, and equivalent variation.&lt;/li&gt;
  &lt;li&gt;Derive market demand curves from individual demand curves.&lt;/li&gt;
  &lt;li&gt;Discuss the effects of network externalities on demand curves.&lt;/li&gt;
  &lt;li&gt;Explain how consumers choose to allocate their time between labor and leisure and how this relates to the supply of labor in the market.&lt;/li&gt;
  &lt;li&gt;Explain the biases in the Consumer Price Index.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;51-optimal-choice-and-demand&quot;&gt;5.1 Optimal Choice and demand&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-30_22-31-42.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如上图，这里主要讲了如何通过indifferent curve + budget line的组合作出以下的demand curve。观察就会得到，确实当食物的价格下降的时候，对事物的需求确实变大了&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Price consumption curve&lt;/strong&gt;: The set of utility-maximizing baskets as the price of one good varies (holding constant income and the prices of other goods).(这个curve就是把在indifferent curve那边的当某一商品价格不停变化而带来的optimal choice的变化给连在一起的)&lt;/li&gt;
  &lt;li&gt;需求曲线有时候也可以理解成“消费者愿意消费曲线”：具体怎么看呢？可以看上图，在价格为4的时候，MRSx,y是1，也就是说消费者愿意付出多一个unit的clothing来换得一个unit的food，而一个unit的clothing正好是$4，这就带来了当我们已经有2unit食物的时候，消费者愿意花费4块钱去买多一个，其实就是把图上面的东西解释来解释去&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The Effect of a change in income&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-30_22-48-25.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Income consumption curve&lt;/strong&gt;: The set of curve utility-maximizing baskets as income varies (and prices are held constant).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Engel Curve&lt;/strong&gt;: a graph relating the amount of the good consumed to the level of income.
    &lt;ul&gt;
      &lt;li&gt;一个正斜率的engel curve代表了normal good：赚得越多，买得越多&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;shows that a good with a positive income elasticity of demand will have a positively sloped Engel curve.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;一个负斜率的engel curve说明是个inferior good：赚得越多，买的越少&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-30_23-06-20.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;阐述了一句废话： If a good is normal, its income elasticity of demand is positive.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如何通过Utility function和budget line去找到demand curve（没有corner points的）&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;注意此时的utility function是\( U(x, y) = xy \)然后此时的budget line是\( P_{x}x + P_{y}y = I \)&lt;/li&gt;
      &lt;li&gt;并且求出此时的\( MU_{x} = y, MU_{y} = x \)&lt;/li&gt;
      &lt;li&gt;因为根据之前的经验，消费者对这两个商品都想要，mu都大于0。所以他们的optimal choice都是interior，也就是x，y都是正数数量，所以&lt;strong&gt;optimal choice&lt;/strong&gt;必然在budget line和indifferent curve的切点上&lt;/li&gt;
      &lt;li&gt;也就是符合\( \frac{MU_x}{MU_y} = \frac{P_x}{P_y} \)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
      &amp; \text{代入MU_x和MU_y轻松得到} \\
      &amp; \frac{y}{x} = \frac{P_x}{P_y} \\
      &amp; y = (\frac{P_x}{P_y})x \\
      &amp; \text{代入原有的budget line得到} \\
      &amp; P_{x}x + P_{y}(\frac{P_x}{P_y} x) = I
      &amp; x = \frac{I}{2P_{x}}
  \end{aligned} %]]&gt;&lt;/script&gt;

    &lt;ul&gt;
      &lt;li&gt;上面求出来最后的x=什么什么就是demand curve for x了&lt;/li&gt;
      &lt;li&gt;然后题目有时候会问你当I等于多少的时候demand curve是多少，就直接把I带进去就好了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如何通过Utility function和budget line去找到demand curve（有corner points的）&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;注意此时的utility function是\( U(x, y) = xy+10x \)，观察易得y可以是0&lt;/li&gt;
      &lt;li&gt;\( MU_{x} = y + 10, MU_{y} = x \)&lt;/li&gt;
      &lt;li&gt;price of x is 1, price of y is Py&lt;/li&gt;
      &lt;li&gt;然后注意这里是有corner point的存在的，这种情况下的话要分情况讨论
        &lt;ul&gt;
          &lt;li&gt;最佳点不在拐点：
            &lt;ul&gt;
              &lt;li&gt;如果是这种情况的话，那么计算的方式和普通的无拐点的情况下是一样的，根据切点相等的条件用y来表示x，然后代入到budget line里面得到demand curve&lt;/li&gt;
              &lt;li&gt;具体的就不计算了不过结果是：\( y = \frac{100 - 10P}{ 2P_{y}} \)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;最佳点在拐点：
            &lt;ul&gt;
              &lt;li&gt;这种情况的话就要观察一下，可以看到上面最佳点不在拐点的情况得出来的式子说明当P_y大于10的时候，y就变成负的了，说明这个关键点就是y价格为10的时候&lt;/li&gt;
              &lt;li&gt;直接讨论说明当y的价格高于10的时候对y的demand为0就好了&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;51-change-in-the-price-of-good-substitution-effect-and-income-effect&quot;&gt;5.1 Change in the price of good: &lt;u&gt;Substitution Effect and Income Effect&lt;/u&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Substitution Effect&lt;/strong&gt;: The change in the amount of a good that would be consumed as the price of that good changes, holding constant all other prices and the level of utility.保持效用值和别的一切商品价格不变的情况下，当某件商品的价格改变时，消费者购买的数量会如何改变
    &lt;ul&gt;
      &lt;li&gt;For example, if the price of food falls, the con- sumer can achieve the same level of utility by substituting food for other goods (i.e., by buying more food and less of other goods)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Income Effect&lt;/strong&gt;：The change in the amount of a good that a consumer would buy as purchasing power changes, holding all prices constant.当一件商品的价格改变时，等同于说明消费者的购买力也改变了。The income effect accounts for the part of the total difference in the quantity of the good purchased that isn’t accounted for by the substitution effect.&lt;/li&gt;
  &lt;li&gt;下面这个解释挺不错的：
    &lt;ul&gt;
      &lt;li&gt;一种商品的名义价格（nominal price）发生变化后，将同时对商品的需求量发生两种影响
        &lt;ul&gt;
          &lt;li&gt;替代效应：因该种商品名义价格变化，而导致的消费者所购买的商品组合中，该商品与其他商品之间的替代&lt;/li&gt;
          &lt;li&gt;收入效应：另一种是在名义收入不变的条件下，因一种商品名义价格变化，导致消费者实际收入变化，而导致的消费者所购商品总量的变化，称为收入效应（income effect）。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;先留个坑：现在已经知道了替代效应的效用维持不变，那收入效应呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-substitution-effect&quot;&gt;THE SUBSTITUTION EFFECT&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;替代效应在乎的是： The &lt;strong&gt;change in the amount of a good&lt;/strong&gt; that would be consumed as the price of that good changes, holding constant all other prices and the level of utility，根据这一个定义可以看到虽然现在价格下降之后，BL向外推，实际可以达到的效用值是U2，但是我们不在乎这个，目前在乎的是，为了维持现有的效用值，需要多购买x多少个。&lt;/li&gt;
  &lt;li&gt;作平行的原因是因为在价格下跌了之后，y和x之间的比例要保持一致，斜率得一致&lt;/li&gt;
  &lt;li&gt;Thus, the substitution effect accounts for the consumer’s movement from basket A to basket B—that is, the portion of the overall effect on the quantity of food purchased that can be attributed to the substitution effect is xB - xA.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_11-22-09.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-income-effect&quot;&gt;THE INCOME EFFECT&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;同样的还是可以根据上面的图来解释&lt;/li&gt;
  &lt;li&gt;the change in the amount of a good consumed as the consumer’s utility changes.&lt;/li&gt;
  &lt;li&gt;可以看到在替代效用之后，消费者会在A和B中摇摆不定，因为A和B都在同一条indifferent curve上面，所以对消费者来说似乎没有区别，但同时又看到，如果消费者此时因为替代效用在B点的这个BLd那里，在这一点上消费者的income其实是降低了的，也就是说当他买完B这个basket之后，还有钱没有花掉，所以消费者此时会选择购买更多的东西: &lt;strong&gt;restoring the lost income&lt;/strong&gt;从而达到一个更高的效用值U2&lt;/li&gt;
  &lt;li&gt;那么，拢共说明了：当价格从P_x1降到了P_x2的时候，消费者对于x消费的总变化为x_c - x_a，这其中可以分为
    &lt;ul&gt;
      &lt;li&gt;因为替代效应而产生的x_c - x_a&lt;/li&gt;
      &lt;li&gt;因为收入效应而产生的x_c - x_b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;也就是说收入效应和替代效应都工作于同一个方向&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;when-goods-are-not-normal&quot;&gt;When goods are not normal&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;当商品既不normal也不inferior&lt;/strong&gt;：income effect影响为0&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_11-49-37.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;当商品是inferior的时候&lt;/strong&gt;：income effect有负影响&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_11-52-19.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;当商品是giffen good的时候&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;A good so strongly inferior that the income effect outweighs the substitution effect, resulting in an upward-sloping demand curve over some region of prices.&lt;/li&gt;
      &lt;li&gt;商品实在太垃圾了，导致income effect对数量的负影响甚至超过了替代效应对商品的正影响&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_11-55-59.png&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A Giffen good has a demand curve with a positive slope over part of the curve.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;For an inferior good to have an income effect large enough to offset the substitution effect, the income elasticity of demand would have to be negative and the expenditures on the good would need to represent a large part of the consumer’s budget.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于如何计算income effect和substitution effect具体的数值书上170-171有详细的解释，也是根据上面那个step来的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面就是讨论了当价格上升的时候（normal good）会如何变化，其实都是大同小异的&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_12-39-55.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;在计算的时候，先根据相切的条件算出此时的x和y的数量是多少，然后按照utility function算出价格变化之前的效用值&lt;/li&gt;
  &lt;li&gt;然后把新的价格放入相切条件算出x和y的替换&lt;/li&gt;
  &lt;li&gt;然后代入进之前的效用值中&lt;/li&gt;
  &lt;li&gt;就可以得到为了维持在原有的效用值上，x和y的数量然后计算出他们的income，然后算cv就好了&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Income and Substitution Effects with a Quasilinear Utility Function&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;给定一个quslinear的utility公式，其算demand curve的步骤和cobb的步骤基本是一样的，都是先根据切点的等式来求得&lt;/li&gt;
      &lt;li&gt;然后有了demand curve之后就很舒服了，他给你什么价格就可以算出什么数量&lt;/li&gt;
      &lt;li&gt;然后求decomposition的时候要充分记住，utility和原来保持不变，然后斜率和final的保持不变&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;53-change-in-the-price-of-a-good-the-concept-of-consumer-surplus消费者盈余&quot;&gt;5.3 Change in the price of a good: The concept of consumer surplus消费者盈余&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Consumer Surplus&lt;/strong&gt;: the &lt;strong&gt;difference&lt;/strong&gt; between the maximum amount a consumer is willing to pay for a good and the amount he must actually pay to purchase the good in the marketplace.&lt;/li&gt;
  &lt;li&gt;The consumer surplus is the area below the demand curve and above the price that the consumer must pay for the good&lt;/li&gt;
  &lt;li&gt;虽然不知道为什么，但是&lt;strong&gt;the area under a demand curve exactly measures net benefits for a consumer only if the consumer experiences no income effect over the range of price change&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;如果是很简单的线性的demand function的话，算consumer surplus直接计算面积就好了&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;understanding-consumer-surplus-from-the-optimal-choice-diagram-compensating-variation-and-equivalent-variation&quot;&gt;Understanding consumer surplus from the optimal choice diagram: compensating variation and equivalent variation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;效用没有单位，伟大的经济学家使用金钱的单位来衡量&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compensating variation&lt;/strong&gt;: A measure of how much money a consumer would be willing to give up after a reduction in the price of a good to be just as well off as before the price decrease. 重点是要maintain utility
    &lt;ul&gt;
      &lt;li&gt;当价格下降时，cv为正；当价格上升时，cv为负&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Equivalent variation&lt;/strong&gt;：A measure of how much additional money a consumer would need before a price reduction to be as well off as after the price decrease.&lt;/li&gt;
  &lt;li&gt;可以的，这个东西其实稍微理解一下可以出来：
    &lt;ul&gt;
      &lt;li&gt;补偿变化：指的是在价格之后，消费者的income需要变化多少才可以回到之前的效用值。注意是价格变化之后，可以想象一下，当一个东西的价格变化了，消费者此时应该处于变化了的效用值，我们想让消费者回到之前的效用值，那么他的income需要变化多少。所以补偿变化指的是原来需要购买（价格变化之前的）的optimal组合的income和价格变化之后的价格和变化之前的同等的效用的optimal组合的difference&lt;/li&gt;
      &lt;li&gt;同等变化：指的是在价格变化之前，消费者愿意主动变化多少自己的income去达到价格改变之后的效用值。这个计算的是价格变化之前的optimal组合和原价格需要的income和新的效用值加上现在的价格（价格没有实际变化）的difference&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_19-48-00.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一般来说，cv和ev并不见得一样，因为income effect常常不是0&lt;/li&gt;
  &lt;li&gt;当income effect是0的时候且效用函数是quasilinear函数的时候，cv和ev相等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_19-52-24.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if there is no income effect, not only are the compensating variation and the equivalent variation equal to each other, they are also equal to the change in the consumer surplus (the change in the area under the demand curve as a result of the price change)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_20-02-49.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;顺便讲一下为什么quasilinear的utility function就是income effetc就是0呢？因为income effect等于（新的budget line平行的budget line和旧的utility function的切点）和（新的budget line和新的utility function的切点）的差，因为现在两两互相平行，所以结果必定是一样的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;market-demand&quot;&gt;Market Demand&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;The market demand curve is the horizontal sum of the demands of the individual consumers&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_20-53-24.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;计算的时候其实是要分情况讨论的，这一点书上面讲的非常清楚&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_20-59-38.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Network Externalities&lt;/strong&gt;: A demand characteristic present when the amount of a good demanded by one consumer depends on the number of other consumers who purchase the good.消费者对于某种产品的需求基于其他想要这个产品的消费者的个数
    &lt;ul&gt;
      &lt;li&gt;当externality是正的时候，说明越多人想要，我就越想要&lt;/li&gt;
      &lt;li&gt;当externality是负的时候，说明越多人想要，我就越不想要&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-01_21-08-02.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;上图展现了一个带有bandwagon effect的正network externality的图，你看，当价格从20-&amp;gt;10的时候，一般普通的商品的需求都是沿着需求曲线走的，但是这个不一样，因为价格便宜了，用的人多了，甚至会把需求曲线推向更远的地方，导致了搬瓦工效应&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Bandwagon effect&lt;/strong&gt;: A positive network externality that refers to the increase in each consumer’s demand for a good as more consumers buy the good.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Snob effetc&lt;/strong&gt;: A negative network externality that refers to the decrease in each consumer’s demand as more consumers buy the good.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;43-consumer-choice-with-composite-goods&quot;&gt;4.3 Consumer Choice With Composite Goods&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;一般只想探讨的顾客对于单一商品的selection，所以会把别的所有商品拢成&lt;em&gt;composite good&lt;/em&gt;，这个composite good会被放在竖轴，然后根据传统，这个composite good的价格为1。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;application-coupons-and-cash-sbusidies&quot;&gt;Application: Coupons and cash sbusidies&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;How a government program might increase the amount of housing chosen by a consumer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-07_18-06-15.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;以上这张图就把coupon和subsidy之间的关系阐述的很明了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;subsidy&lt;/strong&gt;：可以看作是政府为了刺激消费者购买更多的housing而&lt;strong&gt;直接给消费者发工资上的补贴&lt;/strong&gt;，就是直接给钱，这个钱可以用来买任何商品。那么他的budget line就会向右移动，从而会导致一个新的optimal choice相切于U2，但是也可以看出在这个新的optimal choice下面，房子的数量正好是政府希望人们去拥有的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Coupan&lt;/strong&gt;：&lt;strong&gt;Coupan指的是只能花费在某种商品下的政府的补贴&lt;/strong&gt;，在这种情况下，人们能获得普通商品的量不会改变，却可以买更多的房子。在这张图上面，如果获得了房子的coupon，那么KFG就是消费者的BL，F是消费者把工资全用在普通商品，且只用coupon/voucher去买房子的情况；然后他马上急转直下来到了与x轴的交点，他也正好与U2相切与optimal点，切数量也是政府希望的数量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果是上面的图的话，两种政策带来的后果是一样的，但是有的图，当政府介绍不同的政策的时候会带来不一样的结果，一般分为consumer会不会worse off或者政府的目的到底是想提高某种商品的消费，还是想提高人们的效用值&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;applicatio-joining-a-club&quot;&gt;Applicatio: Joining a club&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Consumer can join clubs that let them purchase goods and services at a discount&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-07_19-46-11.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;application-borrowing-and-lending&quot;&gt;Application: Borrowing and Lending&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;注意了，在接下来的讨论中：&lt;strong&gt;saving = lending钱给银行(with the interest rate offered by the bank)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-07_20-01-39.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这里接的是最下面appendix的内容&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在这种情况下，消费者的效用函数是：&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
          &amp; U(C_{1}) + \frac{U(C_2)}{1+P}
      \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意在这张图里面，横轴和竖轴代表的是今年和明年而不是两种商品&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;U(C)指的是消费者在某一年买了C dollar的composite good的时候所获得的效用值，其实就是给下一年的效用值加了个discount rate。这个discount rate就很特殊，它被称为&lt;strong&gt;consumer’s rate of time perference&lt;/strong&gt;: is a measure of the consumer’s impatience. (这个值越大，说明消费者就越不“耐心”，说明消费者在未来得到的效用就越小)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;MArginal rate of substitution is&lt;/strong&gt; \( MRS_{c1, c2} = (1+p)\frac{U’(C1)}{U’(c2)} \)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-08_16-13-04.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This theory of optimal choice suggests, then, that for a given expectation of in- come growth, a more impatient individual will have a greater propensity to borrow than a more patient individual. And for a given rate of time preference, an individual with a higher expectation of income growth will have a greater propensity to borrow than an individual with a lower expectation of income growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;application-quantity-discounts&quot;&gt;Application: Quantity Discounts&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;这里讲的东西和第二个module讲的那个&lt;strong&gt;kink&lt;/strong&gt;是一样的，其实指的就是&lt;strong&gt;当买了多少多少个之后，价格会进行什么样的变化。&lt;/strong&gt;具体去看module 2的kinked budget就好了&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;chapter-4-appendix-2-the-time-value-of-the-money&quot;&gt;Chapter 4: Appendix 2: The time value of the money&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Money has time value: 生动的例子就是给你100块钱和明天再给你100块钱之间选择，你大概率会选择前者&lt;/strong&gt;。同时这个也是为什么利率会存在的原因&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The techniques that can be used to compare amounts of money received at different points in time&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;future-value-and-present-value&quot;&gt;Future value and present value&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Future value of an amount of money $C&lt;/strong&gt;: The amount you would have at a given date in the future if you put $C into an account that earned a given rate of interest&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
      &amp; \text{假设投入的本金为C，利率为r（per t），t是总共要存的period} \\
      &amp; \text{那么future value 就是}C(1+r)^{t}
      \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个公式当然也可以拿来反推present value：The amount you need to invest today at a given rate of interest so that you would have $C at a given date in the future. 注意现在这里C变成了未来的钱&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
      &amp; \text{假设未来的目标资金为C，利率为r（per t），t是总共要存的period} \\
      &amp; \text{那么现在的present value 就是}\frac{C}{(1+r)^{t}}
      \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;当计算present rate的时候，往往会把interest rate称为&lt;u&gt;discount rate&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过这个可以计算&lt;strong&gt;present value of a stream of payments&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/mike.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Annuity&lt;/strong&gt;: An annuity is a stream of &lt;strong&gt;constant&lt;/strong&gt;, equally spaced, payments over a certain period of time. 就是说上面那个C不管经过多少年都是不变的&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
      &amp; \text{计算这个annuity的方法很简单，就是做了下化简} \\
      &amp; \frac{C}{r}(1-\frac{1}{(1+r)^{T}}) \\
      &amp; \text{其中T指的是这种payment会持续到最久的年份（基数词的最后一个）}
      \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Perpetuity&lt;/strong&gt;:指的是一种永远也不会停止的annuity，也就是说T趋于无穷，那么括号里面的term就会趋于1，那么最后的presnet value就是简单的\( \frac{C}{r} \)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;net-present-value&quot;&gt;Net Present Value&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;An important use of present value is to compare benefits to costs.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Net present value(NPV) is the difference between the present value of the stream of benefits and the upfront cost that musht be incurred.&lt;/strong&gt;&lt;/p&gt;

    &lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
          &amp; NPV  = -C_{0} + \frac{C_1}{(1+r)} + \frac{C_2}{(1+r)^{2}} + .... + \frac{C_{T}}{(1+r)^{T}}
          &amp; \text{其中c0指的就是一开始的成本，而后面的c1啥的都是之后可以赚到的钱}
      \end{aligned} %]]&gt;&lt;/script&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;presnet-value-future-value-and-the-optimal-consumption-choice-problem&quot;&gt;Presnet value, future value and the optimal consumption choice problem&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;其实这里的东西很多都跟上面的borrowing and lending有关，所以直接跳到上面去&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;55-the-choice-of-labor-and-leisure&quot;&gt;5.5 The Choice of labor and leisure&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;We use that model to examine a consumer’s choice of how much to work&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;as-wages-rise-leisure-first-decreases-then-increases&quot;&gt;As wages rise, leisure first decreases, then increases&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;假设一天被分成了：work和leisure，work赚到花在leisure上的income&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Assumption:
    &lt;ul&gt;
      &lt;li&gt;L代表了花在了leisure上的时间(hours)&lt;/li&gt;
      &lt;li&gt;w代表了每小时赚来的钱&lt;/li&gt;
      &lt;li&gt;所以日收入是w(24-L)&lt;/li&gt;
      &lt;li&gt;收入可以用来买composite good&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;消费者的效用值基于花在leisure上的时间和能买多少good&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-08_16-38-14.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;斜率都是-w，可以观察到的趋势是当工资上升（从5-15），number of hours of leisure fall；但是观察得到，当工资持续上涨，那么花在leisure上的时间会变多&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-backward-bending-supply-of-labor&quot;&gt;The Backward-bending supply of labor&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-08_16-50-48.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;An increase in the wage rate reduces the amount of work required to buy a unit of the composite good, and this leads to both a substitution effect and an income ef- fect.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以这么理解：leisure和labor完全是对立的关系，而labor和composite good却不是对立的关系，所以可以看出leisure和composite good是对立的关系。那么为什么替代效应和收入效用会带来影响呢？在这个场景里面，出了wage rate其他的东西都不会变化，那么当wage上升，就会有一些东西在变化&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;在这里的替代效应：当wage上升的时候，bl必定向y正方向移动，也就是说此时能够购买的composite商品就变多了（这个的效果和我们把composite good的价格降低是一样的效果），那么这个时候对于composite good来说，其替代效应是正的，因为为了维持原有的效用，他可以买更多的composite good，而这个正替代效应，将会：induce the consumer to substitute more of the composite good for leisure，这和前面的是一样的&lt;/li&gt;
      &lt;li&gt;但是同时，income effect收入效应会导致另外一种情况，那么就是因为leisure是normal good，工资上升自然意味着收入上升，所以人们会想要扩大自己的leisure的时间&lt;/li&gt;
      &lt;li&gt;两个方向完全不一样的效用导致了这种恶心的曲线&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-08_17-09-22.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In sum, the labor supply curve slopes upward over the region where the substitu- tion effect associated with a wage increase outweighs the income effect, but bends backward over the region where the income effect outweighs the substitution effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-08_17-14-15.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;chapter-15-risk-and-information&quot;&gt;Chapter 15: Risk and Information&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;About risk, imperfect information and how we can employ tools from microeconomics to analyze risk phenomena and decisions made in the face of risk&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;151-describing-risky-outcomes&quot;&gt;15.1: Describing Risky Outcomes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Probability Distribution:
    &lt;ul&gt;
      &lt;li&gt;Lottery: Any event for which the outcome is uncertain.(哇这个在讲你妈的废话啊。。)&lt;/li&gt;
      &lt;li&gt;Probability: The likelihood that a particular outcome of a lottery will occur.&lt;/li&gt;
      &lt;li&gt;Probability distribution: A depiction of all possible payoffs in a lottery and their associated probabilities.&lt;/li&gt;
      &lt;li&gt;Subjective Probabilities: Probabilities that reflect subjective beliefs about risky events.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Expected Value: A measure of the average payoff that a lottery will generate.&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
	\text{Expected Value} = &amp; \text{probability of A} \times \text{payoff iff A occurs} \\
							&amp; \text{probability of B} \times \text{payoff iff B occurs} \\
							&amp; \text{probability of C} \times \text{payoff iff C occurs} \\
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Variance: The sum of the probability-weighted squared deviations of the possible outcomes of the lottery. 这个值越高，风险越大&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-14_11-09-37.png&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-14_11-10-07.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Standard Deviation: The square root of the variance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;152-evaluating-risky-outcomes&quot;&gt;15.2: Evaluating Risky Outcomes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How we can use the concept of &lt;strong&gt;a utility function&lt;/strong&gt; to evaluate the benefits that decision maker would enjoy from alternatives with differing amounts of risk.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Expected Utility: The expected value of the utility levels that the decision maker receives from the payoffs in a lottery.(用不同的事件的概率和这些事件发生之后会带来的效用值分别相乘，再把这些值加起来)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Risk averse: A characteristic of a decision maker who prefers a sure thing to a lottery of equal expected value.(对于拥有同样的expected value值的lottery和确定的事物，这类人更倾向于确定的事物)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With diminishing marginal utility, the decision maker is thus hurt more by the downside of a lottery than he or she is helped by the upside.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;定律: &lt;em&gt;If lotteries L and M have the same expected value, but lottery L has a lower variance than lottery M, a risk-averse decision maker will prefer L to M&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Risk Neutral: A characteristic of a decision maker who compares lotteries according to their expected value and is therefore indifferent between a sure thing and a lottery with the same expected value.
    &lt;ul&gt;
      &lt;li&gt;risk neutral有着linear utility function: \( U = a + bI \)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Thus, when the expected value equals the payoff of the sure thing (i.e., when EV=I ), the expected utility equals the utility of the sure thing (i.e., EU=U ).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Risk Loving: A characteristic of a decision maker who prefers a lottery to a sure thing that is equal to the expected value of the lottery.
    &lt;ul&gt;
      &lt;li&gt;也就是说如果是risk loving的话，他的效用函数将会是concave up的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;大致的总结一下：
    &lt;ul&gt;
      &lt;li&gt;效用函数concave up：risk averse，直接找eu更大的那个&lt;/li&gt;
      &lt;li&gt;效用函数是linear：risk neutral，证明两者的utility相等，更准确地说是他们之间的utility和eu是一样的&lt;/li&gt;
      &lt;li&gt;效用函数concave down：risk loving，找eu更大的那个&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A risk-averse decision maker might prefer a gam- ble to a sure thing if the expected payoff from the gamble is sufficiently larger than the payoff from the sure thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;153-bearing-and-eliminating-risk&quot;&gt;15.3 Bearing and eliminating risk&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Risk Premium&lt;/strong&gt;: The necessary difference between the expected value of a lottery and the payoff of a sure thing to make the decision maker indifferent between the lottery and the sure thing.(后面这个payoff of a sure thing其实就代表了cv（certainty equivalent）)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;如果用P代表I1的概率和（1-P）代表I2的概率的话，RP（risk premium）可以用以下恒等式得出\( pU(I_{1}) + (1-p)U(I_{2}) = U(pI_{1} + (1-p)I_{2}-RP) \)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An important determinant of the risk premium is the variance of the lottery. If two lotteries have the same expected value but different variances, the lottery with the bigger variance will entail a higher risk premium. This implies that the reward a risk- averse individual requires for bearing risk becomes larger as the risk increases.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;when-would-a-risk-averse-person-choose-to-eliminate-risk-the-demand-for-insurance&quot;&gt;When would a risk-averse person choose to eliminate risk? The demand for insurance&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Fairly priced insurance policy&lt;/strong&gt;: An insurance policy in which the &lt;em&gt;insurance premium&lt;/em&gt; is equal to the expected value of the promised insurance payment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;**Insurance Premium: **很简单的例子是如果你愿意每年花费500刀去买保险，这个保险可以为你付最高10，000刀的赔付，你买保险用的500刀既是你的insurance premium，如果这个保险包的是车辆的维修，然后他是个faired priced insurance（上面那个），那么说明车辆维修的ev是500刀&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-16_20-01-45.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;asymmetric-information-moral-hazard-and-adverse-selection&quot;&gt;Asymmetric Information: Moral Hazard and Adverse Selection&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Asymmetric Information: A situation in which one party knows more about its own actions or characteristics than another party.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;在保险市场中，信息不对等一般发生在：
        &lt;ol&gt;
          &lt;li&gt;Moral Hazard: which arises when the insured party can take hidden actions that affect the likelihood of an accident
            &lt;ul&gt;
              &lt;li&gt;an insured party exercises less care than he or she would in the absence of insurance&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Adverse Selection: arises when a party has hidden information about its risk of an accident or loss.
            &lt;ul&gt;
              &lt;li&gt;A phenomenon whereby an increase in the insurance premium increases the overall riskiness of the pool of individuals who buy an insurance policy.&lt;/li&gt;
              &lt;li&gt;这个现象强调的是：保险公司有时候很难清楚的为不同的人的不同的风险程度给出一个合适的保险价位&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pay-for-performance-as-a-response-to-maral-hazard-and-adverse-selection&quot;&gt;Pay for performance as a response to maral hazard and adverse selection&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;上面的概念同样适用于求职市场：求职者水平参差不齐，雇主必须避免以上类似的情况发生而去制定相应的应对政策&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Pay for performance&lt;/strong&gt;：Most firms offer employees rewards for better performance&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;chanpter-6-input-and-production-functions&quot;&gt;Chanpter 6: Input and Production Functions&lt;/h2&gt;

&lt;h3 id=&quot;61-introduction-to-inputs-and-production-functions&quot;&gt;6.1 Introduction to inputs and production functions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;inputs: Resources, such as labor, capital equipment, and raw materials, that are combined to produce finished goods.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Factors of production: Resources that are used to produce a good.&lt;/li&gt;
  &lt;li&gt;Output: The amount of a good or service produced by a firm.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Production function: A mathematical represen- tation that shows the maximum quantity of output a firm can produce given the quantities of inputs that it might employ. \( Q=f(L, K) \),L是labor数量，k是capital数量&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-20_15-15-32.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Labor requirenments function(inverse of production function): A function that indicates the minimum amount of labor required to produce a given amount of output.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;62-production-functions-with-a-single-input&quot;&gt;6.2 Production Functions With A Single Input&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Simple case in which the quantity of out- put depends on a single input, labor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-20_15-20-43.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Total Production Function: A production function. A total product function with a single input shows how total output depends on the level of the input.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Increasing marginal returns to labor: The region along the total prod- uct function where output rises with additional labor at an increasing rate.
    &lt;ul&gt;
      &lt;li&gt;这个增加的原因之一是specialization，员工人数上升，员工分类干活（specialization）了，干的越来越好&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dimishing marginal returns to labor: The region along the total prod- uct function in which output rises with additional labor but at a decreasing rate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Dimishing total returns to labor: The region along the total product function where output decreases with additional labor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-20_15-30-10.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Average Product of labour(AP): 很简单直接算均值，The average amount of output per unit of labor.直接用当下的Q/L就好了
    &lt;ul&gt;
      &lt;li&gt;The average product of labor at any arbitrary quantity L0 corresponds to the slope of a ray drawn from the origin to the point along the total product func- tion corresponding to L0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Marginal Product of labor: The rate at which total output changes as the quantity of labor the firm uses is changed. \( \frac{\Delta Q}{\Delta L} \)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Law of diminishing marginal returns: Principle that as the usage of one input increases, the quantities of other inputs being held fixed, a point will be reached beyond which the marginal product of the variable input will decrease.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;一些显而易见的关系：
    &lt;ul&gt;
      &lt;li&gt;当MP&amp;gt;AP时：AP上升&lt;/li&gt;
      &lt;li&gt;当MP=AP时：AP最大&lt;/li&gt;
      &lt;li&gt;当MP&amp;lt;AP时：AP下降&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;63-production-functions-with-more-than-one-input&quot;&gt;6.3: Production Functions with more than one input&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Total Product Hill: A three-dimensional graph of a production function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-20_15-43-16.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把某个值固定在某个位置，就可以找到另一个变量的single value&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;isoquants&quot;&gt;Isoquants&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Isoquants&lt;/strong&gt;: A curve that shows all of the combina- tions of labor and capital that can produce a given level of output.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;把z轴固定起来 那么这一圈线上的所有组合代表了所有能够有这个特定输出的输入&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-20_15-47-47.png&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;这就和indiffernt curve的数学意义是一样的了&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Uneconomic Region:(从Isoquants的图上可以看出来的)The region of upward-sloping or backward-bending isoquants. In the uneconomic region, at least one input has a negative marginal product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Economic region of production: The region where the isoquants are downward sloping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-20_15-54-49.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个想要最小化自己生产成本的公司绝不在uneconomic的区域生产&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;marginal-rate-of-technical-substitution&quot;&gt;Marginal Rate of Technical Substitution&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Marginal Rate of Technical Substitution&lt;/strong&gt;: \( MRTS_{L,K} \) measures how steep an isoquant is.
    &lt;ul&gt;
      &lt;li&gt;和MRS是一样的概念，都要控制产出是恒定的&lt;/li&gt;
      &lt;li&gt;The rate at which the quantity of capital can be decreased for every one-unit increase in the quantity of labor, holding the quantity of output constant, or&lt;/li&gt;
      &lt;li&gt;The rate at which the quantity of capital must be increased for every one-unit decrease in the quantity of labor, holding the quantity of output constant.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The negative of the slope of the tangent line is the MRTSL,K at that point.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Diminishing Marginal Rate of Technical Substitution&lt;/em&gt;: A feature of a production function in which the marginal rate of technical substitution of labor for capital diminishes as the quantity of labor increases along an isoquant.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果是有这个性质的话：说明是convex的！！！！！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\( \frac{MP_{L}}{MP_{K}} = MRTS_{L,K} \)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;it is possible to have a diminishing marginal rate of technical substitution even though both of the marginal products are constant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;64-substitutability-among-inputs&quot;&gt;6.4 Substitutability among Inputs&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;In this section, we explore how to describe the ease or difficulty with which a firm can substitute between different inputs.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-28_10-37-58.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意一下这里左右搞反了。。。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;也就是说，右边的production function，为公司带来的是比较局限的选择；但是在左边的production function，却可以带来比较abundant的收益&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;When the production function offers limited input substitution opportunities, the MRTSL,K changes substantially as we move along an isoquant. In this case, the isoquants are nearly L-shaped, as in Figure 6.11(a).
        &lt;ul&gt;
          &lt;li&gt;umm他这里讲的就有点二逼了，因为他说比较局限的生产函数的MRTS变化会比较大，是因为在点A的左右两边呈现出来的是very horizontal/vertical的线，所以在A的左边和右边的MRST会大幅度的变化&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;When the production function offers abundant input substitution opportunities, the MRTSL,K changes gradually as we move along an isoquant. In this case, the isoquants are nearly straight lines, as in Figure 6.11(b).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;elasticity-of-substitution&quot;&gt;Elasticity of Substitution&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Elascity of substitution&lt;/strong&gt;: A measure of how easy it is for a firm to substitute labor for capital. It is equal to the percentage change in the capital–labor ratio for every 1 percent change in the marginal rate of technical substitution of labor for capital as we move along an isoquant.
    &lt;ul&gt;
      &lt;li&gt;基于MRST的变化率，衡量了在isoquant线上移动的时候，MRST移动的是有多快&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Capital-labor ratio&lt;/strong&gt;: The ratio of the quantity of capital to the quantity of labor: \( \frac{K}{L} \)&lt;/li&gt;
  &lt;li&gt;Elascity等于(change in k/L)/(change in MRTS)&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}

\text{The elascity of substition} \\

\sigma &amp;= \frac{\text{percentage change in capital-labor ratio}}{\text{percentage change in } MRTS_{L,K}}\\
&amp;= \frac{\% \Delta \frac{K}{L}}{\% \Delta MRTS_{L,K}}

\end{aligned} %]]&gt;&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Elascity can be anything [0,1]&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;如果弹性非常小（离0很近），那么基本没啥机会可以替换&lt;/li&gt;
      &lt;li&gt;如果弹性比较大，就有更多的替换的机会&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;special-production-functions&quot;&gt;Special Production Functions&lt;/h3&gt;

&lt;h4 id=&quot;linear-production-functionperfect-substitute&quot;&gt;Linear Production Function(Perfect Substitute)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;\( Q = aL + bK \)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Isoquantes are straight lines&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elascity of substitution for a linear production function must be infinite&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果有这种样子的linear production function的话，那么input就是linear的&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fixed-properties-production-functionperfect-complements&quot;&gt;Fixed-properties production function(Perfect Complements)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;也就是说input之间必须以一种固定的比例相结合，这样的input也被称为perfect complement&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\( Q = min(aL, bK) \)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;他们的isoquants就是那种带有强烈拐角的图&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elascity of substitution for a fixed properties production function must be zero&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cobb-douglas-production-function&quot;&gt;Cobb-Douglas production function&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;\( Q=AL^{\alpha}K^{\beta} \)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;就是比较“正常”的生产函数，弹性处于0-正无穷之间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In fact, it turns out that the elasticity of substitution along a Cobb–Douglas production function is always equal to 1. (This result is derived in the Appendix to this chapter.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;constant-elasticity-of-substitution-production-function&quot;&gt;Constant elasticity of substitution production function&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;父类：A type of production function that includes linear production functions, fixed- proportions production functions, and Cobb–Douglas production functions as special cases.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\( Q = [aL^{\frac{\sigma - 1}{sigma}} + bK^{\frac{\sigma}{\sigma - 1}}]^{\frac{\sigma}{sigma - 1}} \)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-28_11-20-15.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-28_11-20-43.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;65-returns-to-scale&quot;&gt;6.5 Returns to Scale&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;how increases in all input quantities affect the quantity of output the firm can produce.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;returns to scale: the percentage increase in output when a firm increases all of its input quantities by a given percentage amount&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\text{Return to scale } = \frac{\% \Delta (quantity of output)}{\% \Delta (quantity of all inputs)}&lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Increasing returns to scale: A proportionate increase in all input quanti- ties resulting in a greater than proportionate increase in output.&lt;/li&gt;
  &lt;li&gt;Constant returns to scale: A proportionate in- crease in all input quantities simultaneously that results in the same percentage in- crease in output.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Decreasing returns to scale: A proportionate increase in all input quanti- ties resulting in a less than proportionate increase in output.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;计算的时候，就是同时给所有的input一样的增长lambda，然后算出增长后的output的数量，并且求出output的变化theta，用theta和lambda做对比&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为什么规模回报很重要?当生产过程呈现出规模效益递增的趋势时，大规模经营就会带来成本优势。特别是，一家大公司能够以较低的单位成本生产一定数量的产品，而两家规模相同的小公司所能生产的产品只有前者的一半。例如，如果两家半导体公司能以每片0.1美元的价格各自生产100万个芯片，那么一家大型半导体公司就能以每片不到0.1美元的价格生产200万个芯片。这是因为，随着规模收益的增加，大公司需要雇佣少于小公司两倍的劳动力和资本来生产两倍的产出。当一个大公司比小公司拥有这样的成本优势时，一个大公司比几个小公司更能有效地服务市场。这种大规模经营的成本优势一直是允许企业作为受监管的垄断者在电力和石油管道运输等市场上经营的传统理由。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Return to scale VS Diminishing Marginal Returns:
    &lt;ul&gt;
      &lt;li&gt;Returns to scale pertains to the impact of an increase in all input quantities simultaneously, while marginal returns (i.e., marginal product) pertains to the impact of an increase in the quantity of a single input, such as labor, holding the quantities of all other inputs fixed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;66-technological-progress&quot;&gt;6.6 Technological Progress&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;注意，一个公司的生产函数并不是亘久不变的，他们是会改变的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Technological Progress: A change in a production process that enables a firm to achieve more output from a given combination of inputs or, equivalently, the same amount of output from less inputs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Neutral Technological Progress: Technological progress that decreases the amounts of labor and capi- tal needed to produce a given output, without af- fecting the marginal rate of technical substitution of labor for capital.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Labor Saving technological Progress: Technological progress that causes the marginal product of capital to increase relative to the marginal product of labor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Capital Saving technological progress: Technological progress that causes the marginal product of labor to increase relative to the marginal product of capital.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/Snipaste_2020-06-28_11-40-42.png&quot; /&gt;&lt;/p&gt;

</description>
          <pubDate>2020-05-11T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/economics-note</link>
          <guid isPermaLink="true">http://localhost:4000/economics-note</guid>
        </item>
      
    
      
        <item>
          <title>All My Past Notes</title>
          <description>&lt;p&gt;一直很想把自己之前上课做过的所有笔记都放出来，以下的笔记是按照课程来分类的，作为一个分享也作为一个自己笔记的整理，有些笔记是影印版的，所以大的离谱&lt;/p&gt;

&lt;h4 id=&quot;cisc324随堂笔记&quot;&gt;&lt;a href=&quot;assets/pdf/gener_324.pdf&quot;&gt;CISC324随堂笔记&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;cisc324期末笔记&quot;&gt;&lt;a href=&quot;assets/pdf/324Final.pdf&quot;&gt;CISC324期末笔记&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;cisc452笔记&quot;&gt;&lt;a href=&quot;assets/pdf/452_combine.pdf&quot;&gt;CISC452笔记&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;cisc223期末笔记&quot;&gt;&lt;a href=&quot;assets/pdf/223_final.pdf&quot;&gt;CISC223期末笔记&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;cisc365笔记含部分习题&quot;&gt;&lt;a href=&quot;assets/pdf/365Note.pdf&quot;&gt;CISC365笔记含部分习题&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&quot;cisc124笔记含部分习题&quot;&gt;&lt;a href=&quot;assets/pdf/124_REVIEW.pdf&quot;&gt;CISC124笔记含部分习题&lt;/a&gt;&lt;/h4&gt;

</description>
          <pubDate>2020-05-11T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/all-my-past-notes</link>
          <guid isPermaLink="true">http://localhost:4000/all-my-past-notes</guid>
        </item>
      
    
      
        <item>
          <title>Java On Call 3</title>
          <description>&lt;ol&gt;
  &lt;li&gt;Java基础知识&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;常用API&lt;/li&gt;
  &lt;li&gt;集合I/O&lt;/li&gt;
  &lt;li&gt;多线程、网络编程、反射、设计模式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是准备java面试的第二天，以上的分类的思维导图，来自-&amp;gt;&lt;a href=&quot;https://www.cnblogs.com/java1024/p/8757952.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;这里是整理好的面试题，至少都过一遍:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86686492&quot;&gt;2019年最新java面试题及答案整理上&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86699263&quot;&gt;2019年最新java面试题及答案整理下&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;集合io&quot;&gt;集合IO&lt;/h3&gt;

&lt;h4 id=&quot;集合&quot;&gt;集合&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;集合是java中的一个大的框架，这个框架上有非常多的东西，首先集合可以分为：
    &lt;ul&gt;
      &lt;li&gt;Collection集合，collection集合中又可以细分为
        &lt;ul&gt;
          &lt;li&gt;List集合，list集合又可以细分为
            &lt;ul&gt;
              &lt;li&gt;ArrayList&lt;/li&gt;
              &lt;li&gt;Vector&lt;/li&gt;
              &lt;li&gt;LinkedList&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Set集合，set集合又可以细分为
            &lt;ul&gt;
              &lt;li&gt;HashSet&lt;/li&gt;
              &lt;li&gt;TreeSet&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Map集合, map集合又可以细分为
        &lt;ul&gt;
          &lt;li&gt;HashMap&lt;/li&gt;
          &lt;li&gt;TreeMap&lt;/li&gt;
          &lt;li&gt;Hashtable&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;泛型&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;泛型generic&quot;&gt;泛型(Generic)&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;泛型指的是参数化类型，参数化类型指的就是，我们把数据的类型作为其参数的一种，加了泛型可以让我们避免出现运行时异常，并且强制要求了在集合中只能加入一种类型的数据&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;泛型类&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &lt;span class=&quot;c1&quot;&gt;//这就是一个简单的泛型类，当实例化这个类的时候，可以把我们要处理的数据类型，当作是一个参数给传入，具体的例子看下面&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;
	
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){};&lt;/span&gt;
		
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){};&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//end Sample&amp;lt;T&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;实例化泛型类&lt;code class=&quot;highlighter-rouge&quot;&gt;Sample&amp;lt;Integer&amp;gt; num2 = new Sample&amp;lt;&amp;gt;();&lt;/code&gt;，在泛型类定义的时候，是可以在&amp;lt;&amp;gt;里面加入多个类型的。或者说有的时候，希望限制那些被允许传递到一个类型参数的类型种类范围，那么就是使用&lt;em&gt;bounding有界的类型参数&lt;/em&gt;。&lt;strong&gt;要声明一个有界的类型参数，首先列出类型参数的名称，后跟extends关键字，最后紧跟他的上届&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//利用extend关键字声明上界，也就是说这个类型只可以是RootClass类及其子类的的&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//利用extend关键字声明上界，也就是说这个类型只可以是RootClass类和Pizza类以及他们的子类的的&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//利用super关键字声明下界，表示参数化类型是此类型的超类型（父类型），直至Object，在这里就是&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//Integer，Number，Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;在限定类型的时候，不仅仅可以用T，还有别的标识符：
      - E: Element(在集合中使用，因为集合中存放的是元素)
      - T: Type，指的是java类
      - K: Key
      - V: Value
      - N: Number
      - &lt;strong&gt;?: 表示不确定的java类型（无限制通配符类型）&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;em&gt;使用泛型的好处&lt;/em&gt;（once again）: Object是所有类的根类，任何类的对象都可以设置给该Object引用变量，使用的时候可能需要类型强制转换，但是使用了泛型标识符之后，类型在使用之前就已经确定了，不需要在进行类型强制转换&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;上界指的是使用了extends的bounding，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;? extends T&amp;gt;&lt;/code&gt;，表示参数化类型的可能是T或是T的子类&lt;/li&gt;
      &lt;li&gt;下界指的是使用了super的bounding，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;? super T&amp;gt;&lt;/code&gt;，这个学名叫做超类型限定，表示参数化类型的可能是此类型的超类型，直至Object&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;泛型方法&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;泛型方法既可以存在于泛型类中，也可以存在于普通类中。&lt;strong&gt;如果通过泛型方法就可以解决问题，那么应该尽量使用泛型方法&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;
  	&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    	
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   	 
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
  	&lt;span class=&quot;cm&quot;&gt;/**
   	* 泛型方法
   	* @param e
   	*/&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PrinterInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//作者：dreamGong&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//链接：https://juejin.im/post/5b614848e51d45355d51f792&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//来源：掘金&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;上面这个就是在一个泛型类中定义了一个泛型方法PrinterInfo，注意在泛型方法中声明的类型参数跟他所处的泛型类的类型参数是独立的，也就是说，我实例化的时候，可以为这个泛型类实例化一个String类型的，但是我们在利用这个对象的泛型方法PrinterInfo的时候，是可以把它应用在Double类型的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;泛型接口&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;泛型接口就也是一个将类型参数化的接口，他的定义和泛型类的定义很相似&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//一个未传入实参的泛型接口&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//一个传入实参（String）的泛型接口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;而对于实现了这个接口的类，对于未传入实参和传入实参的泛型接口的处理也是不一样的&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//当一个类实现一个未传入实参的泛型接口时，他自己也变成了泛型类&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//当一个类实现一个传入实参的泛型接口时，他还是个普通的类&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h5 id=&quot;collection集合&quot;&gt;Collection集合&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;Collection集合包含两大体系：List和Set
    &lt;h6 id=&quot;list&quot;&gt;List&lt;/h6&gt;
  &lt;/li&gt;
  &lt;li&gt;存取有序，有索引，可以根据索引来取值，元素可以重复&lt;/li&gt;
  &lt;li&gt;ArrayList
    &lt;ul&gt;
      &lt;li&gt;底层是使用数组实现的，所以查询速度快，增删速度慢&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;//好好学&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
	
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;c1&quot;&gt;// 使用ArrayList进行添加和遍历&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        	
      	&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;接口1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;接口2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;接口3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        	
      	&lt;span class=&quot;c1&quot;&gt;// 第一种遍历方式,使用迭代器&lt;/span&gt;
      	&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
          	&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-------------------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;c1&quot;&gt;// 第二种遍历方式，使用foreach&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
          	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
  &lt;span class=&quot;c1&quot;&gt;//作者：欧阳思海&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//链接：https://juejin.im/post/5ad82dbef265da503825b240&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//来源：掘金&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;LinkedList
    &lt;ul&gt;
      &lt;li&gt;也就是链表啦，有头有尾一条线，是基于链表结构实现的，查询速度慢，增删速度快，提供了特殊的方法，对头尾的元素操作&lt;/li&gt;
      &lt;li&gt;以下这个例子是使用了linkedlist来实现栈（栈是先进后出（LIFO），而队列是先进先出（FIFO））&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.xiaoshitou.classtest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
  &lt;span class=&quot;cm&quot;&gt;/**
 	* 利用LinkedList来模拟栈
 	* 栈的特点：先进后出
 	* @author Beck
 	*
 	*/&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyStack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
   	 
  	&lt;span class=&quot;c1&quot;&gt;// 压栈&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      	&lt;span class=&quot;n&quot;&gt;linkList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	
  	&lt;span class=&quot;c1&quot;&gt;// 出栈&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
  	&lt;span class=&quot;c1&quot;&gt;// 查看&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;peek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
  	&lt;span class=&quot;c1&quot;&gt;// 判断是否为空&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
  &lt;span class=&quot;c1&quot;&gt;//作者：欧阳思海&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//链接：https://juejin.im/post/5ad82dbef265da503825b240&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//来源：掘金&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Vector
    &lt;ul&gt;
      &lt;li&gt;Vector类实现了一个动态数组，和ArrayList很相似，但是两者是不同的
        &lt;ul&gt;
          &lt;li&gt;Vector是同步访问的&lt;/li&gt;
          &lt;li&gt;Vector包含了许多传统的方法，这些方法不属于集合框架&lt;/li&gt;
          &lt;li&gt;Vector是线程安全的，ArrayList不是线程安全的&lt;/li&gt;
          &lt;li&gt;ArrayList在底层数组不够用时在原来的基础上扩展0.5倍，Vector是扩展一倍&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;为什么说Vector是线程安全的呢？因为在Vector的源码里面，凡是比较关键的操作，都使用了&lt;code&gt;synchronized&lt;/code&gt;这个关键字，保证了线程的安全性，加了这个关键字的操作，每一次只可以被一个线程执行，而不可以并发执行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;set&quot;&gt;Set&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;存取无序，元素不可以重复, 无下标Set集合下面有：HashSet，LinkedHashSet，TreeSet&lt;/li&gt;
  &lt;li&gt;HashSet
    &lt;ul&gt;
      &lt;li&gt;哈希集，每个加入哈希集的元素，都会先用hashcode来生成对这个元素的哈希值，然后根据计算得出的哈希值和数组的长度进行计算出存储的下标；如果下标的位置无元素，那么直接存储，如果有元素的话，使用equals来判断这个位置的这个元素和要存入的元素是不是一样的，如果结果为真，就不存了，因为已经有了，如果结果为假，那么就以链表的形式存在这个位置上&lt;/li&gt;
      &lt;li&gt;HashSet的底层是通过HashMap来实现的，所以其实很多的原理看HashMap就好了，以下是HashSet的一个构造函数&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Dummy value to associate with an Object in the backing Map&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PRESENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
   * Constructs a new, empty set; the backing &amp;lt;tt&amp;gt;HashMap&amp;lt;/tt&amp;gt; instance has
   * default initial capacity (16) and load factor (0.75).
   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;以下是一个使用HashSet的例子&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;好好学&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;c1&quot;&gt;// 利用HashSet来存取&lt;/span&gt;
      	&lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        	
      	&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;我的天&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;我是重复的&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;我是重复的&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;welcome&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        	
      	&lt;span class=&quot;c1&quot;&gt;// 遍历 第一种方式 迭代器&lt;/span&gt;
      	&lt;span class=&quot;nc&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()){&lt;/span&gt;
          	&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
      	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--------------&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
          	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      	&lt;span class=&quot;c1&quot;&gt;// 打印结果，重复的已经去掉了&lt;/span&gt;
      	&lt;span class=&quot;cm&quot;&gt;/*我的天
      	welcome
      	我是重复的
      	--------------
      	我的天
      	welcome
      	我是重复的*/&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//作者：欧阳思海&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//链接：https://juejin.im/post/5ad82dbef265da503825b240&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//来源：掘金&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;LinkedHashSet
    &lt;ul&gt;
      &lt;li&gt;是一个Set的实现，所以他其中存的不是键值对，而是值，这个东西是HashSet的子类，继承于HashSet，然后是基于LinkedHashMap来实现的&lt;/li&gt;
      &lt;li&gt;他的底层是基于链表和哈希表共同实现的，所以具有存取有序，元素唯一的特点，因为他是基于LinkedHashMap来实现的，所以他其实和LinkedHashMap的特点很像，他在底层是通过构造LinkedHashMap来实现的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TreeSet
    &lt;ul&gt;
      &lt;li&gt;TreeSet的特点是存取无序，元素唯一，可以进行排序（排序是在添加的时候），不过需要指定排序的算法&lt;/li&gt;
      &lt;li&gt;TreeSet是基于二叉树的数据结构，二叉树的存储是：
        &lt;ul&gt;
          &lt;li&gt;如果是第一个元素，那么直接存入，作为根节点，下一个元素进来是会跟节点比较，如果大于节点放右边的，小于节点放左边；等于节点就不存储。后面的元素进来会依次比较，直到有位置存储为止&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;TreeSet是如何保证元素的唯一性的？有两种方式
        &lt;ol&gt;
          &lt;li&gt;自定义对象实现Comparable接口，重写comparaTo方法，该方法返回0表示相等，小于0表示准备存入的元素比被比较的元素小，否则大于0&lt;/li&gt;
          &lt;li&gt;在创建TreeSet的时候向构造器中传入比较器Comparator接口实现类对象，实现Comparator接口重写compara方法。&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;comparable-comparator&quot;&gt;Comparable, Comparator&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;Comparable是在集合内部定义的方法实现排序，位于java.lang下，comparable接口仅仅包含一个函数就是compareTo，这个compareTo的方法是需要实现了comparable的类自己重写的。若x.compareTo(y) &amp;lt; 0，则x&amp;lt;y；以此类推等于和大于
    &lt;ul&gt;
      &lt;li&gt;自定义类要在加入list容器后能够排序，也可以实现comparable接口。所谓的&lt;em&gt;自然排序&lt;/em&gt;指的就是实现comparable接口设定的排序方式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Comparator是在集合外部实现的排序，Comparator包含两个函数&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;以下的代码展示了使用comparable的实例：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//对该类排序&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUserid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//如果年龄相同，则比较userid，也可以直接  return this.age-o.age;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;————————————————&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;版权声明&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;本文为CSDN博主&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;「&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolcf&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;」&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;的原创文章&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;遵循CC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SA版权协议&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;转载请附上原文出处链接及本声明&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;原文链接&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//blog.csdn.net/tolcf/article/details/52229068&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;如果我们需要控制某个类的次序，而该类本身不支持排序（该类没有实现Comparable接口）；那么，我们可以新建一个该类的比较器来进行排序。这个比较器只需要实现comparator就可以&lt;/li&gt;
  &lt;li&gt;comparator体现了一种策略模式，不改变对象本身，而是用一个策略对象来改变他的行为，以下是一个使用comparator的例子&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;test1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name4&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name5&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//new一个比较器&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;MyComparator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyComparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;//对list排序&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++){&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyComparator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUserid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUserid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;————————————————&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;版权声明&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;本文为CSDN博主&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;「&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolcf&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;」&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;的原创文章&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;遵循CC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SA版权协议&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;转载请附上原文出处链接及本声明&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;原文链接&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//blog.csdn.net/tolcf/article/details/52229068&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;可以看到上面的UserInfo是不可以进行自然排序的，因为他没有实现comparable，使用comparator来排序叫做比较器排序&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;map集合&quot;&gt;Map集合&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Map是一个双列集合，其中保存的是键值对，键要求保持唯一性，值可以重复。键值是一一对应的，一个键只能对应一个值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;hashmap&quot;&gt;HashMap&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;HashMap是一个实现了Map接口的基于哈希表的类
    &lt;ul&gt;
      &lt;li&gt;Map接口：Map是java中的一个接口。他为数据（键值对）提供了一种映射，这个映射可以一对一地把键映射到值。在java中，有很多实现了Map接口，HashMap就是其中一个&lt;/li&gt;
      &lt;li&gt;哈希表：哈希表（Hash table）是根据键而直接访问在内存储位置的数据结构。在访问一个键值对时，我们通过键去找值，这时候可以利用hash function（哈希函数）去找到键对应的存储位置&lt;code&gt;hash(key);&lt;/code&gt;。然后访问对应的存储地址可以找到值。理论上来讲，用这种方式去访问数据，如果没有冲突的话，他的复杂度仅仅为O(1)。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其实在了解了哈希表之后，HashMap就没什么难的了，HashMap中既有map的键值对特点，也有哈希表的特点。当HashMap实例化的时候，一个数组会随之生成，当通过HashMap中的&lt;code&gt;public V put(K key, V value)&lt;/code&gt;的方法的时候，会先通过哈希函数找到这个键对应的数组中的位置，然后尝试把值放入这个位置中去
    &lt;ul&gt;
      &lt;li&gt;为什么说是尝试呢？因为哈希表的有个很大的缺陷就是，有可能会把不同的键映射到同一个地方。如果这种情况出现的话，&lt;strong&gt;就会把这个值放入对应的位置的链表里面&lt;/strong&gt;，没错，在这个数组里面，每个元素同时也是一个可以储存多个值的链表
那么当进行查找&lt;code&gt;public V get(K key)&lt;/code&gt;的时候，一样的先通过哈希函数得到位置，如果此位置只有一个元素的话直接取值，如果此位置有多个元素的话，需要遍历这个链表去查找。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;简单地说，HashMap 在底层将 key-value 当成一个整体进行处理，这个整体就是一个 Entry 对象。HashMap 底层采用一个 Entry[] 数组来保存所有的 key-value 对，当需要存储一个 Entry 对象时，会根据 hash 算法来决定其在数组中的存储位置，在根据 equals 方法决定其在该数组位置上的链表中的存储位置；当需要取出一个Entry 时，也会根据 hash 算法找到其在数组中的存储位置，再根据 equals 方法从该位置上的链表中取出该Entry。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;以下是一个HashMap的部分数据&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AbstractMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cloneable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MAXIMUM_CAPACITY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEFAULT_LOAD_FACTOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.75f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//默认负载因子0.75&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TREEIFY_THRESHOLD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//当某条链表中元素的个数大于8时//将转变为红黑树&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//阈值，即当table中元素个数大于这个值就要resize()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadFactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//加载因子  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;有些数据就看一眼就能懂的，需要另外注意的是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- **loadFactor(负载因子)**：负载因子声明了一个哈希表的装填程度。**负载因子的选择可以被认为是空间与时间上的一种折中**，这是因为当负载因子较高时，一个数组能够被填的越满，所以对整体来说，空间浪费会小（不管怎么样内存都已经把这部分的空间分配给了他），但同时查找速度因为值变多而降低；而当负载因子较小时，一个数组不会被填的太满，所以它整体上对空间的浪费较大，但是查找速度会因为值变少而加快。
- **TREEIFY_THRESHOLD**：为了保证效率，当一个链表中的元素的数量大于这个阈值的时候，这个链表就会被变成一个红黑树。 - **HashMap查找的Complexity**: 要分析这个complexity很简单，hash function是o(1)，找到对应的位置是o(1)，如果有链表的话原来是o(n)，但是因为现在限制了链表的长度，所以查找最慢的地方在于搜索红黑树，而这个需要花上o(logn)，所以HashMap查找的complexity就是**o(logn)** - **为什么HashMap会造成死锁**(&amp;lt;a href=&quot;https://blog.csdn.net/lantian0802/article/details/42487803&quot;&amp;gt;原文链接&amp;lt;/a&amp;gt;)
- 为了了解造成死锁的原因，首先要知道的是，为了防止一个数组过载，HashMap会经常自己检查自己的size是否超出阈值，如果超过的话，需要进行resize操作，而当resize的时候，是很简单的新建一个更大尺寸的hash表并且把数据从旧表中直接转移到新表，当转移的时候，以下的事情会发生：
	1. 对索引数组中的元素遍历
	2. 对链表上的每一个节点遍历：用 next 取得要转移那个元素的下一个，将 e 转移到新 Hash 表的头部，因为可能有元素，所以先将 e.next 指向新 Hash 表的第一个元素（如果是第一次就是 null)，这时候新 Hash 的第一个元素是 e，但是 Hash 指向的却是 e 没转移时候的第一个，所以需要将 Hash 表的第一个元素指向 e
	3. 循环2，直到链表节点全部转移
	4. 循环1，直到所有索引数组全部转移
- 自己走一遍就不难发现，转移之后的链表和本来的链表顺序是相反的，而问题也出在这个地方。当多线程高并发的时候，当一个线程先完成对hash table的转移，那么链表有可能会形成环形链表，死锁就有可能会出现。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;linkedhashmap&quot;&gt;&lt;a href=&quot;https://wiki.jikexueyuan.com/project/java-collection/linkedhashmap.html&quot;&gt;LinkedHashMap&lt;/a&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;HashMap是无序的，HashMap在put的时候是根据键的哈希值找到对应的位置，所以如果遍历HashMap的话，会发现遍历出来的顺序跟放入的顺序是不一样的，所以java在jdk1.4以后提供了LinkedHashMap来实现有序的HashMap&lt;/li&gt;
  &lt;li&gt;LinkedHashMap是HashMap的一个子类，它保留了插入的顺序，所以如果要输出的顺序和输入时相同的话，那么就选用LinkedHashMap&lt;/li&gt;
  &lt;li&gt;LinkedHashMap 是 Map 接口的哈希表和链接列表实现，具有可预知的迭代顺序。此实现提供所有可选的映射操作，并允许使用 null 值和 null 键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。&lt;/li&gt;
  &lt;li&gt;那么这个东西是怎么实现的呢？LinkedHashMap的实现与HashMap的实现的不同之处在于，LinkedHashMap维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序或者是访问顺序。注意，&lt;strong&gt;这个实现不是同步的。如果多个线程同时访问链接的哈希映射，而其中至少一个线程从结构上修改了该映射，那么他必须保持外部同步&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;根据链表中元素的顺序可以分为：按插入顺序的链表，和按访问顺序(调用 get 方法)的链表。默认是按插入顺序排序，如果指定按访问顺序排序，那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;treemap&quot;&gt;TreeMap&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;这个东西和TreeSet很像。给TreeMap集合中保存自定义对象，自定义对象作为TreeMap集合的key值。由于TreeMap底层使用的二叉树，其中存放进去的所有数据都需要排序，要排序，就要求对象具备比较功能。对象所属的类需要实现Comparable接口。或者给TreeMap集合传递一个Comparator接口对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;hashtable&quot;&gt;Hashtable&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hashtable是原始的java.util的一部分，是一个dictionary的具体实现。然而，java2重构的Hashtable实现了Map接口，因此Hashtable现在集成到了集合框架中。它和HashMap很类似，但是它支持同步。像HashMap一样，Hashtable在哈希表中存储键/值对。当使用一个哈希表，要指定用作键的对象，以及要链接到该键的值。然后，该键经过哈希处理，所得到的散列码被用作存储在该表中值的索引。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Hashtable VS HashMap:
    &lt;ol&gt;
      &lt;li&gt;Hashtable继承于陈旧的Dictionary类，HashMap继承于Map接口&lt;/li&gt;
      &lt;li&gt;线程安全不一样，Hashtable中的方法都是线程安全的，都加入了synchronized的关键字；但是HashMap中的方法在默认情况下是非同步的。在多线程并发的情况下，Hashtable是可以直接用的，但HashMap的话要自己增加同步处理&lt;/li&gt;
      &lt;li&gt;Hashtable中，键值都不允许出现null；HashMap中，null可以作为键&lt;/li&gt;
      &lt;li&gt;HashTable直接使用对象的hashCode。而HashMap重新计算hash值。&lt;/li&gt;
      &lt;li&gt;HashTable中的hash数组初始大小是11，增加的方式是 old*2+1。HashMap中hash数组的默认大小是16，而且一定是2的指数。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;HashSet VS HashMap:
    &lt;ol&gt;
      &lt;li&gt;HashSet实现的是Set接口，HashMap实现的是Map接口&lt;/li&gt;
      &lt;li&gt;HashSet存储值，HashMap存储键值对&lt;/li&gt;
      &lt;li&gt;HashMap使用键对象来计算hash code，HashSet使用成员对象来计算&lt;/li&gt;
      &lt;li&gt;HashMap比较快&lt;/li&gt;
      &lt;li&gt;因为HashSet是基于HashMap来实现的，所以HashSet也是线程不安全的&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Collection VS Collections: 这个区别就很简单，Collection是一个接口，是set和list的父类；而Collections是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;io&quot;&gt;IO&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Java IO是一套java用来读写数据的API。大部分程序都要处理一些输入，并有输入产生一些输出。为此，java提供了java.io包&lt;/li&gt;
  &lt;li&gt;一个流可以理解成一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;java-io模型&quot;&gt;Java IO模型&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;关于Bio，我们需要知道什么是同步阻塞IO模型，Bio操作的对象：流，以及如何使用Bio进行网络编程，使用Bio进行网络编程的问题&lt;/li&gt;
  &lt;li&gt;关于Nio，我们需要知道什么是同步非阻塞IO模型，什么是多路复用Io模型，以及Nio中的Buffer,Channel,Selector的概念，以及如何使用Nio进行网络编程&lt;/li&gt;
  &lt;li&gt;关于Aio，我们需要知道什么是异步非阻塞IO模型，Aio可以使用几种方式实现异步操作，以及如何使用Aio进行网络编程&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&quot;blocking-nonblocking-asychronous&quot;&gt;&lt;a href=&quot;https://blog.csdn.net/historyasamirror/article/details/5778378&quot;&gt;Blocking, Nonblocking, Asychronous&lt;/a&gt;&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;同步阻塞Blocking根据karim的说法，在通信机制上面，blocking阻塞指的是Sender process is blocked while the message that it has sent has not been received，Receiver process is blocked till it receives a message。所以关于阻塞IO，最大的特点是IO执行的两个阶段都被block了。当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。对于network io来说，很多时候数据在一开始还没有到达（比如，还没有收到一个完整的UDP包），这个时候kernel就要等待足够的数据到来。而在用户进程这边，整个进程会被阻塞。当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果，用户进程才解除block的状态，重新运行起来。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/0_1280550787I2K8.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;同步非阻塞Nonblocking非阻塞指的是Sender process continue executing while the message has been send，Receiver process receives a valid message or null。从图中可以看出，当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。所以，用户进程其实是需要不断的主动询问kernel数据好了没有。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/0_128055089469yL.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;异步非阻塞Asychronous IO: 用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;assets/post_pics/0_1280551287S777.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;阻塞和非阻塞的关系还是很清晰的：调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准备数据的情况下会立刻返回。&lt;/li&gt;
  &lt;li&gt;同步和异步有点点难懂，先给一个官方解释：
    &lt;ul&gt;
      &lt;li&gt;A synchronous I/O operation causes the requesting process to be blocked until that I/O operation completes;&lt;/li&gt;
      &lt;li&gt;An asynchronous I/O operation does not cause the requesting process to be blocked;
  两者的区别就在于synchronous IO做”IO operation”的时候会将process阻塞。按照这个定义，之前所述的blocking IO，non-blocking IO，IO multiplexing都属于synchronous IO。有人可能会说，non-blocking IO并没有被block啊。这里有个非常“狡猾”的地方，定义中所指的”IO operation”是指真实的IO操作，就是例子中的recvfrom这个system call。non-blocking IO在执行recvfrom这个system call的时候，如果kernel的数据没有准备好，这时候不会block进程。但是，当kernel中数据准备好的时候，recvfrom会将数据从kernel拷贝到用户内存中，这个时候进程是被block了，在这段时间内，进程是被block的。而asynchronous IO则不一样，当进程发起IO 操作之后，就直接返回再也不理睬了，直到kernel发送一个信号，告诉进程说IO完成。在这整个过程中，进程完全没有被block。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2020-05-10T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/java-on-call-3</link>
          <guid isPermaLink="true">http://localhost:4000/java-on-call-3</guid>
        </item>
      
    
      
        <item>
          <title>Java On Call 2</title>
          <description>&lt;ol&gt;
  &lt;li&gt;Java基础知识&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;常用API&lt;/li&gt;
  &lt;li&gt;集合I/O&lt;/li&gt;
  &lt;li&gt;多线程、网络编程、反射、设计模式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是准备java面试的第二天，以上的分类的思维导图，来自-&amp;gt;&lt;a href=&quot;https://www.cnblogs.com/java1024/p/8757952.html&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;这里是整理好的面试题，至少都过一遍:
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86686492&quot;&gt;2019年最新java面试题及答案整理上&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41701956/article/details/86699263&quot;&gt;2019年最新java面试题及答案整理下&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;面向对象object-oriented&quot;&gt;面向对象(Object Oriented)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;面向对象是一种程序设计思想之一。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。&lt;strong&gt;面向过程是一种以过程为中心的编程思维。这些都是以&lt;em&gt;什么正在发生为主要目标进行编程。&lt;/em&gt;与面向底箱明显不同的是封装、继承、类&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;在看完了网上一个很生动的例子，这里写下一些个人的理解。面向对象应该是一个大于面向过程的概念，即面向对象融合了面向过程与对象。为什么这么说呢，在网上现有的对于面向过程的定义一般都如：面向过程指的是一种以事物为中心的编程思想。主要关注的是“怎么做”，即完成任务的具体细节。但是令我非常不解的一点就是：&lt;strong&gt;&lt;u&gt;难道面向对象思想中就不包含一丝面向过程的概念吗？这两个非得一定是互斥对立的吗？&lt;/u&gt;&lt;/strong&gt;个人认为，面向对象也关注任务的具体细节，但是面向对象把任务的具体细节抽象化，并且把事物分工给了各个对象，只不过，当我们无法再细分，具体到某一个对象的某一个任务的时候，我们不也是“关注任务的具体细节”吗？当不停的出现新的需求，或者同类任务却有不同的小细节时，面向对象就展现出了其优势。
    &lt;h4 id=&quot;类与对象&quot;&gt;类与对象&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;类与对象是不一样的东西，不过他是存在联系的。&lt;/em&gt;&lt;strong&gt;类对某一类事物进行描述，是抽象的；而对象是类的实例，是具象的。对象拥有他这一类的共有的属性，却也有独立与对象个体的属性。&lt;/strong&gt;万物皆是对象，当这个对象从一个类被实例化的时候，他就成了对象。打个比方，狗是一个类，狗规定了狗的一些共有性质（脊索动物门，哺乳纲…），而柯基是狗的一个子类，因为它继承了狗的特点，却也衍生出了自己的特点，而你家的养的小柯基jimmy则是一个对象，因为他不再是抽象的了，他是具象的一条狗叫jimmy&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;成员变量（class variable/member variable）&lt;/strong&gt;:
    &lt;ol&gt;
      &lt;li&gt;成员变量定义在类中，在整个类都可以被访问&lt;/li&gt;
      &lt;li&gt;成员变量随着对象的建立而建立，随着对象的消失而消失，存在于对象所在的堆内存中。成员变量与对象共存亡。&lt;/li&gt;
      &lt;li&gt;成员变量有默认初始化值。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;局部变量&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;局部变量只定义在局部范围，如函数内、语句内、只在所属的区域有效&lt;/li&gt;
      &lt;li&gt;局部变量存于栈内存中（因为只有function call的时候会用到这个局部变量），当方法执行完之后，变量空间会自动释放&lt;/li&gt;
      &lt;li&gt;局部变量没有默认初始化值&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;在使用变量时遵循的原则是就近原则，就是现在“局部”范围里面找，没有的话才是取到成员类的位置上找&lt;/li&gt;
  &lt;li&gt;小问题：父类的成员变量子类可不可以访问&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;静态变量&lt;/strong&gt;: 指的是使用&lt;code&gt;static&lt;/code&gt;修饰符修饰的变量
    &lt;ol&gt;
      &lt;li&gt;静态变量随着类的加载而存在（并不需要实例化），随着类的消失而消失&lt;/li&gt;
      &lt;li&gt;静态变量可以被对象调用，还可以被类名字调用&lt;/li&gt;
      &lt;li&gt;静态变量的数据储存在方法区（共享数据区）的静态区，所以也叫对象的共享数据&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;匿名对象&lt;/strong&gt;: 在实例化的时候没有明确的给出名字的对象。匿名对象只用一次，而且匿名对象只在堆内存中开辟空间，而不存在栈内存的引用。
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// 定义构造方法，为属性初始化&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 获取信息的方法&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;姓名：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;，年龄：&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;张三&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 匿名对象，可以看到张三这个对象是没有名字的，直接使用了person类的tell方法&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h4 id=&quot;封装encapsulation这里的解释很多都是从chenssy的博客中引用的&quot;&gt;封装（Encapsulation，这里的解释很多都是从&lt;a href=&quot;https://www.cnblogs.com/chenssy/p/3351835.html&quot; target=&quot;_blank&quot;&gt;chenssy的博客&lt;/a&gt;中引用的）&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;封装从字面上来理解就是包装的意思，专业点就是信息隐藏，是指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。系统的其他对象只能通过包裹在数据外面的已经授权的操作来与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节（当然也无从知道），但可以通过该对象对外的提供的接口来访问该对象。&lt;/li&gt;
  &lt;li&gt;如果用124的定义的化就很简单：Encapsulation is the process of defining a Class that has at least one customizable attribute&lt;/li&gt;
  &lt;li&gt;使用封装的好处：
    &lt;ol&gt;
      &lt;li&gt;良好的封装能够减少耦合（耦合指的是模块及模块之间信息或参数依赖程度）&lt;/li&gt;
      &lt;li&gt;类内部的结构可以自由修改&lt;/li&gt;
      &lt;li&gt;可以对成员进行更精确的控制&lt;/li&gt;
      &lt;li&gt;隐藏信息，实现细节&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;其实这个概念就是相当简单的，封装令一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，即使是方法，也可以被类封装起来&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.Serializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * A class to store Halloween information.
 * &amp;lt;p&amp;gt;
 * The year, the number of vistors, hourly temperatures in deg C and the weather condition is recorded. This class
 * has been created as a lecture example, and is not otherwise particularly useful!  
 * &amp;lt;p&amp;gt;
 * This version demonstrates the implementation of Comparable (for sorting) and Serializable (for
 * filing).  Also, the mutators for temperature and weather condition have been combined, so both
 * attributes have to be set at the same time.  In this way they cannot be set to an illegal value
 * independently.
 * 
 * @author Alan McLeod
 * @version 3.2
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4705089863030936649L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numMunchkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weatherCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Full parameter constructor.
	 * 可以看到如果是和类名一样的方法的那他就是个constructor
     * @param yr The year when the data was collected.
     * @param numKids The number of Trick or Treaters!
     * @param temps The air temperatures in degrees Centigrade in an array of int of any size.
     * @param weather The weather condition: &quot;clear&quot;, &quot;snow&quot; or &quot;rain&quot;.
     * @throws IllegalHalloweenException If arguments are not legal.
     */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 4 parameter constructor invokes mutators&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Halloween5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalHalloweenException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setNumMunchkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setWeather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end Halloween4 4 parameter constructor&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Three parameter constructor.  The weather condition does not have to be supplied.
	 * 利用了方法过载
     * @param yr The year when the data was collected.
     * @param numKids The number of Trick or Treaters.
     * @param temps The air temperatures in degrees Centigrade in an array of int of any size.
     * @throws IllegalHalloweenException if arguments are not legal.
     */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3 parameter constructor invokes 3 parameter constructor with an assumption about the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// weatherCondition attribute&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Halloween5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalHalloweenException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end Halloween4 3 parameter constructor&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Sets the year the data was recorded.
     * @param year The calendar year.
     * @throws IllegalHalloweenException if the year does not lie between 1959 and 2016
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalHalloweenException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1950&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalHalloweenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Illegal year: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end year mutator&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Sets the number of kids.
     * @param numKids The number of kids arriving at the door.
     * @throws IllegalHalloweenException if the number of kids is less than zero or greater
     * than 500.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setNumMunchkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalHalloweenException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalHalloweenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Illegal number of kids: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numMunchkins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numKids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end numMunchkinds mutator&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Sets the temperatures array and the weather condition String.  The temperatures are 
     * recorded with one temperature per hour.
     * @param temps An array of temperatures between -30 and 30 degrees C.
     * @param weather The weather condition as a String.
     * @throws IllegalHalloweenException if the condition is not &quot;rain&quot;, &quot;snow&quot;, &quot;clear&quot; or &quot;unknown&quot;,
     * or if the array is empty or any temperatures are not legal. 
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setWeather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalHalloweenException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avgTemperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalHalloweenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No temperatures supplied&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalHalloweenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Illegal temperature in array: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;avgTemperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;avgTemperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avgTemperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avgTemperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;snow&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avgTemperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unknown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;weatherCondition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalHalloweenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Illegal weather/temperature combination: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avgTemperature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; deg C.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    	
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end setWeather mutator&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the calendar year the data was recorded.
     * @return The year the data was recorded.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end getYear&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the number of visitors.
     * @return the number of Trick or Treaters.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNumMunchkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numMunchkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end getNumMunchkins Accessor&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the temperatures array.
     * @return The temperatures in degrees Centigrade.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTemperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end getTemperature Accessor&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns the weather condition.
     * @return The weather condition as a String.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWeatherCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weatherCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end getWeatherCondition Accessor&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * A String representation of the current object.
     * @return A String representation of the contents of the object containing the values of
     * all the attributes.
     */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Overrides (replaces) the toString method of the Object class.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;In &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; there were &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numMunchkins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; kids. Temperatures each hour were: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;and &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; deg C., and the weather was &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weatherCondition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end toString&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Tests two Halloween5 objects for equality.
     * @return &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if all the attributes of both objects are exactly equal, &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;
     * otherwise.
     * @param otherObject The other Halloween5 object.
     */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Overrides the equals method of the Object class.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arrayCheck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayCheck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;numMunchkins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numMunchkins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;weatherCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weatherCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end if&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end equals&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Compares Halloween5 objects on the basis of the number of visitors only.
     * @param otherH The other Halloween5 object.
     * @return A negative &amp;lt;code&amp;gt;int&amp;lt;/code&amp;gt; if the supplied object had more vistors, zero if they have the same
     * number and a positive number if the current object has more visitors.
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numMunchkins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numMunchkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end compareTo&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns a copy of the of the current Halloween5 object.
     * @return A copy of the current object.
     */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Overrides the clone method in the Object class.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hwCopy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;hwCopy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Halloween5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numMunchkins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temperatures&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weatherCondition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalHalloweenException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Should never get here!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end try/catch&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hwCopy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end clone&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;上面就是一个Halloween5的类，他有五个变量其中&lt;code&gt;serialVersionUID&lt;/code&gt;是一个静态变量，也就是说别的对象也可以使用&lt;/li&gt;
  &lt;li&gt;构造函数就是constructor，构造函数没有返回值，并且构造函数的名字与类名相同，构造函数也是可以过载的&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;this&lt;/code&gt;关键字的作用是对当前对象的引用；或者更高级一点的对当前方法所属对象的引用。这个东西在一个类中常见于构造函数内用来区分构造函数的局部变量与类的成员变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;继承inheritance&quot;&gt;继承(Inheritance)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;继承是java三大特性之二，它允许创建分等级分层次的类。继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 不要重复name和age字段/方法,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 只需要定义新增score字段/方法:&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setScore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;可以看到以上的代码，student类继承了person类，那么此时person就是student的父类，超类，基类；而student是person的子类，扩展类&lt;/li&gt;
  &lt;li&gt;子类可以直接访问父类中非私有的属性与方法，注意是非私有的，也就是说如果一个属性/方法被&lt;code&gt;private&lt;/code&gt;修饰符给修饰了，那么即使是子类也无法访问，但如果是一个加上了&lt;code&gt;protected&lt;/code&gt;修饰符的变量/方法，是可以被子类访问的&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;任何类都是Object类的子类&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;一个类只可以继承自一个类，也就是说，任何类都只有一个父类。但是一个父类却可以有多个子类&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;向上转型和向下转型：
    &lt;ul&gt;
      &lt;li&gt;向上转型（upcasting）指的是把一个子类类型安全的变为父类类型: &lt;code&gt;Person p = new Student();&lt;/code&gt;，注意这个操作是可以的&lt;/li&gt;
      &lt;li&gt;向下转型（downcasting）指的是令一个引用类型为父类的变量指向其子类，这个操作是不允许的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;super&lt;/code&gt;这个关键字可以给子类指向父类，并且在子类的构造函数中，必须符合以下规定：
    &lt;ol&gt;
      &lt;li&gt;每一个构造函数都会默认访问父类的构造函数&lt;code&gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;每一个构造函数第一行默认是super()&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;先执行父类的构造函数，再执行自己的&lt;/li&gt;
      &lt;li&gt;如果父类没有空参数构造函数，子类必须实打实的使用有参数的构造函数，并且子类可以访问本类其他构造函数，再访问父类的构造函数&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 调用父类的构造方法Person(String, int)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;方法的重写（override）：指的是子类将父类的方法重新实现，要利用&lt;code&gt;@override&lt;/code&gt;关键字，&lt;em&gt;子类方法的访问权限要大于等于父类方法的访问权限&lt;/em&gt;（不可以父类是public的，然后子类重写了之后来个private），静态方法只可以覆盖静态方法，子类不能覆盖父类私有方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;多态polymorphism&quot;&gt;多态(Polymorphism)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;从理论的层面上来看：&lt;strong&gt;多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;先说回之前就讲过的向上转型，即&lt;code&gt;Parent p = new Child();&lt;/code&gt;，这一行的意义是：定义了Parent类型的p，这个p指向Child类的对象实例。这样做的好处，也即是他的目的，是因为这个父类引用类型是指向子类的，所以他除了可以引用父类的共性之外，还可以使用子类强大的功能。但是这个upcasting肯定是存在缺陷的，这个缺陷就是：父类类型的引用可以调用&lt;strong&gt;父类中定义的所有属性和方法，对于只存在子类的方法和属性他就望尘莫及了。&lt;/strong&gt;也就是说如果一个函数在父类中被定义，在子类中被重写；另一个函数在父类中被定义，在子类中被重载，当我们用upcasting的这个方法定义的父类对象，这个对象会使用父类中的没被重载的函数（因为子类中被重载的函数并没有定义在父类），还有在子类中被重写了的函数（被重写的函数是被定义在父类的）&lt;/li&gt;
  &lt;li&gt;所以统一的对多态的机制进行了一个总结：指向子类的父类由于由于向上转型了，他只能访问父类中拥有的方法和属性，而对于只存在子类中而不存在父类中的方法，他无法引用，即使是在子类中重载的方法也无法使用；但是如果是子类中重写了父类中的某些方法，在调用这些方法的时候，必定是使用子类中定义的这些方法。&lt;/li&gt;
  &lt;li&gt;Java实现多态的三个必要条件：
    &lt;ol&gt;
      &lt;li&gt;&lt;em&gt;在多态中必须存在有继承关系的子类和父类&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;子类对父类中某些方法进行重写，那么在调用时就会调用在子类中覆盖的版本&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;在多态中需要将子类的引用赋予给父类对象，只有这样该引用此啊具备技能调用父类的方法和子类的方法&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;多态中的成员特点：
    &lt;ul&gt;
      &lt;li&gt;成员变量：编译运行全都是以父类为基准，编译时看父类有没有这个变量；运行时运行父类的变量&lt;/li&gt;
      &lt;li&gt;成员方法：编译看父类，运行看子类，编译的时候会看父类中有没有这个方法，有的话就编译成功；运行的时候，实际运行的是子类的重写的方法&lt;/li&gt;
      &lt;li&gt;静态方法：&lt;strong&gt;静态方法是无法被子类override的&lt;/strong&gt;，所以一样编译运行都看父类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;向下转型更具体来说是这样&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//注意这是不安全的&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;以下内容大部分转载自&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/3811437.html&quot;&gt;深入理解Java的接口和抽象类&lt;/a&gt;&lt;/p&gt;
    &lt;h4 id=&quot;抽象类abstract-class&quot;&gt;抽象类(Abstract Class)&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;A class which also have concrete method definition and any kind of attribute but it can only be &lt;strong&gt;extended&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;要知道什么是抽象类，就要知道什么是抽象方法：&lt;code&gt;abstract void fun();&lt;/code&gt;，抽象方法只有方法的声明，却没有具体的实现。如果一个类被&lt;code&gt;abstract&lt;/code&gt;这个关键字所修饰，那么这个类是个抽象类，而抽象类中，十有八九有抽象方法（因为如果一个类中没有抽象方法，那么把这个类声明为抽象类也没有什么意义），但是，只要有一个方法是抽象方法，那么这个类就一定是被定义成抽象类的&lt;/li&gt;
  &lt;li&gt;从阿兰的话里也可以读出来的是，抽象类只可以被继承，他是为了继承而存在的，如果定义了抽象类却不去继承他，那么相当于白定义了。如果一个父类中&lt;/li&gt;
  &lt;li&gt;抽象类和普通类的区别
    &lt;ul&gt;
      &lt;li&gt;抽象方法只可以为public/protected，如果定义成private/final/static的话就很傻逼了，子类无法重写这个抽象方法，不能被子类继承&lt;/li&gt;
      &lt;li&gt;抽象类不能用来创建对象&lt;/li&gt;
      &lt;li&gt;如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为抽象类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;接口interface&quot;&gt;接口(Interface)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在JAVA编程语言中是一个特殊的抽象类，但是接口并不是类，因为他不继承于Object。是抽象方法的集合，接口通常以interface来声明。从语义的角度解释，接口泛指供别人调用的方法或者函数，所以接口可以被看作是对行为的抽象。&lt;/li&gt;
  &lt;li&gt;接口是这么样子定义的：&lt;code&gt;interface InterfaceName{}&lt;/code&gt;，接口中可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为public static final变量（并且只能是public static final变量，用private修饰会报编译错误），而方法会被隐式地指定为public abstract方法且只能是public abstract方法（用其他关键字，比如private、protected、static、 final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现，也就是说，接口中的方法必须都是抽象方法。从这里可以隐约看出接口和抽象类的区别，接口是一种极度抽象的类型，它比抽象类更加“抽象”，并且一般情况下不在接口中定义变量。&lt;/li&gt;
  &lt;li&gt;接口不是类，所以是不可以被类继承(extend)的，但是接口却是可以被implemented的：&lt;code&gt;class ClassName implements Interface1, Interface2,... {}&lt;/code&gt;, 可以看到一个类可以遵循多个接口，和抽象类的继承一样，但凡是遵循了某接口的类都必须实现这个接口中定义的抽象方法；如果他不打算实现这个接口中的抽象方法，那么这个类就得是个抽象类。但是对于另一个接口来说，接口是可以继承接口的，并且一个接口是可以继承多个接口的&lt;/li&gt;
  &lt;li&gt;接口和抽象类的区别：
    &lt;ul&gt;
      &lt;li&gt;抽象类有构造函数，抽象类的成员方法可以有普通方法和抽象方法，甚至还可以只有普通方法，抽象类的成员变量是很普通的&lt;/li&gt;
      &lt;li&gt;而接口没有构造函数，接口只可以有抽象方法，接口的成员变量全都是被final修饰的&lt;/li&gt;
      &lt;li&gt;接口与类的实现方式是多实现，抽象类与类的继承关系是单继承&lt;/li&gt;
      &lt;li&gt;从意义上来讲，抽象类是对类的抽象，继承了此抽象类的子类，那么子类也是这个抽象类；而接口是对行为的抽象，实现了这个接口的类，只能说他能干到这个接口中的行为，而不能说这个类是这个接口&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;所以当只有部分子类要完成的方法，我们可以直接把它封装到一个接口里面，但是对于全部子类都要实现的方法，应该使用抽象类&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;内部类inner-class&quot;&gt;内部类(Inner Class)&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;关于内部类的内容多选自&lt;a href=&quot;https://www.cnblogs.com/chenssy/p/3388487.html&quot;&gt;java提高篇（八）—-详解内部类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;还有这个&lt;a href=&quot;https://www.cnblogs.com/dolphin0520/p/3811445.html&quot;&gt;Java内部详解&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A class defined within a class。就是在一个类的内部再定义一个类。里面定义的这个类就叫做内部类。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;成员内部类（成员内部类是最普通的内部类，它的定义为位于另一个类的内部）
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     	
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    	 
  	&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Draw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//内部类&lt;/span&gt;
      	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawSahpe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;drawshape&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;内部类可以访问外部类的成员，包括私有的成员，但是如果外部类想要访问内部类的成员，必须要创建内部类对象，才可以访问，在编译的时候，编译器会默认为成员内部类添加了一个指向外部类对象的引用&lt;/li&gt;
      &lt;li&gt;要注意的是！当成员内部类拥有和外部类同名的成员变量或者方法时，默认情况下访问的是成员内部类的成员。如果从外面要访问外部类的同名成员，需要&lt;code&gt;外部类.this.成员&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须首先存在一个外部类对象。
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;Outter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//或者是&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInnerInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。比如上面的例子，如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。我个人是这么理解的，由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;局部内部类（定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内）&lt;/li&gt;
  &lt;li&gt;局部内部类因为就像是个局部变量一样，是不可以有修饰符的
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;People&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;People&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Man&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Man&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
			 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	 
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;People&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWoman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Woman&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;People&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//局部内部类&lt;/span&gt;
              &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Woman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;匿名内部类（匿名内部类也就是没有名字的内部类，正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写）&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	 
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Demo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eat something&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      	&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
      	&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;以上这段代码的运行结果也是eat something，这样的写法就比较简洁&lt;/li&gt;
      &lt;li&gt;匿名内部类是唯一一个没有构造函数的类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;静态内部类（和成员内部类很像，只不过他多了个静态修饰符）
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;nc&quot;&gt;Outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	 
  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Outter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Outter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	         
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	     
  	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Inner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Inner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	             
      	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;静态内部类是不可以像成员内部类一样访问外部类非静态的内容，因为静态内部类是独立于外部类的，是可以独立创建的，所以如果允许静态内部类访问外部类的非静态的内容的话就会产生矛盾&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;为什么要使用内部类？&lt;strong&gt;使用内部类最吸引人的原因是：每个内部类都能独立地继承一个接口的实现，所以无论外围类是否已经继承了某个接口的实现，对于内部类没有影响&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mother&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Son&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Father&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mother&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Daughter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Father&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mother_&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mother&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;思考一个很高深的问题，为什么局部内部类和匿名内部类只可以访问局部final变量？先考虑以下代码&lt;/p&gt;

    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       	  
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     	
  	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      	&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      	&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
          	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
              	&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          	&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
      	&lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这段代码就很有东西，观察test这个方法，他访问的是a和b这两个final变量，当test方法执行完毕之后，变量a和b的生命周期就结束了（因为是局部的），那么如果Thread在此时还没结束，Thread还要访问a/b的，那么怎么办呢？Java采用了复制的手段来解决这个问题，具体是：也就说如果局部变量的值在编译期间就可以确定，则直接在匿名内部里面创建一个拷贝。如果局部变量的值无法在编译期间确定，则通过构造器传参的方式来对拷贝进行初始化赋值。前者很好理解，如果是后者的话，可以看出，在run方法中访问的变量a和test中实际的局部变量啊不是一个变量，他们只不过有一样的值，那么如果test中的a被确定了，然后run又想改变a的内容的话，会造成数据不一致！所以java编译器限定必须将变量a限制为final变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;final关键字：可以修饰类，方法和变量，fianl修饰的类不能被子类继承，final修饰的方法，不能被子类重写，final修饰的变量的值不能被改变，其实也就相当于一个常量了&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;常用api&quot;&gt;常用API&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;API，英文全称Application Programming Interface，翻译为“应用程序编程接口”。是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。简单的来说就是一个让编程人员不需要读到源码就能使用某一现存的软件/硬件的接口
    &lt;h4 id=&quot;wrapper-classes包装类&quot;&gt;Wrapper classes（包装类）&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;有的时候为了方便，我们往往希望一个基本数据类型不仅仅是基本数据类型，我们也想他是一个对象，毕竟万物皆是对象。那么Java为每一个基本数据类型都有一个唯一的包装类。基本类型与其包装类都可以通过他对应的包装类的中的静态成员方法进行转换。注意的是，&lt;strong&gt;这些包装类都是final修饰的&lt;/strong&gt;，他们都无法被继承或重写.
    &lt;h5 id=&quot;integer包装类&quot;&gt;Integer包装类&lt;/h5&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public Integer(int value)&lt;/code&gt;: Integer包装类的构造函数，构造一个值为value的Integer对象&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public Integer(String s)&lt;/code&gt;: Integer包装类的构造函数，相当于把字符串s中的数字提取出来放入Integer对象当中&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;static int MAX_VALUE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;static int MIN_VALUE&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static String toBinaryString(int i)&lt;/code&gt;: 用String返还一个int的二进制形式&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static String toHexSrtring(int i)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static String toOctal(int i)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static String toString(int i, int radix)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static Integer valueOf(String s, int radix)&lt;/code&gt;: 相当于把一个String中的int提取出来并返还&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public Integer(int value)&lt;/code&gt;: 和构造函数一样，不过也有其他的意义，int -&amp;gt; Integer的转换&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public int intValue()&lt;/code&gt;: Integer -&amp;gt; int的转换
    &lt;h4 id=&quot;object&quot;&gt;Object&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public String toSrting()&lt;/code&gt;: 就是那个每个对象都要改来改去的方法&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public boolean equals(Object obj)&lt;/code&gt;: 这个方法的意义是判断两个object是不是指向同一个类&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;protected void finalize()&lt;/code&gt;: The java.lang.Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. 似乎是判断已经没有对这个类的引用&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public final Class getClass()&lt;/code&gt;: returns the runtime class of an object.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public int hashCode()&lt;/code&gt;: method returns a hash code value for the object.
    &lt;h4 id=&quot;scanner&quot;&gt;Scanner&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public String nextLine()&lt;/code&gt;: 以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符且可以获得空白。&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public int nextInt()&lt;/code&gt;: 读取整数
    &lt;h4 id=&quot;string&quot;&gt;String&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public String()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boolean equals(Object obj)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boolean equalsIgnoreCase(Srting str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boolean contains(Srting str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boolean startsWith(Srting str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boolean endsWith(String str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;boolean isEmpty&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;int length()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;char charAt(int index)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;int indexOf(int ch)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;int indexOf(String str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;int indexOf(int ch, int fromIndex0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String subSrting(int start, int end)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;byte[] getBytes()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;char[] toCharArrays()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;static String copyValueOf(char[] chs)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;static String valueOf(char[] chs)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;static String valueOf(int i)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String toLowerCase()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String concat(String str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String replace(char old, char new)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String replace(String old, String new)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String[] split(String regex)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String trim()&lt;/code&gt;: 去除字符串两端空格
    &lt;h4 id=&quot;arrays&quot;&gt;Arrays&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static String toSrting(int[] a)&lt;/code&gt;: This method returns a string representation of a.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static void sort(int[] a)&lt;/code&gt;: o(nlogn)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static int binarySearch(int[] a, int key)&lt;/code&gt;
    &lt;h4 id=&quot;stringbuffer&quot;&gt;StringBuffer&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;众所周知String作为不可修改的对象，即每次更改String都会产生一个新的字符串对象，与之相对应的StringBuffer类的对象能够进行多次修改并且不会产生新的未使用的对象，因此在内存上要优于String对象&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public StringBuffer()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public StringBuffer(int capacity)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public StringBuffer(String str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public int length()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public int capacity()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public StringBuffer append(int i)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public StringBuffer insert(int offset, int i)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;StringBuffer delete(int start, int end)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;StringBuffer deleteCharAt(int index)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;StringBuffer replace(int start, int end, String str)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String substring(int start, int end)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;StringBuffer reverse()&lt;/code&gt;
    &lt;h4 id=&quot;random&quot;&gt;Random&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public Random(long seed)&lt;/code&gt;: 构造一个random类，If two instances of Random are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public int nextInt(int n)&lt;/code&gt;: 随机生成一个0到n之间的整数
    &lt;h4 id=&quot;system&quot;&gt;System&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static void gc()&lt;/code&gt;: The java.lang.System.gc() method runs the garbage collector&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static void exit(int status)&lt;/code&gt;: The java.lang.System.exit() method terminates the currently running Java Virtual Machine.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static long currentTimeMills()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)&lt;/code&gt;: The java.lang.System.arraycopy() method copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array.
    &lt;h4 id=&quot;date&quot;&gt;Date&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public Date()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public Date(long date)&lt;/code&gt;: 毫秒到日期的转换&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public long getTime()&lt;/code&gt;: 日期到毫秒的转换
    &lt;h4 id=&quot;dateformat&quot;&gt;DateFormat&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner. SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public SimpleDateFormat(String pattern)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public final String format(Date date)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public Date parse(String source)&lt;/code&gt;
    &lt;h4 id=&quot;calender&quot;&gt;Calender&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public static Calender getInstance()&lt;/code&gt;: The java.util.Calendar.getInstance() method gets a calendar using the specified time zone and specified locale.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public int get(int field)&lt;/code&gt;: returns the value of the given calendar field.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public final void set(int year, int month, int date)&lt;/code&gt;: sets the values for the calendar fields YEAR, MONTH,DAY_OF_MONTH,HOUR_OF_DAY,MINUTE and SECOND.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;public abstract void add(int field, int amount)&lt;/code&gt;: adds or subtracts the specified amount of time (amount) to the given calendar field (field), based on the calendar’s rules.&lt;/li&gt;
&lt;/ul&gt;

</description>
          <pubDate>2020-05-09T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/java-on-call-2</link>
          <guid isPermaLink="true">http://localhost:4000/java-on-call-2</guid>
        </item>
      
    
      
        <item>
          <title>Java On Call 1</title>
          <description>&lt;p&gt;刚刚突然接到了java面试的通知，具体的时间还没有定下来。今天是周五，所以面试最快也得两天之后，趁这两天时间，根据网上的java知识导图，把java的知识全部复习（预习）一遍。首先下面列举一下需要学习/温习的知识，总共分为五大类&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Java基础知识&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;常用API&lt;/li&gt;
  &lt;li&gt;集合I/O&lt;/li&gt;
  &lt;li&gt;多线程、网络编程、反射、设计模式&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里是我找到的&lt;a href=&quot;https://www.cnblogs.com/java1024/p/8757952.html&quot;&gt;思维导图的原地址&lt;/a&gt;，衷心祝愿莘莘学子可以在平时下功夫学习而不是像我这样临时抱佛脚。以上的知识点分类相当全面，我个人的话，对于第四和第五点尤其不熟悉，所以应该会花上比较多的功夫去学习。&lt;/p&gt;

&lt;h3 id=&quot;java基础知识&quot;&gt;Java基础知识&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;面向对象：是一种具有对象概念的程序变成典范。面向对象中，每一个对象应该都可以接收数据，处理数据并且将数据传达给其他的对象。
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;类和对象是一样的吗？&lt;/em&gt;：类和对象是不一样的，类是对某一类事物的描述，是抽象的；而对象是一个实实在在的个体，是类的&lt;strong&gt;实例&lt;/strong&gt;。对象是函数、变量的集合体，而类是一组具有相同属性的对象集合体。所以按照这样子的观念来理解的话，万物皆是对象，在代码运行的时候，当某个东西实例化了一个类的时候，这个东西就变成了这个类的对象。先有类，才有类的实例：对象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JDK(java development kit)：java开发工具包，每个写java的人都要装jdk，jdk在运行的时候，包含以下四个文件夹
    &lt;ol&gt;
      &lt;li&gt;bin(其中编译器javac.exe就包含在这里面)&lt;/li&gt;
      &lt;li&gt;include(java和JVM交互用的头文件)&lt;/li&gt;
      &lt;li&gt;lib(类库)&lt;/li&gt;
      &lt;li&gt;JRE(java运行环境)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;JRE(Java runtime environment)：JVM在解释class的时候需要调用解释需要的类库lib。JRE中有两个文件夹bin和lib，可以认为bin里的就是JVM，而lib中则是JVM需要的类库。把JVM和lib结合起来就是JRE。JRE中包含了JVM，JVM是java的核心部分，JRE试运行java程序不可缺少的一部分。&lt;/li&gt;
  &lt;li&gt;JVM(Java virtual machine)：java虚拟机是整个java实现跨平台最核心的部分。记住，当我们在写java文件的时候，一个.java文件是无法被执行的，首先要先利用javac.exe去编译这个文件，.java文件会被编译成.class文件。.class文件也并不直接在机器的操作系统上执行，而是经过JVM这个虚拟机，这种类文件会在虚拟机上执行，通过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。JVM是java平台很基础很核心的部分，他通过抽象操作系统和CPU结构，提供了一种&lt;strong&gt;与平台无关的代码执行方式&lt;/strong&gt;. &lt;strong&gt;JVM的主要工作是解释自己的指令集到CPU的指令集或OS的系统调用&lt;/strong&gt;。
&lt;img src=&quot;assets/post_pics/2.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“Write once, Run Anywhere”&lt;/strong&gt;：这是java所倡导的标志性口号，这个标志性口号是建立在JRE上面的。&lt;strong&gt;&lt;em&gt;java应用程序和操作系统之间增加了JRE这个虚拟层。而 Java 程序的字节码文件可以放到任意装有 JRE 的计算机运行，再由不同 JRE 的将它们转化成相应的机器代码，这就实现了 Java 程序的可移植性。&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;原码(True Form)：原码是指一个二进制数左边加上符号位后所得到的码，且当二进制数大于0时，符号位为0；二进制数小于0时，符号位为1；二进制数等于0时，符号位可以为0或1(+0/-0)。例如：00001011代表正的0001011即+11。&lt;/li&gt;
  &lt;li&gt;反码（One’s Complement）:反码是一种在计算机中数的机器码表示。对于单个数值（二进制的0和1）而言，对其进行取反操作就是将0变为1，1变为0。&lt;/li&gt;
  &lt;li&gt;补码（Two’s Complement）:是一种用二进制表示有号数的方法，也是一种将数字的正负号变号的方式，常在计算机科学中使用。他make the most significant bit a negative number. 例如：最小的signed是10000000，换算成十进制就是\( (-1)*2^{7} = -128 \)。除了那一位，其他位的运算照旧。
&lt;img src=&quot;assets/post_pics/Snipaste_2020-05-08_20-52-04.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Roundoff Error: Only sum of power of 2 can be stored properly. 被电脑无法储存的部分就被成为是Roundoff Error。&lt;/li&gt;
  &lt;li&gt;基本数据类型：
    &lt;ul&gt;
      &lt;li&gt;整数类型：byte（1 byte:-128 to 127，short（2 bytes:-32768 to 32767），int（4 bytes:-2147483648 to 2147483647），long（8 bytes）&lt;/li&gt;
      &lt;li&gt;浮点类型：float（4 bytes），double（8 bytes）&lt;/li&gt;
      &lt;li&gt;字符类型：char（2 bytes）&lt;/li&gt;
      &lt;li&gt;布尔类型&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;引用数据类型：指向一个对象，不是原始值，指向对象的变量是引用变量。&lt;em&gt;引用类型常见的有：String，StringBuffer，ArrayList，HashSet，HashMap等。&lt;/em&gt;. &lt;strong&gt;&lt;em&gt;注意！类和接口也算是引用数据类型&lt;/em&gt;&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;数据类型之间的转换：当储存在一个类型的数据被转换成另一个类型时会发生什么
    &lt;ul&gt;
      &lt;li&gt;byte &amp;gt; short &amp;gt; int &amp;gt; float &amp;gt; double&lt;/li&gt;
      &lt;li&gt;隐式转换发生于当位于上行的某个类型尝试转换为位于其右边的类型，此时什么事也不会发生，因为是从小到大。但是强制转换发生于某个类型尝试转换为位于其左边的类型，此时从一个容量大的数据类型转换成容量小的数据类型，会&lt;strong&gt;loss of precision&lt;/strong&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;三元运算符&lt;code&gt;expression1 ? expression2 : expression3&lt;/code&gt;: expression是一个布尔表达式，如果expression1是true，那么将执行/返还expression2，否则将执行/返还 expression3
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;x:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// code block&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;y:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// code block&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// code block&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;expression会被执行一次，它的值将会被拿来与各个case做比较，如果有match的花，那么其对应的代码块就会被运行&lt;/li&gt;
  &lt;li&gt;函数修饰符：
    &lt;ul&gt;
      &lt;li&gt;public：公公控制符&lt;/li&gt;
      &lt;li&gt;private：指定此方法只能有自己类等方法访问，其他的类不能访问（包括子类）&lt;/li&gt;
      &lt;li&gt;protected：保护访问控制符，指定该方法只可以被它的类和子类进行访问&lt;/li&gt;
      &lt;li&gt;final：指定该方法不能被重载(overload)&lt;/li&gt;
      &lt;li&gt;static：指定不需要实例化就可以激活的一个方法&lt;/li&gt;
      &lt;li&gt;synchronized：就是管层的那个！！同步修饰符，给方法加以互斥的控制&lt;/li&gt;
      &lt;li&gt;native：本地修饰符。指定此方法的方法题使用其他语言在程序外部编写的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;函数的重载(Method Overloading): Overloading is when a &lt;strong&gt;method name&lt;/strong&gt; is used more than once in method declarations within the same class.	- 当在一个class中，method的名字被多次使用，但是符合The rule is that no two methods with the same name within a class can have the same number and/or types of parameters in the method declarations. (The “NOT” rule.)这个规定的函数都被称作重载函数。&lt;/li&gt;
  &lt;li&gt;数组：可以存放多个&lt;em&gt;相同数据类型数据的容器&lt;/em&gt;。当创建的时候，不同数据类型的元素会被给予默认值：
    &lt;ul&gt;
      &lt;li&gt;整数：0，浮点数：0.0，字符：’\u0000’一个空格，布尔：false，引用数据类型：null。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
          <pubDate>2020-05-08T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/java-on-call-1</link>
          <guid isPermaLink="true">http://localhost:4000/java-on-call-1</guid>
        </item>
      
    
      
        <item>
          <title>Hello World</title>
          <description>&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;这篇文章是本站写下的第一篇文章，相当有纪念价值。这个网站简单的基于github pages和Jekyll. 折腾着把网站基本搭建好了之后，才发现好像没啥东西写。。。点击我的个人头像可以随时进入我的个人简介，里面有我的联系方式，想和我交流的小伙伴们请不要犹豫戳戳戳！！&lt;/p&gt;
</description>
          <pubDate>2020-05-07T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/Hello-World</link>
          <guid isPermaLink="true">http://localhost:4000/Hello-World</guid>
        </item>
      
    
      
        <item>
          <title>For Example of very Long Title Would Be Typography Elements in One</title>
          <description>&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This markdown cheatsheet is a typography demo for this theme. Check out this post to learn more about this markdown usage when you want to get started with this theme. Enjoy!&lt;/p&gt;

&lt;h2 id=&quot;typography-elements-in-one&quot;&gt;Typography Elements in One&lt;/h2&gt;

&lt;p&gt;Let’s start with a informative paragraph. &lt;strong&gt;This text is bolded.&lt;/strong&gt; But not this one! &lt;em&gt;How about italic text?&lt;/em&gt; Cool right? Ok, let’s &lt;strong&gt;&lt;em&gt;combine&lt;/em&gt;&lt;/strong&gt; them together. Yeah, that’s right! I have code to highlight, so &lt;code class=&quot;highlighter-rouge&quot;&gt;ThisIsMyCode()&lt;/code&gt;. What a nice! Good people will hyperlink away, so &lt;a href=&quot;#&quot;&gt;here we go&lt;/a&gt; or &lt;a href=&quot;http://www.example.com&quot;&gt;http://www.example.com&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;headings-h1-to-h6&quot;&gt;Headings H1 to H6&lt;/h2&gt;

&lt;h1 id=&quot;h1-heading&quot;&gt;H1 Heading&lt;/h1&gt;

&lt;h2 id=&quot;h2-heading&quot;&gt;H2 Heading&lt;/h2&gt;

&lt;h3 id=&quot;h3-heading&quot;&gt;H3 Heading&lt;/h3&gt;

&lt;h4 id=&quot;h4-heading&quot;&gt;H4 Heading&lt;/h4&gt;

&lt;h5 id=&quot;h5-heading&quot;&gt;H5 Heading&lt;/h5&gt;

&lt;h6 id=&quot;h6-heading&quot;&gt;H6 Heading&lt;/h6&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;footnote&quot;&gt;Footnote&lt;/h2&gt;

&lt;p&gt;Let’s say you have text that you want to refer with a footnote, you can do that too! This is an example for the footnote number one &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. You can even add more footnotes, with link! &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;blockquote&quot;&gt;Blockquote&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Start by doing what’s necessary; then do what’s possible; and suddenly you are doing the impossible. –Francis of Assisi&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This theme does NOT support nested blockquotes.&lt;/p&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;list-items&quot;&gt;List Items&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;First order list item&lt;/li&gt;
  &lt;li&gt;Second item&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Unordered list can use asterisks&lt;/li&gt;
  &lt;li&gt;Or minuses&lt;/li&gt;
  &lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;code-blocks&quot;&gt;Code Blocks&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;JavaScript syntax highlighting&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Python syntax highlighting&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No language indicated, so no syntax highlighting.
But let's throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;mathematics&quot;&gt;Mathematics&lt;/h2&gt;

&lt;p&gt;The theme comes ready with &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;mathjax&lt;/a&gt; support built in, allowing for both simple inline equations like &lt;script type=&quot;math/tex&quot;&gt;ax^2 + bx + c = 0&lt;/script&gt; and much more complex mathematical expressions such as equation &lt;script type=&quot;math/tex&quot;&gt;\eqref{eq:sample}&lt;/script&gt; below.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\nabla \times \vec{\mathbf{B}} -\, \frac1c\, \frac{\partial\vec{\mathbf{E}}}{\partial t}  &amp;= \frac{4\pi}{c}\vec{\mathbf{j}} \\   
\nabla \cdot \vec{\mathbf{E}} &amp;= 4 \pi \rho \tag{2} \label{eq:sample}\\
\nabla \times \vec{\mathbf{E}}\, +\, \frac1c\, \frac{\partial\vec{\mathbf{B}}}{\partial t}  &amp;= \vec{\mathbf{0}} \\
\nabla \cdot \vec{\mathbf{B}}  &amp;= 0\\
\end{align} %]]&gt;&lt;/script&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;table&quot;&gt;Table&lt;/h2&gt;

&lt;h3 id=&quot;table-1-with-alignment&quot;&gt;Table 1: With Alignment&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;table-2-with-typography-elements&quot;&gt;Table 2: With Typography Elements&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Markdown&lt;/th&gt;
      &lt;th&gt;Less&lt;/th&gt;
      &lt;th&gt;Pretty&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Still&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renders&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;nicely&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;horizontal-line&quot;&gt;Horizontal Line&lt;/h2&gt;

&lt;p&gt;The HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element is for creating a “thematic break” between paragraph-level elements. In markdown, you can create a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; with any of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;___&lt;/code&gt;: three consecutive underscores&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;: three consecutive dashes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;***&lt;/code&gt;: three consecutive asterisks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;renders to:&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;div class=&quot;divider&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;media&quot;&gt;Media&lt;/h2&gt;

&lt;h3 id=&quot;youtube-embedded-iframe&quot;&gt;YouTube Embedded Iframe&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/n1a7o44WxNo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;image&quot;&gt;Image&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://octodex.github.com/images/minion.png&quot; alt=&quot;Minion&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Footnote number one yeah baby! Long sentence test of footnote to see how the words are wrapping between each other. Might overflowww! &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;A footnote you can link to - &lt;a href=&quot;#&quot;&gt;click here!&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
          <pubDate>2016-10-18T00:00:00+08:00</pubDate>
          <link>http://localhost:4000/very-long-title-post</link>
          <guid isPermaLink="true">http://localhost:4000/very-long-title-post</guid>
        </item>
      
    
  </channel>
</rss>
